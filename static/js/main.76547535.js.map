{"version":3,"file":"static/js/main.76547535.js","mappings":"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","sources":["../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/publicPath","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../node_modules/framer-motion/dist/es/projection/node/state.mjs","../node_modules/framer-motion/dist/es/projection/node/id.mjs","../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../node_modules/framer-motion/dist/es/motion/index.mjs","../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","../node_modules/framer-motion/dist/es/utils/clamp.mjs","../node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","../node_modules/framer-motion/dist/es/value/types/utils.mjs","../node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../node_modules/framer-motion/dist/es/utils/resolve-value.mjs","../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","../node_modules/framer-motion/dist/es/render/html/config-motion.mjs","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/pipe.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../node_modules/framer-motion/dist/es/frameloop/data.mjs","../node_modules/framer-motion/dist/es/frameloop/index.mjs","../node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs","../node_modules/framer-motion/dist/es/gestures/hover.mjs","../node_modules/framer-motion/dist/es/gestures/focus.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/utils/noop.mjs","../node_modules/framer-motion/dist/es/gestures/press.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../node_modules/framer-motion/dist/es/utils/errors.mjs","../node_modules/framer-motion/dist/es/utils/time-conversion.mjs","../node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","../node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs","../node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","../node_modules/framer-motion/dist/es/easing/ease.mjs","../node_modules/framer-motion/dist/es/value/types/color/utils.mjs","../node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","../node_modules/framer-motion/dist/es/value/types/color/hex.mjs","../node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","../node_modules/framer-motion/dist/es/value/types/color/index.mjs","../node_modules/framer-motion/dist/es/utils/mix.mjs","../node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","../node_modules/framer-motion/dist/es/utils/mix-color.mjs","../node_modules/framer-motion/dist/es/value/types/complex/index.mjs","../node_modules/framer-motion/dist/es/utils/mix-complex.mjs","../node_modules/framer-motion/dist/es/utils/progress.mjs","../node_modules/framer-motion/dist/es/utils/interpolate.mjs","../node_modules/framer-motion/dist/es/utils/offsets/default.mjs","../node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","../node_modules/framer-motion/dist/es/easing/circ.mjs","../node_modules/framer-motion/dist/es/easing/back.mjs","../node_modules/framer-motion/dist/es/animation/utils/easing.mjs","../node_modules/framer-motion/dist/es/easing/anticipate.mjs","../node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","../node_modules/framer-motion/dist/es/utils/offsets/time.mjs","../node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","../node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","../node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","../node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","../node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","../node_modules/framer-motion/dist/es/animation/animators/instant.mjs","../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","../node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","../node_modules/framer-motion/dist/es/utils/array.mjs","../node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","../node_modules/framer-motion/dist/es/value/index.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/debug/record.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/store.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../node_modules/framer-motion/dist/es/render/dom/motion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","games/images/playing_cards/queen_of_spades2.svg","games/images/playing_cards/jack_of_diamonds2.svg","games/PlayingCard.js","games/pinochle/PinochleTitleScreen.js","games/pinochle/PinochleGame.js","App.js","index.js"],"sourcesContent":["/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.p = \"/nickster/\";","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","function isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nlet id = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\nexport { useProjectionId };\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    useEffect(() => {\n        visualElement && visualElement.updateFeatures();\n    });\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    const useAnimateChangesEffect = window.HandoffAppearAnimations\n        ? useIsomorphicLayoutEffect\n        : useEffect;\n    useAnimateChangesEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\n\nexport { isCSSVariableName, isCSSVariableToken };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const frameData = {\n    delta: 0,\n    timestamp: 0,\n    isProcessing: false,\n};\n\nexport { frameData };\n","import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? 1000 / 60\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    frameData.isProcessing = true;\n    stepsOrder.forEach(processStep);\n    frameData.isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        requestAnimationFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!frameData.isProcessing)\n        requestAnimationFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { sync } from '../frameloop/index.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            sync.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","const noop = (any) => any;\n\nexport { noop };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { sync } from '../frameloop/index.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                sync.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            sync.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            sync.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            sync.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from './errors.mjs';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = \"${c}\";\nconst numberToken = \"${n}\";\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nfunction analyseComplexValue(v) {\n    if (typeof v === \"number\")\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    let numNumbers = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        // Strip colors from input so they're not picked up by number regex.\n        // There's a better way to combine these regex searches, but its beyond my regex skills\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        numNumbers = numbers.length;\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, numNumbers, tokenised: v };\n}\nfunction parse(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors\n                ? color.transform(v[i])\n                : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { analyseComplexValue, complex };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { invariant } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, \"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","import { mix } from '../mix.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../../easing/cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../../easing/ease.mjs';\nimport { circIn, circInOut, circOut } from '../../easing/circ.mjs';\nimport { backIn, backInOut, backOut } from '../../easing/back.mjs';\nimport { anticipate } from '../../easing/anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { sync, cancelSync } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let time = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        if (holdTime !== null) {\n            time = holdTime;\n        }\n        else {\n            time = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        time = Math.max(time - delay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            time = totalDuration;\n        }\n        let elapsed = time;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = time / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (time > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        const state = frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (calculatedDuration !== null) {\n            done = time >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && time <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(time);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            time = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(time);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = time;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","import { sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    const safeCancel = () => {\n        sync.update(() => animation.cancel());\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        /**\n         * Ensure an initial wildcard keyframe is hydrated by the origin.\n         * TODO: Support extra wildcard keyframes i.e [1, null, 0]\n         */\n        if (target[0] === null) {\n            target[0] = origin;\n        }\n        return target;\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay: delayBy, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delayBy\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: delayBy,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.8.5\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                sync.update(() => onDragStart(event, info));\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            sync.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        sync.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    sync.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n","import { sync } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                /**\n                 * If the parent target isn't up-to-date, force it to update.\n                 * This is an unfortunate de-optimisation as it means any updating relative\n                 * projection will cause all the relative parents to recalculate back\n                 * up the tree.\n                 */\n                if (this.relativeParent.resolvedRelativeTargetAt !==\n                    frameData.timestamp) {\n                    this.relativeParent.resolveTargetDelta(true);\n                }\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    // keyframes: [0, animationTarget],÷\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update(this.props, this.prevProps);\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.8.5\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.8.5 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","var _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgQueenOfSpades2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlSpace: \"preserve\",\n    width: 222.783,\n    height: 323.556,\n    viewBox: \"0 0 167.087 242.667\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0.64885497\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"b\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.4351145\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"c\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.48854962\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"d\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.23664123\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      fillRule: \"nonzero\",\n      clipRule: \"nonzero\",\n      stroke: \"#000\",\n      strokeMiterlimit: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.837 235.548c0 3.777-3.087 6.869-6.871 6.869H7.11c-3.775 0-6.861-3.092-6.861-6.87V7.12C.25 3.343 3.336.25 7.11.25h152.856c3.784 0 6.87 3.093 6.87 6.87v228.428z\",\n    style: {\n      fill: \"#fff\",\n      strokeWidth: 0.5\n    }\n  })), /*#__PURE__*/React.createElement(\"text\", {\n    xmlSpace: \"preserve\",\n    x: 0.435,\n    y: 24.335,\n    style: {\n      fontSize: 30,\n      fontStyle: \"normal\",\n      fontWeight: 400,\n      lineHeight: \"125%\",\n      letterSpacing: 0,\n      wordSpacing: 0,\n      fill: \"#000\",\n      fillOpacity: 1,\n      stroke: \"none\",\n      fontFamily: \"Bitstream Vera Sans\"\n    }\n  }, /*#__PURE__*/React.createElement(\"tspan\", {\n    x: 3,\n    y: 27,\n    style: {\n      fontStyle: \"normal\",\n      fontVariant: \"normal\",\n      fontWeight: 400,\n      fontStretch: \"normal\",\n      fontFamily: \"Arial\",\n      InkscapeFontSpecification: \"Arial\"\n    }\n  }, \"Q\")), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"scale(1.2) translate(2.5, -2)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.989 3.103C7.747-.954.242-8.59 0-10.5-.242-8.591-7.747-.955-7.989 3.103c-.169 2.868 1.695 4.057 3.39 4.057 1.835-.022 3.35-2.8 3.873-3.341.242.716-1.603 6.682-2.179 6.682h5.811c-.576 0-2.421-5.966-2.179-6.682.457.496 1.797 3.258 3.874 3.341 1.694-.001 3.557-1.189 3.388-4.057z\",\n    style: {\n      fill: \"#000\"\n    },\n    transform: \"matrix(1.13877 0 0 1.0412 11.176 37.94)\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"scale(0.9) translate(10, 14)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.989 3.103C7.747-.954.242-8.59 0-10.5-.242-8.591-7.747-.955-7.989 3.103c-.169 2.868 1.695 4.057 3.39 4.057 1.835-.022 3.35-2.8 3.873-3.341.242.716-1.603 6.682-2.179 6.682h5.811c-.576 0-2.421-5.966-2.179-6.682.457.496 1.797 3.258 3.874 3.341 1.694-.001 3.557-1.189 3.388-4.057z\",\n    style: {\n      fill: \"#000\"\n    },\n    transform: \"matrix(2.2448 0 0 2.05244 42.816 46.874)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m139.033 1198.834-.029-44.167-2.646-6.583c-5.415-13.47-16.6-47.008-19.873-59.584-7.482-28.755-13.501-61.164-16.9-91-2.1-18.422-3.923-60.163-3.146-72 .492-7.512.333-10.4-.642-11.608-.713-.884-6.632-5.737-13.153-10.784-8.997-6.965-12.168-8.918-13.152-8.101-.714.592-1.588 4.32-1.943 8.285-.355 3.964-1.077 10.358-1.603 14.208-.95 6.96-2.775 22.07-5.432 45-.765 6.6-2.347 19.875-3.516 29.5-1.17 9.625-2.478 21.143-2.908 25.596-.43 4.453-1.103 8.616-1.495 9.25-1.485 2.402.54 2.927 5.354 1.387 5.922-1.893 11.058-.781 16.142 3.497 7.255 6.105 8.017 18.143 1.592 25.152-2.704 2.95-9.286 6.067-12.874 6.096-1.48.012-2.982.493-3.338 1.069-.356.576 1.868 6.322 4.941 12.769 3.073 6.447 5.588 13.032 5.588 14.635 0 1.602-1.687 5.784-3.75 9.293-12.542 21.337-20.997 34.689-22.575 35.652-2.342 1.429-4.733-1.442-10.083-12.106-2.15-4.284-6.511-12.334-9.693-17.888-3.182-5.555-6.057-11.182-6.389-12.506-.464-1.849 1.263-5.532 7.448-15.887 4.428-7.415 7.921-13.871 7.762-14.348-.159-.477-2.195-1.01-4.524-1.184-2.329-.173-5.682-1.16-7.451-2.194-6.618-3.865-11.094-13.773-9.354-20.704.912-3.635 6.244-9.352 10.97-11.763 3.326-1.697 5.177-1.962 10.345-1.479l6.294.588-.008-3.213c-.01-4.193-1.664-18.754-3.487-30.712-.796-5.225-2.605-19.4-4.02-31.5-2.445-20.916-3.492-29.373-8.977-72.5-1.708-13.426-2.112-19.734-1.474-23 1.65-8.451 1.68-8.397-8.784-16.696-5.362-4.253-10.314-8.28-11.002-8.95-.997-.968-1.201-43.667-1-209.274L.5 423.02l9 4.459C49.345 447.216 61.396 453 62.675 453c1.667 0 15.476-7.802 16.471-9.306.356-.537-1.331-3.405-3.748-6.373-5.592-6.865-8.11-11.832-10.23-20.178-1.44-5.671-2.395-7.31-6.415-11.017-5.486-5.056-6.777-5.067-18.866-.147-6.956 2.83-9.887 3.005-9.887.59 0-.67 1.058-4.335 2.352-8.144 1.294-3.809 2.657-8.966 3.03-11.46.616-4.135.418-4.782-2.247-7.336-6.254-5.991-6.337-18.325-.175-26.078 3.552-4.47 3.33-7.591-1.63-22.908-2.515-7.766-3.21-11.164-2.438-11.935.772-.772 4.144.399 11.844 4.112 5.92 2.855 11.556 5.189 12.523 5.186.968-.003 3.218-1.401 5-3.107 4.64-4.44 8.426-6.13 13.728-6.13 5.345 0 11.858 2.948 14.812 6.703 1.094 1.39 2.88 2.528 3.97 2.528 1.963 0 10.212-3.328 17.512-7.065 4.751-2.432 8.719-2.553 8.719-.266 0 .918-1.332 4.03-2.961 6.916-1.629 2.885-3.9 8.032-5.046 11.436l-2.085 6.189 4.853 5.145c7.944 8.42 9.336 18.367 3.752 26.805-1.462 2.209-3.973 4.764-5.58 5.678-3.6 2.048-3.677 3.779-.691 15.452 1.802 7.046 1.99 8.949.95 9.592-.77.476-4.809-.518-9.922-2.44-4.742-1.785-9.222-3.014-9.955-2.733-1.675.643-2.694 4.522-1.87 7.117 1.117 3.52 6.463 10.095 10.709 13.17 7.435 5.387 8.027 5.165 36.846-13.824 20.859-13.744 52.134-37.274 68.5-51.536 2.75-2.396 9.05-7.876 14-12.177 4.95-4.301 13.275-11.967 18.5-17.036 41.529-40.29 52.315-51.84 69.967-74.923 24.293-31.767 27.176-36.128 24.896-37.656-12.165-8.156-41.88-19.628-64.402-24.865-13.51-3.14-15.49-3.924-16.477-6.522-.65-1.71.16-6.498 2.986-17.652 7.423-29.29 10.028-49.53 10.016-77.805-.012-29.218-2.53-48.947-9.48-74.279C252.578 7.693 251 1.505 251 .971 251 .348 298.258 0 382.912 0c104.98 0 131.866.255 131.69 1.25-.122.688-1.44 3.612-2.929 6.5-1.489 2.888-2.272 5.25-1.74 5.25.531 0 3.053-2.925 5.604-6.5 3.512-4.922 5.224-6.5 7.05-6.5 3.382 0 3.046 1.824-1.62 8.811-4.468 6.692-8.34 10.34-15.29 14.404-4.415 2.582-8.608 8.793-6.498 9.625.475.188 4.13-1.695 8.122-4.183 8.26-5.15 16.786-14.2 21.196-22.504 2.396-4.51 3.559-5.717 5.753-5.97 3.69-.424 3.522.89-1.192 9.317-4.38 7.831-12.193 16.48-19.238 21.299C509.158 33.987 497.019 40 495.243 40 493.94 40 491 43.4 491 44.908c0 2.834 16.065-3.416 25.541-9.936 8.753-6.022 16.499-15.853 23.106-29.325C541.581 1.703 542.997 0 544.34 0c4.403 0-.483 12.456-9.817 25.026-6.534 8.8-8.418 10.474-19.022 16.905-6.752 4.096-15.378 7.522-27.418 10.892-4.35 1.218-3.668 3.177 1.105 3.177 13.203 0 31.865-9.346 45.533-22.804 6.113-6.018 13.775-18.568 16.299-26.696 2.655-8.552 5.928-8.93 8.886-1.025 5.376 14.37 15.043 27.756 28.905 40.027 11.656 10.319 23.707 16.707 25.634 13.588 1.053-1.703-.525-3.758-4.238-5.52-17.159-8.14-35.147-27.502-41.662-44.843C565.474.557 565.442 0 568.025 0c1.543 0 2.815 1.727 5.338 7.25 7.005 15.33 24.604 34.584 35.749 39.113 8.032 3.264 8.136-1.977.138-6.997-11.02-6.917-24.771-22.189-28.918-32.114C577.83 1.266 577.835 0 580.358 0c1.687 0 2.814 1.178 4.543 4.75 5.211 10.763 17.584 24.864 25.335 28.872 6.328 3.272 6.342-3.923.016-7.692-8.14-4.85-18.162-16.589-19.79-23.18C589.885.411 590.095 0 591.87 0c1.476 0 3.42 2.022 6.633 6.9 4.657 7.068 12.095 14.1 14.915 14.1 2.675 0 1.787-4.004-1.517-6.84C607.893 10.72 602 3.099 602 1.356c0-2.606 3.92-1.327 6.568 2.144C612.065 8.085 614 8.06 614 3.43c0-3.13.277-3.53 2.25-3.25 2.173.309 2.277.818 3.036 14.82.432 7.975.56 24.175.284 36l-.5 21.5 3.614 11c1.988 6.05 5.798 17.456 8.467 25.348 7.998 23.653 15.275 51.954 20.223 78.652 5.109 27.571 7.68 55.358 9.209 99.5.352 10.175.927 22.528 1.278 27.45l.639 8.95 14.395 10.8c7.917 5.94 14.956 10.8 15.641 10.8 1.694 0 2.228-2.564 3.994-19.197 2.5-23.544 3.244-30.268 5.952-53.803 1.424-12.375 3.02-27.45 3.548-33.5.528-6.05 1.375-14.6 1.882-19 .508-4.399.802-8.119.655-8.267-.148-.147-2.699.356-5.668 1.12-7.275 1.87-12.981.227-18.08-5.206-6.426-6.847-7.147-14.672-2.06-22.36 3.905-5.9 8.57-8.296 15.991-8.212 3.438.039 6.25-.214 6.25-.561 0-.348-3.141-6.455-6.98-13.573-3.84-7.118-6.99-13.496-7-14.173-.011-.678 1.81-4.223 4.047-7.877 2.236-3.654 5.89-10.075 8.12-14.268 5.733-10.777 12.085-21.507 13.191-22.28 2.49-1.741 4.256.82 20.447 29.652 3.396 6.047 6.171 12.122 6.167 13.5-.005 1.48-3.69 8.022-9 15.979-4.946 7.41-8.992 13.78-8.992 14.155s2.587.46 5.75.19c4.765-.408 6.52-.08 10.25 1.919 7.862 4.212 11.446 12.677 9.083 21.453-2.415 8.969-9.445 13.678-19.636 13.154-3.466-.178-6.574-.052-6.906.28-.333.333.106 5.954.974 12.49 1.39 10.46 4.805 37.011 9.953 77.385.877 6.875 2.542 19.7 3.7 28.5 2.174 16.513 2.971 40.962 1.49 45.686-.89 2.839-.835 2.89 19.568 17.623l3.727 2.691.023 207.25c.015 126.573-.337 207.25-.903 207.25-.51 0-14.055-6.5-30.1-14.446l-29.175-14.445-4.863 1.917c-6.867 2.706-16.01 8.008-16.64 9.647-.303.79 1.625 3.664 4.485 6.688 5.087 5.378 8.59 11.325 12.079 20.509 1.06 2.79 3.402 6.935 5.206 9.212 3.144 3.97 3.47 4.121 7.92 3.694 2.552-.246 7.89-1.945 11.863-3.776 9.094-4.191 10.164-3.516 7.384 4.66-1.092 3.212-2.567 8.168-3.278 11.012l-1.292 5.172 3.213 2.704c9.631 8.105 10.4 22.12 1.663 30.309l-4.305 4.035 1.804 5.47c.993 3.008 3.473 9.59 5.512 14.626 2.41 5.954 3.366 9.497 2.731 10.132-.635.634-5.274-1.14-13.265-5.072-6.758-3.326-13.014-6.042-13.902-6.036-.887.007-2.652 1.616-3.921 3.575-4.105 6.335-14.183 9.164-21.474 6.03-1.77-.762-4.997-3.237-7.171-5.5-4.937-5.142-7.002-5.21-19.047-.625-7.188 2.737-9.252 3.176-10.251 2.18-1-.996-.834-2.038.836-5.209 2.26-4.292 6.939-17.142 6.877-18.888-.02-.591-1.85-2.33-4.065-3.862-10.448-7.23-10.374-23.953.138-31.237 4.961-3.438 5.11-5.951 1.062-17.856-3.886-11.424-3.04-12.24 7.498-7.235 8.921 4.236 11.066 4.452 12.52 1.26 3.007-6.598-13.922-22.425-21.438-20.043-10.66 3.377-70.565 47.383-104.177 76.528-19.917 17.27-59.329 58.459-83.032 86.775-17.77 21.228-35.999 46.427-34.887 48.226 1.293 2.092 26.728 13.504 39.419 17.686 13.886 4.576 17.84 5.624 29.5 7.816 9.23 1.735 12.246 2.991 13.017 5.422.303.953-.845 6.764-2.552 12.911-14.886 53.634-13.262 115.233 4.583 173.784l.685 2.25H379.648c-121.966 0-133.532-.139-132.972-1.598.337-.879 2.797-5.491 5.466-10.25 2.67-4.759 4.854-8.99 4.856-9.402.012-3.925-10.975 6.893-14.867 14.64-2.926 5.821-3.662 6.61-6.17 6.61-3.609 0-3.391-1.485 1.61-11.004 4.717-8.975 9.865-14.082 18.246-18.096 7.506-3.596 10.183-5.582 10.183-7.555 0-4.228-16.066 3.462-23.586 11.29-5.178 5.388-12.414 17.804-12.414 21.3 0 2.456-2.035 4.065-5.143 4.065-3.18 0-3.172-.657.127-9 7.114-17.996 23.344-32.256 41.407-36.383 4.633-1.058 7.855-3.704 6.347-5.212-1.295-1.296-11.759 1.528-21.507 5.804-8.377 3.675-10.778 5.313-17.256 11.78-7.755 7.74-11.301 13.634-14.45 24.011-2.316 7.637-2.862 8.456-5.876 8.816-3.074.368-3.215-.414-1.237-6.816 6.866-22.216 23.707-40.552 43.461-47.322 3.095-1.06 9.148-2.295 13.452-2.743 7.608-.792 11.223-2.24 10.105-4.048-.818-1.324-10.173-1.005-16.43.56-13.192 3.301-21.693 7.63-31.596 16.09-11.01 9.407-22.814 28.682-24.072 39.309-.542 4.578-.875 5.154-2.971 5.154-1.299 0-2.391-.337-2.428-.75-1.12-12.434-4.952-20.45-16.799-35.14-11.501-14.26-19.85-21.683-28.877-25.675-7.078-3.13-9.257-3.15-9.257-.087 0 1.923 1.34 3.01 7.41 6.01 12.115 5.987 27.51 21.629 34.095 34.642 3.491 6.9 7.322 18.096 6.756 19.75-.235.687-1.479 1.25-2.764 1.25-1.932 0-2.635-.908-4.063-5.25-4.801-14.592-14.674-28.538-26.506-37.439-9.655-7.263-13.724-9.26-14.922-7.32-1.309 2.117-.261 3.25 8.479 9.175 9.85 6.676 17.686 15.803 23.302 27.136 4.988 10.067 5.437 13.698 1.692 13.698-1.811 0-2.84-.775-3.65-2.75-6.016-14.671-11.608-23.154-19.457-29.515-5.127-4.155-8.945-5.562-10.6-3.907-.775.775-.136 1.873 2.257 3.877 10.647 8.915 14.174 12.949 17.991 20.575 4.897 9.785 5.062 11.72.999 11.72-2.429 0-3.1-.51-3.627-2.75-2.601-11.064-16.11-25.605-18.136-19.521-.225.676 1.82 3.601 4.542 6.5 4.58 4.876 9.202 12.275 9.202 14.731 0 .572-1.282 1.04-2.848 1.04-2.363 0-3.16-.692-4.68-4.06-1.586-3.52-3.993-5.94-5.906-5.94-.311 0-.566 1.538-.566 3.418 0 5.162-.88 6.582-4.076 6.582h-2.863l-.028-44.166zm70.147 16.916c5.48-10.466 20.098-25.606 29.482-30.536 13.33-7.003 28.122-11.102 40.347-11.18 6.06-.037 5.788.198 10.963-9.497 1.479-2.77 4.558-8.273 6.842-12.228 2.284-3.954 4.998-8.68 6.03-10.5 1.031-1.82 2.899-5.109 4.15-7.309 1.252-2.2 4.173-7.375 6.493-11.5 2.32-4.125 8.2-14.475 13.067-23 4.867-8.525 9.914-17.584 11.216-20.132l2.368-4.632-2.7-7.868c-8.358-24.345-23.955-46.614-44.973-64.21-26.446-22.141-57.493-34.376-83.66-32.968-16.14.869-26.513 8.42-36.384 26.486-13.763 25.19-20.99 46.65-23.853 70.824-1.775 14.996-3.166 43.5-2.24 45.914.558 1.453 1.233 1.334 5.901-1.04 4.493-2.287 6.6-2.697 14.271-2.778 4.95-.053 11.365.284 14.255.748 6.327 1.017 6.396-.358.25-4.938-4.81-3.584-6.857-6.954-5.219-8.592.86-.86 2.447-.234 6.38 2.52 3.345 2.34 5.583 3.317 6.196 2.704.946-.946-1.24-13.056-5.465-30.262-2.09-8.507-2.421-14.928-.917-17.738.538-1.007 4.08-3.873 7.869-6.37 3.79-2.496 7.784-5.766 8.876-7.266 2.8-3.843 5.369-2.752 4.333 1.84-1.064 4.72-3.163 7.604-9.535 13.105-6.722 5.803-6.882 7.24-2.538 22.798 5.831 20.883 7.644 42.18 4.589 53.91-3.178 12.2-5.688 17.306-11.13 22.646-7.053 6.92-13.036 8.813-27.694 8.76l-10.75-.04v3.121c0 3.32.29 3.55 9.17 7.302 5.613 2.372 15.6 8.996 21.984 14.583 5.648 4.944 10.866 11.5 18.93 23.787 6.092 9.284 7.89 11.786 8.468 11.786.17 0 2.252-3.712 4.628-8.25zm30.514-47.83c-8.832-.945-14.841-3.537-21.222-9.154-4.346-3.825-6.37-8.268-4.581-10.057.669-.669 2.746-.251 6.251 1.257 10.135 4.36 14.905 5.266 27.858 5.293 9.908.021 14.933-.517 24.23-2.595 6.453-1.442 13.404-3.32 15.448-4.174 4.496-1.878 6.322-1.346 6.322 1.843 0 4.404-12.356 10.954-28.5 15.106-11.83 3.043-16.42 3.485-25.806 2.48zm-.182-21.85c-6.037-3.124-8.305-3.816-11.053-3.37-3.201.52-3.459.368-3.459-2.034 0-1.459 1.315-4.094 3-6.013 3.472-3.954 3.785-6.162 1.08-7.61-1.056-.565-2.467-2.687-3.137-4.715-1.096-3.32-1.016-3.85.8-5.32 1.108-.899 2.32-3.015 2.69-4.703.371-1.689 2.17-4.81 3.996-6.938 4.298-5.002 20.124-15.753 22.084-15 3.1 1.19 2.119 2.499-8.286 11.05-4.55 3.74-8.764 7.718-9.364 8.838-.99 1.85-.872 1.966 1.274 1.26 1.3-.428 6.413-.977 11.363-1.22 8.431-.414 9.786-.185 21.446 3.631 12.674 4.149 17.435 4.75 24.554 3.099 3.063-.71 4.527-.582 6.25.547 4.406 2.887 3.674 3.914-12.75 17.906-11.167 9.513-23.577 14.488-36.196 14.51-5.85.01-7.656-.485-14.292-3.918zm22.977-3.067c7.702-1.97 18.996-7.473 21.48-10.467 1.845-2.222-.121-2.033-11.706 1.125-7.21 1.965-12.64 2.733-20.763 2.938-6.05.153-11.337.305-11.75.34-.412.033-.75.639-.75 1.345 0 2.32 8.36 6.245 14.09 6.614.875.056 5.104-.797 9.399-1.895zm9.351-20.356c1.096-.852 1.016-1.28-.44-2.344-2.675-1.956-6.4-1.667-6.4.497 0 3.802 3.211 4.67 6.84 1.847zm-33.84-1.706c0-2.086-1.471-2.606-2.53-.893-.907 1.468.302 4.211 1.523 3.456.554-.342 1.007-1.495 1.007-2.563zm-8-51.07c0-.62 1.564-2.86 3.475-4.975 6.254-6.922 5.943-13.661-.707-15.313-3.33-.827-4.22-.567-9.076 2.658-2.962 1.967-7.498 4.293-10.082 5.17-4.223 1.434-4.995 1.441-7.64.074-3.554-1.838-4.625-5.346-2.796-9.16 1.178-2.457 1.937-2.834 5.84-2.897 2.592-.042 6.356-1.039 8.914-2.36 5.359-2.771 14.544-3.714 18.042-1.852 2.771 1.474 6.786 6.963 7.67 10.488 1.278 5.092-.617 11.274-4.712 15.369-3.794 3.794-8.928 5.403-8.928 2.799zm-48.094-50.591c-2.476-5.776-2.163-7.867 1.125-7.518 6.38.678 8.246.387 13.961-2.178 6.782-3.043 10.979-3.135 26.508-.577 7.582 1.25 8.255 1.206 12.877-.844 2.683-1.19 5.771-2.163 6.864-2.163 2.183 0 2.163.452-.489 10.937-1.534 6.066-2.658 6.942-5.949 4.638-2.887-2.022-6.144-1.992-11.641.107-3.728 1.424-5.388 1.514-10.804.587-3.712-.636-7.755-.753-9.628-.28-1.777.45-7.192 1.066-12.035 1.37l-8.804.551-1.985-4.63zm38.594-13.348c-3.918-2.51-14.812-2.614-21.59-.206-3.998 1.42-5.085 1.493-6.134.417-1.04-1.066-.667-1.82 2.016-4.083l3.291-2.775-2.541-1.666c-2.534-1.66-3.32-4.02-1.677-5.036.476-.294 3.365-.01 6.42.631 5.373 1.127 8.921.833 22.965-1.905 4.143-.808 3.798 3.098-.47 5.305l-3.22 1.664 2.256 1.611c5.972 4.267 6.5 4.846 5.882 6.455-.823 2.144-3.441 1.994-7.198-.412zm-50.004 146.148c1.577-.615 1.052-.92-2.5-1.455-2.473-.371-8.091-2.239-12.486-4.15-4.394-1.911-8.332-3.475-8.75-3.475-.418 0-.76 1.313-.76 2.917 0 2.945.8 3.46 10 6.44 2.378.77 12.3.58 14.496-.277zm7.965-9.518c4.64-1.396 9.539-4.924 9.539-6.868 0-.587-1.642-.643-4.25-.143-5.619 1.077-25.232 1.164-30.105.134-5.872-1.241-4.287 1.19 3.3 5.065 7.235 3.694 13.506 4.222 21.516 1.812zm-26.846-18.327c1.605-1.057 2.639-4.96 1.5-5.663-.53-.329-2.124-.07-3.54.576-2.69 1.225-3.48 4.32-1.325 5.19 1.797.725 2.123.715 3.365-.103zm14.806-7.816c3.651-1.59.973-1.9-3.086-.356-3.215 1.222-4.311 2.612-4.288 5.437.014 1.734.3 1.618 2.156-.87 1.176-1.579 3.524-3.474 5.218-4.211zm9.94 5.081c-.316-.825-.752-1.5-.968-1.5-.216 0-.393.675-.393 1.5s.436 1.5.969 1.5c.532 0 .71-.675.393-1.5zm10.198.019c1.68-1.282 1.74-1.616.441-2.485-3.348-2.24-6.527-.887-4.93 2.097 1.208 2.256 1.955 2.321 4.489.388zM175 1118.535c0-.256-1.012-.955-2.25-1.555-2.16-1.047-2.173-1.029-.309.465 2.04 1.634 2.559 1.855 2.559 1.09zm169.623-56.087c-1.034-8.795-12.199-65.952-13.2-67.571-.621-1.006-5.179-1.646-6.39-.897-.772.476-.359 4.513 1.39 13.599 1.368 7.107 3.156 16.838 3.974 21.626 1.638 9.591 12.346 38.795 14.225 38.795.36 0 .36-2.498 0-5.551zm8.388-9.698c2.522-4.136 2.508-4.53-.652-19.086-7.948-36.606-7.759-35.91-9.948-36.714-3.83-1.405-4.432.064-2.905 7.079 2.815 12.922 9.494 48.113 9.494 50.017 0 2.933 1.784 2.357 4.011-1.296zm9.743-17c2.82-5.322 2.791-8.523-.195-22.202-1.586-7.266-2.988-11.389-4.166-12.25-1.935-1.415-6.013-1.748-6.712-.548-.848 1.454 7.08 39.25 8.233 39.25.324 0 1.602-1.913 2.84-4.25zm-39.344-17c-2.32-12.383-5.61-25.196-6.786-26.421-.618-.645-2.024-1.32-3.124-1.5-1.717-.283-1.965.166-1.755 3.171.306 4.383 4.188 20.819 5.55 23.5 1.555 3.06 5.848 8.5 6.708 8.5.42 0 .154-3.263-.593-7.25zm51.527-4.238c1.89-3.56 3.172-6.736 2.849-7.06-.324-.324-2.679-1.217-5.232-1.986-5.828-1.754-6.326-.893-4.53 7.834 2.028 9.866 2.292 9.913 6.913 1.212zm-68.572-14.76c-2.073-8.885-3.53-10.752-8.388-10.752-3.797 0-3.977.143-3.977 3.16 0 2.525 1.193 4.353 5.938 9.098 3.265 3.265 6.375 5.667 6.91 5.336.613-.38.435-2.908-.483-6.843zM287 989.5c0-.825-.73-1.5-1.622-1.5-1.33 0-1.398.271-.378 1.5.685.825 1.415 1.5 1.622 1.5.208 0 .378-.675.378-1.5zm214.616-72.413c8.139-3.696 13.338-14.399 11.397-23.46-2.142-9.995-7.586-14.386-16.577-13.373-8.92 1.006-10.328 6.746-1.654 6.746 3.997 0 5.29.48 7.402 2.75 3.414 3.67 4.183 7.436 2.394 11.718-2.625 6.281-8.01 10.08-12.897 9.096-1.2-.241-3.43-.703-4.956-1.027-4.469-.947-10.592-7.288-13.738-14.226-3.561-7.855-8.344-26.426-10.381-40.311-2.827-19.265-7.026-32.389-15.228-47.589-4.751-8.806-5.663-9.81-12.39-13.645-10.516-5.994-25.92-7.733-39.269-4.435-12.221 3.02-21.396 4.169-33.219 4.16-11.14-.01-12.416-.214-17.794-2.846-14.885-7.284-21.9-23.35-15.746-36.061 1.234-2.551 3.661-5.71 5.392-7.019 3.877-2.932 10.882-4.892 14.58-4.08 2.866.63 7.985 5.371 9.965 9.231 1.598 3.115.3 9.896-2.54 13.271-2.739 3.255-2.947 4.573-.848 5.378 2.792 1.072 6.39-1.246 8.571-5.522 1.779-3.487 2.07-5.376 1.647-10.66-.565-7.035-2.032-9.686-8.057-14.562-2.946-2.385-4.913-3.083-9.651-3.426-8.382-.606-12.296.37-17.544 4.376-2.513 1.918-4.934 3.263-5.38 2.988-.937-.58-2.475-7.894-4.636-22.059-1.924-12.61-5.78-21.174-12.76-28.33-8.13-8.333-11.34-9.67-23.199-9.665-9.176.004-11.004.354-22.186 4.25-6.703 2.335-13.813 4.245-15.8 4.245-7.098 0-13.978-5.797-15.083-12.707-.606-3.79-.372-4.506 2.371-7.25 3.978-3.977 6.687-3.853 10.664.49 2.828 3.087 3.395 3.339 4.506 2 3.046-3.67-3.414-10.533-9.913-10.533-4.078 0-10.957 4.265-12.657 7.848-2.658 5.602-1.398 13.23 3.09 18.708 5.575 6.802 13.807 8.675 25.758 5.859 2.319-.547 2.75-.326 2.75 1.41 0 1.131-.512 2.374-1.138 2.76-.788.487-.965 3.612-.575 10.147.686 11.5 2.785 15.356 10.7 19.664 4.774 2.599 5.885 2.812 11.786 2.26 7.516-.701 9.45-2.053 11.823-8.267 1.372-3.593 1.439-4.642.378-5.92-1.13-1.362-1.805-.97-5.434 3.155-3.839 4.362-4.493 4.71-8.864 4.71-3.846 0-5.285-.54-7.783-2.917-4.533-4.314-5.279-6.262-5.077-13.257.148-5.132.707-7.076 2.934-10.208 4.187-5.89 10.578-8.952 18.685-8.952 7.643 0 10.537 1.228 15.709 6.668 8.874 9.333 12.65 22.351 16.922 58.332 2.295 19.328 5.049 26.268 13.363 33.679 6.082 5.42 13.673 8.421 26.146 10.335 6.629 1.017 8.538.919 23.925-1.234 2.518-.353 2.411 1.594-.537 9.72-5.091 14.035 1.29 29.56 14.992 36.477 3.095 1.563 10.753 4.31 17.018 6.104 13.738 3.935 18.572 6.507 24.382 12.97 5.213 5.797 6.395 9.273 4.185 12.311-.854 1.176-2.236 3.087-3.07 4.247-2.321 3.23-.908 5.391 3.526 5.391 5.394 0 8.086-2.55 8.731-8.272 1.092-9.688-7.313-20.291-23.07-29.103-3.661-2.048-6.657-4.365-6.657-5.15 0-.786 1.089-2.142 2.419-3.014 2.806-1.839 6.581-9.285 6.581-12.982 0-4.327-2.734-9.68-4.731-9.265-1.18.245-1.683 1.141-1.51 2.69.141 1.277-.208 4.05-.777 6.163-4.053 15.05-24.38 17.338-33.114 3.727-3.73-5.814-4.834-13.338-2.84-19.376 1.783-5.406 9.067-12.781 15.258-15.452 9.567-4.126 22.928-2.756 30.308 3.109 11.282 8.966 17.7 25.612 23.405 60.714 4.062 24.987 6.296 33.313 11.194 41.711 4.834 8.29 7.26 11.138 11.307 13.274 6.564 3.465 17.064 4.061 23.116 1.313zm-400.954-34.353c11.573-11.85 13.29-14.068 16.083-20.777 1.72-4.13 3.424-9.75 3.787-12.486.88-6.631-1.536-20.186-6.053-33.97-3.384-10.327-3.541-11.367-2.565-17 1.368-7.899 5.001-11.501 11.602-11.501 5.44 0 5.87-1.656 1.407-5.411-3.436-2.891-3.961-2.961-8.923-1.182-2.996 1.075-3.872 2.179-6.085 7.674-3.142 7.804-5.047 8.545-7.326 2.85-8.494-21.228-4.689-43.549 8.611-50.516 8.628-4.52 19.678.986 21.305 10.614.783 4.633 3.151 5.344 4.069 1.221a127.2 127.2 0 0 1 1.089-4.508c.717-2.644-4.106-12.331-7.126-14.31-4.207-2.756-11.127-2.938-18.404-.481-3.501 1.182-6.61 1.906-6.906 1.61-.297-.298-.629-4.258-.737-8.8-.319-13.333-5.044-20.627-12.463-19.24-6.781 1.266-7.72 4.002-2.01 5.862 4.129 1.346 7.947 7.4 7.956 12.617.003 1.925-1.6 9.125-3.565 16-4.016 14.06-5.242 26.229-3.553 35.247 1.096 5.854 2.609 9.882 12.678 33.753 3.131 7.425 5.92 14.513 6.197 15.75.63 2.82-1.068 2.916-4.457.25-3.209-2.524-12.71-2.784-16.056-.44-4.177 2.926-6.313 9.159-4.254 12.414.756 1.195 1.667.676 4.83-2.75C93.13 831.61 94.273 831 97.7 831c4.745 0 9.732 3.032 13.027 7.922 3.39 5.029 3.161 13.7-.568 21.578-2.971 6.278-12.042 17.057-22.432 26.658-5.308 4.905-5.948 5.87-4.802 7.25.726.876 2.1 1.592 3.05 1.592.952 0 7.561-5.97 14.688-13.266zM489 868c1.1-1.1 2-2.9 2-4 0-2.646-3.45-6-6.171-6-5.034 0-7.638 6.344-4.174 10.171 2.172 2.4 5.85 2.325 8.345-.171zm14.356-45.632c3.459-2.896 11.172-9.672 25.59-22.478a7151.787 7151.787 0 0 1 22.614-19.965c7.243-6.367 15.817-14.18 19.054-17.362 3.237-3.182 6.898-6.463 8.136-7.29 3.08-2.058 2.823-4.36-.876-7.836-4.576-4.3-6.826-9.906-6.852-17.073-.012-3.455-.675-7.387-1.516-9-3.071-5.889-1.187-13.93 4.358-18.596 2.103-1.77 3.136-3.537 3.136-5.366 0-4.639 4.335-10.715 9.476-13.283 2.908-1.452 5.025-3.315 5.649-4.97 1.32-3.502 6.31-8.588 11.875-12.103 7.036-4.443 13.07-5.24 33.748-4.459l18.248.69 5.252-4.888c3.415-3.179 5.427-5.938 5.752-7.889.426-2.556.944-3 3.5-3 2.833 0 3 .222 3 4 0 6.298 2.864 5.94 19.744-2.472C716.663 637.36 738 625.605 738 624.373c0-.635-4.807-3.96-10.683-7.387-25.75-15.021-49.19-31.348-80.317-55.946-4.125-3.26-8.4-5.949-9.5-5.976-1.245-.032-2.912 1.362-4.416 3.693-8.048 12.467-11.456 17.285-28.109 39.743-17.895 24.133-32.005 40.486-53.975 62.556-17.059 17.136-28.863 27.635-36.533 32.493-20.869 13.217-34.754 30.658-39.697 49.86-3.214 12.483-2.9 32.94.693 45.091 2.59 8.76 7.272 18.396 12.393 25.5 4.005 5.556 9.425 11 10.953 11 .771 0 2.817-1.185 4.547-2.632zm-6.643-11.989c-.392-.392-.713-1.755-.713-3.03 0-2.3-.025-2.305-3.51-.643-4.813 2.295-6.314.833-4.834-4.711 1.053-3.947 1.033-3.995-1.672-3.995-5.137 0-6.467-5.6-1.91-8.04 1.563-.836 2.432-.545 4.478 1.501 1.396 1.397 2.688 2.539 2.87 2.539.672 0 4.672-10.157 7.684-19.512 1.772-5.506 3.76-9.883 4.642-10.221 1.869-.718 4.252 2.254 4.252 5.302 0 3.341 2.046 4.52 5.003 2.884 3.142-1.739 6.688-1.838 7.294-.203.255.687.235 3.345-.045 5.906l-.508 4.655 4.878 1.378c3.706 1.047 4.878 1.848 4.878 3.335 0 1.562-1.612 2.481-8 4.56-8.282 2.693-19.91 8.151-20.948 9.832-.327.529.127 1.365 1.01 1.858 1.044.585 1.487 1.913 1.27 3.812-.258 2.267-.896 2.98-2.87 3.21-1.395.163-2.858-.025-3.25-.417zm39.369-34.78c-1.771-2.134-.395-5.482 2.558-6.223 3.2-.804 4.603.62 4.188 4.252-.256 2.239-.898 2.938-2.914 3.173-1.422.165-3.146-.376-3.832-1.202zm-8.965-5.958c-.845-1.018-.756-2.412.354-5.56 1.425-4.036 1.407-4.177-.456-3.586-4.812 1.527-8.455-5.119-4.087-7.456 2.6-1.392 4.961-.328 5.687 2.564.33 1.31.938 2.173 1.352 1.917 1.081-.668 6.748-12.512 11.015-23.02 4.14-10.197 6.265-11.51 9.18-5.67 2.3 4.604 2.156 4.558 6.838 2.17 2.307-1.177 4.825-1.897 5.597-1.601 1.802.691 1.786 4.265-.043 9.45-1.62 4.587-1.605 4.608 3.928 5.608 9.781 1.77 10.31 5.315 1.268 8.502-11.725 4.133-23.24 9.225-30.838 13.636-4.173 2.423-7.83 4.405-8.127 4.405-.297 0-1.048-.612-1.668-1.359zm-15.766-27.638c-.6-3-.786-3.105-4.414-2.492-3.075.52-3.973.29-4.781-1.22-1.158-2.164-.323-4.336 10.844-28.215 8.15-17.429 9.434-18.694 13.01-12.826 1.09 1.787 2.134 3.7 2.32 4.25.189.561 2.551-.04 5.4-1.374 2.785-1.304 5.56-2.065 6.167-1.69 1.508.932 1.384 4.517-.325 9.359-1.6 4.538-1.04 5.205 4.387 5.205 1.538 0 3.338.653 4.001 1.452 2.453 2.955.642 4.793-8.46 8.583-8.84 3.681-21.768 10.188-24.272 12.216-.996.807-.822 1.345.807 2.486 3.14 2.2 2.323 6.664-1.296 7.08-2.392.276-2.846-.102-3.388-2.814zm-14.336-13.484c-1.022-1.232-1.055-2.135-.152-4.117 1.33-2.92 4.744-3 6.53-.152 2.326 3.71-3.567 7.655-6.378 4.269zm76.327-43.12c-2.008-3.064-.918-5.71 2.565-6.226 4.449-.66 6.732 4.045 3.522 7.256-2.261 2.26-4.14 1.942-6.087-1.03zm-8.302-5.851c-1.446-1.742-.872-3.837 3.437-12.548 2.661-5.38 9.79-23.482 11.912-30.25 1.056-3.369 3.733-1.867 5.926 3.323 1.944 4.6 2.378 5.011 4.664 4.415 1.387-.362 3.871-.732 5.521-.823 2.85-.157 2.984.01 2.672 3.335-.84 8.965-1.025 8.476 3.328 8.767 7.124.474 8.659 1.107 8.315 3.426-.231 1.56-2.042 2.84-6.815 4.819-17.887 7.418-26.862 11.592-30.447 14.16-4.405 3.156-6.725 3.53-8.513 1.376zm-7.617-10.998c-1.227-4.888 4.326-7.517 6.97-3.3 1.506 2.403-.331 5.159-3.709 5.563-2.098.251-2.742-.196-3.26-2.263zm98.608-20.012c-.985-1.187-.08-3.777 4.806-13.75 3.311-6.758 7.681-17.35 9.711-23.538 3.01-9.176 4.047-11.25 5.623-11.25 2.046 0 4.829 5.185 4.829 9 0 2.868 2.251 3.438 5.976 1.512 1.736-.897 4.364-1.493 5.84-1.322 2.826.326 3.128 1.835 2.06 10.273-.361 2.846-.188 2.99 4.432 3.675 5.665.84 8.222 2.519 6.674 4.383-.573.691-5.641 3.126-11.262 5.41-5.621 2.285-12.47 5.307-15.22 6.716-23.066 11.818-21.524 11.234-23.469 8.89zm-4.985-9.983c-.66-.795-1.052-2.482-.873-3.75.259-1.822.956-2.305 3.327-2.305 2.42 0 3.067.472 3.345 2.444.212 1.502-.343 2.947-1.441 3.75-2.27 1.66-2.882 1.64-4.358-.139zm-21.552-17.204c-.915-.915-1.422-2.518-1.14-3.599.425-1.624.146-1.834-1.672-1.257-5.402 1.714-7.658 1.73-8.298.063-.372-.969 1.3-6.235 3.992-12.58 2.547-6.003 5.793-15.092 7.212-20.196 3.944-14.186 3.973-14.262 5.647-14.586 1.053-.205 2.432 1.52 4.196 5.25 1.445 3.054 3.177 5.544 3.848 5.532.672-.012 2.346-.903 3.721-1.978 3.31-2.59 6.686-2.564 7.518.058.36 1.132.348 4.282-.026 7l-.68 4.942 3.344.056c5.465.093 10.344 2.172 10.344 4.408 0 1.548-2.118 2.832-10 6.062-10.05 4.118-18.99 8.443-23.34 11.29l-2.342 1.533 2.591 1.357c1.627.853 2.591 2.201 2.591 3.626 0 4.422-4.353 6.172-7.506 3.019zm-17.11-14.793c-1.584-4.126 2.39-8.213 5.227-5.376 2.48 2.48 1.104 6.818-2.161 6.818-1.382 0-2.762-.649-3.066-1.442zM367.95 820.56c.657-.791 1.05-2.704.872-4.25-.273-2.386-.834-2.859-3.717-3.134-2.042-.195-3.73.203-4.235 1-3.01 4.749 3.537 10.653 7.08 6.384zm18.366-44.71c2.841-1.495 3.546-2.66 2.962-4.896-.73-2.793-3.86-5.152-6.345-4.784-1.228.181-3.134 1.542-4.235 3.023-1.898 2.55-1.915 2.827-.327 5.25 1.808 2.76 4.478 3.232 7.945 1.407zM298.05 754.95c3.232-3.232 1.114-7.898-3.601-7.934-2.778-.02-4.45 1.853-4.45 4.985 0 5.016 4.38 6.62 8.051 2.949zm341.025-.508c8.81-2.861 16.87-14.658 23.53-34.441 2.878-8.548 2.662-29.115-.405-38.64-2.406-7.472-4.048-9.626-8.201-10.761-1.375-.376-10.6-.916-20.5-1.2l-18-.517-7.25 3.52c-6.796 3.3-8.758 5.548-6.214 7.12 1.16.717 8.737 1.979 23.158 3.857 8.184 1.065 10.01 1.64 11.717 3.691 1.112 1.337 2.037 3.217 2.056 4.18.045 2.38-4.867 2.318-13.112-.162-18.452-5.552-32.453-5.382-38.921.472-3.125 2.828-2.445 5.22 1.816 6.388 4.089 1.122 22.259 3.22 31.623 3.652 5.257.242 6.17.618 8.71 3.585 1.56 1.823 2.854 4.15 2.876 5.17.05 2.246-2.795 2.03-16.459-1.256-12.39-2.979-30.727-3.89-35.756-1.775-5.703 2.397-7.388 9.19-2.88 11.603.951.51 4.66.909 8.242.888 3.582-.02 8.96.652 11.953 1.494 2.993.842 9.778 2.497 15.08 3.677 7.045 1.57 10.24 2.788 11.876 4.53 2.584 2.75 2.052 5.484-1.067 5.484-2.38 0-15.212-3.136-24.803-6.061-8.566-2.613-16.084-2.562-19.51.134-1.45 1.14-2.635 2.732-2.635 3.54 0 2.74 3.868 9.064 7.49 12.243 5.708 5.013 17.262 10.477 23.51 11.12 9.047.929 27.158.063 32.076-1.535zM132.76 671.094c31.41-47.531 77.006-99.012 112.74-127.292 9.35-7.4 19.333-16.012 22.185-19.137 7.511-8.234 14.15-19.463 18.036-30.509 3.366-9.565 3.394-9.788 2.961-23.656-.5-16.07-3.34-28.065-9.407-39.728-4.143-7.965-14.561-19.772-17.446-19.772-1.146 0-9.661 6.704-20.007 15.75a14603.956 14603.956 0 0 1-50.687 44.145c-7.224 6.268-13.135 11.96-13.135 12.651 0 .691 1.548 2.17 3.44 3.286s4.7 3.933 6.239 6.259c2.557 3.864 2.823 5.141 3.08 14.819.155 5.824.385 12.898.511 15.72.218 4.866-.013 5.39-4.52 10.207-2.612 2.792-4.75 5.975-4.75 7.073 0 4.928-3.146 8.14-13.347 13.622-1.016.547-2.445 2.732-3.176 4.856-.73 2.124-2.793 5.374-4.584 7.222-1.79 1.848-3.023 3.593-2.739 3.878 1.341 1.34 21.78-7.634 31.821-13.973 2.192-1.383 4.396-2.515 4.898-2.515 1.48 0 2.197 3.001 1.174 4.912-1.087 2.032-13.356 34.081-14.771 38.588-1.415 4.505-4.447 4.003-6.045-1-.702-2.2-1.472-4.548-1.71-5.217-.33-.93-1.263-.871-3.945.25-6.553 2.738-7.576 2.198-7.576-3.998 0-6.07-1.334-7.535-6.863-7.535-3.238 0-6.137-2.213-6.137-4.685 0-1.245-.82-1.423-4.25-.923-2.337.34-11.842.201-21.122-.308-9.28-.51-17.38-.715-18-.455-.62.26-2.028 1.898-3.128 3.64-1.353 2.142-3.294 3.528-6 4.283-3.214.897-4.061 1.63-4.312 3.734-.362 3.04-3.546 4.492-5.78 2.637-1.012-.84-1.295-2.162-.873-4.082.527-2.4.306-2.841-1.427-2.841-2.812 0-11.212 3.822-25 11.374A1586.15 1586.15 0 0 1 36.5 604.48c-11.466 5.991-13.5 7.273-13.5 8.503 0 .406 2.813 2.236 6.25 4.068 21.932 11.682 62.29 38.745 83.165 55.767 10.348 8.438 11.759 9.283 13.329 7.98.735-.61 3.892-4.977 7.016-9.704zm-11.203-5.317c-.856-1.222-1.557-2.543-1.557-2.934 0-.392-.434-1.854-.964-3.249l-.964-2.535-5.084 2.637c-4.632 2.403-5.224 2.497-6.662 1.058-1.262-1.262-1.413-2.55-.752-6.416.455-2.661.85-5.275.877-5.81.027-.533-2.651-1.433-5.951-2-5.117-.877-6.048-1.364-6.324-3.312-.286-2.016 1.006-2.918 11-7.674 6.228-2.964 16.684-8.349 23.236-11.966 6.552-3.617 12.514-6.576 13.25-6.576 2.188 0 1.544 4.641-1.495 10.779-3.786 7.644-6.418 14.615-10.277 27.221-4.207 13.74-5.283 15.132-8.333 10.777zm21.014-30.348c-1.913-1.914-1.985-3.481-.265-5.833 2.057-2.813 6.12-1.745 6.516 1.714.563 4.91-3.067 7.302-6.25 4.119zm-59.706-6.179c-.601-1.512-1.502-3.807-2.002-5.098-.677-1.747-1.352-2.15-2.636-1.573-.95.427-3.302.808-5.227.848l-3.5.073-.299-5.148c-.294-5.066-.357-5.159-3.981-5.839-2.026-.38-4.479-1.116-5.452-1.637-2.276-1.218-2.288-4.77-.018-5.507 10.342-3.361 26.426-10.557 33.38-14.936 4.748-2.988 9.135-5.433 9.75-5.433 1.92 0 1.264 2.68-3.244 13.26-4.512 10.586-7.21 18.082-10.076 27.99-1.298 4.492-2.093 5.75-3.633 5.75-1.217 0-2.387-1.05-3.062-2.75zm41.335-8.45c-1.89-1.89-1.405-5.543.955-7.196 4.05-2.837 7.313 1.406 5.238 6.814-.715 1.864-4.479 2.096-6.193.382zm-20.629-17.371c-.864-.865-1.571-2.183-1.571-2.929 0-1.693 2.727-4.5 4.371-4.5 1.883 0 3.629 2.165 3.629 4.5 0 4.114-3.602 5.755-6.429 2.929zm93.475-30.874c-2.845-3.427 1.078-9.22 4.704-6.948 2.362 1.48 2.719 4.782.732 6.768-2.01 2.01-3.867 2.07-5.436.18zm-16.391-17.384c-3.42-3.78-.852-8.335 3.713-6.583 2.187.839 3.174 5.054 1.621 6.925-1.645 1.983-3.328 1.875-5.334-.342zm56.054-11.866c-.263-.443-.793-2.707-1.177-5.03l-.7-4.227-5.916.619c-6.494.678-6.33.849-5.957-6.229.157-2.97-.026-3.104-6.149-4.5-5.015-1.143-6.31-1.826-6.31-3.329 0-2.188.137-2.269 11.848-6.946 4.866-1.944 12.372-5.68 16.679-8.303l7.83-4.769-2.995-1.82c-3.335-2.03-3.614-5.282-.612-7.164 2.538-1.59 5.181.405 5.56 4.199l.31 3.104 3.35-1.597c1.841-.878 4.06-1.324 4.928-.99 1.8.69 1.553 1.587-3.316 12.002-1.657 3.544-4.622 10.884-6.59 16.31-6.12 16.886-7.005 18.84-8.679 19.163-.895.172-1.842-.05-2.104-.493zM258.2 512.8c-1.738-1.738-1.487-6.476.382-7.193 5.162-1.98 8.793 1.646 5.966 5.96-1.722 2.628-4.428 3.153-6.348 1.233zm-44.49-2.497c-.261-.442-.805-2.378-1.208-4.303-1.134-5.412-2.173-6.221-5.67-4.413-1.632.844-3.95 1.395-5.15 1.224-1.803-.257-2.11-.832-1.765-3.311 1.139-8.19.895-8.852-3.579-9.749-4.24-.85-6.96-2.937-5.951-4.568.307-.497 4.059-2.146 8.336-3.663 4.277-1.518 13.115-5.434 19.64-8.704 12.296-6.161 15.317-6.663 14.238-2.364-.495 1.972-.088 2.684 2.144 3.749 3.278 1.563 4.192 5.777 1.702 7.843-1.413 1.173-2.08 1.129-4.57-.3l-2.914-1.672-3.416 7.395c-1.878 4.067-4.175 9.788-5.103 12.714-.927 2.925-2.194 6.408-2.815 7.739-1.192 2.555-3.124 3.73-3.92 2.383zm40.075-40.053c-.838-.963-1.967-3.1-2.508-4.75-.727-2.217-1.48-2.888-2.88-2.57-1.044.237-3.247.462-4.897.5-2.83.066-3-.15-3-3.818 0-3.776-.137-3.928-4.75-5.28-3.45-1.011-4.75-1.898-4.75-3.24 0-2.4.655-2.835 12.5-8.274 5.5-2.525 13.564-6.231 17.919-8.236 5.559-2.558 8.234-3.33 8.975-2.588.741.741.702 1.623-.132 2.959-2.118 3.391-8.09 19.498-10.16 27.402-2.757 10.52-3.366 11.282-6.317 7.895zm-35.745-4.702c-1.725-2.079-.875-4.997 1.558-5.346 2.678-.385 4.75 2.127 3.917 4.75-.754 2.376-3.729 2.7-5.475.596zM271.2 446.8c-2.821-2.821-.07-7.528 3.7-6.331 1.1.348 2.283 1.532 2.631 2.63 1.197 3.77-3.51 6.522-6.331 3.701zm-16.16-16.252c-1.889-2.276-.838-5.011 2.054-5.349 3.133-.365 5.305 1.97 4.421 4.753-.766 2.416-4.667 2.775-6.475.596zM523.15 650.905c3.283-1.32 7.455-5.632 6.437-6.651-.415-.415-77.734-.886-171.82-1.048l-171.066-.295-2.851 2.732c-2.845 2.725-3.744 5.892-1.852 6.524.55.183 76.937.214 169.75.069 116.561-.183 169.57-.594 171.402-1.33zm53.475-59.336c1.856-2.146 3.374-4.277 3.374-4.736 0-1.113-12.67-1.174-189.947-.915-83.845.122-153.145.602-154 1.066-2.933 1.593-7.271 6.854-6.578 7.976.51.825 46.155 1.042 172.236.818l171.542-.306 3.373-3.903zM527.67 573.75c1.956-1.337 4.14-4.215 5.379-7.09 1.99-4.62 2.015-5.118.54-10.931C530.78 544.666 523.333 540 508.485 540c-3.933 0-7.434-.282-7.779-.627-.345-.345.044-2.233.864-4.196 2.276-5.447 2.1-14.827-.379-20.204-3.789-8.217-9.814-11.973-19.207-11.973-6.826 0-9.01.846-13.734 5.316-2.39 2.262-3.25 3.95-3.25 6.38 0 4.3 1.701 4.24 6.019-.215 3.694-3.812 9.424-5.91 13.408-4.91 1.376.345 4.283 2.56 6.46 4.922 6.643 7.207 6.593 16.474-.13 24.131-3.78 4.305-5.386 5.168-11.932 6.41-9.452 1.792-21.523-3.493-27.815-12.179-4.113-5.677-5.781-14.677-6.555-35.355-.782-20.868-2.27-30.23-5.97-37.531-3.775-7.45-10.911-14.202-18.044-17.076-5.525-2.225-7.288-2.397-25.169-2.454-10.575-.034-19.535-.37-19.912-.745-.376-.376.627-3.049 2.228-5.939 2.615-4.72 2.91-6.172 2.899-14.255-.016-10.724-1.983-15.748-8.665-22.123-6.217-5.931-11.856-8.79-24.322-12.333-12.32-3.5-19.089-7.458-24.25-14.177-3.803-4.951-4.204-9.25-1.307-14.014 2.589-4.257 1.298-6.853-3.407-6.853-4.131 0-6.247 1.944-7.108 6.532-.938 4.998.3 10.25 3.764 15.968 4.622 7.629 10.498 11.904 22.558 16.409 3.438 1.284 6.25 2.87 6.25 3.522 0 .653-2.223 3.494-4.94 6.313-5.96 6.184-7.986 11.607-6.066 16.242 1.472 3.553 4.79 5.873 5.446 3.807.226-.711.682-3.333 1.014-5.826 1.195-8.98 6.685-13.995 15.264-13.945 12.426.072 21.332 12.24 18.435 25.186-3.214 14.36-20.098 22.743-33.87 16.818-7.432-3.197-16.1-12.596-20.601-22.339-6.168-13.35-8.443-21.511-12.138-43.54-4.316-25.73-4.945-28.63-8.2-37.809-3.77-10.629-7.84-16.228-14.208-19.544-12.979-6.76-27.153-.777-32.079 13.54-1.889 5.49-1.907 6.005-.345 9.977 3.856 9.808 9.135 13.343 18.572 12.436 5.784-.556 8.295-2.796 6.627-5.913-.864-1.614-1.732-1.794-5.95-1.234-4.353.577-5.35.34-8.408-1.992-4.715-3.596-5.526-8.02-2.45-13.365 6.718-11.674 21.432-10.863 28.19 1.555 3.097 5.69 6.343 15.664 7.225 22.202.334 2.475 1.239 8.325 2.012 13 .772 4.675 2.126 13 3.008 18.5 4.312 26.888 14.752 48.435 27.801 57.378 8.55 5.86 13.12 6.433 41.118 5.157 13.774-.628 25.612-1.331 26.306-1.562 2.785-.926 16.868 1.67 22.131 4.079 6.96 3.186 9.643 5.65 12.705 11.665 3.23 6.345 3.37 16.655.295 21.783-8.937 14.908-23.671 17.197-30.062 4.671-3.562-6.982-.727-16.575 5.773-19.537 1.317-.6 2.395-1.826 2.395-2.724 0-1.342-.668-1.51-3.75-.947-4.815.88-7.44 2.607-10.933 7.195-2.41 3.164-2.804 4.577-2.727 9.77.192 12.967 9.586 21.512 23.7 21.557 5.712.018 10.878-2.423 15.656-7.397 4.14-4.31 6.033-4.57 6.112-.838.758 36.14 9.37 51.08 32.419 56.245 4.767 1.068 8.026.528 27.023-4.479 19.62-5.171 31.5-.716 31.5 11.814 0 4.814-5.394 10.67-9.829 10.67-3.073 0-3.484-.288-7.016-4.917-2.392-3.135-5.155-2.218-5.155 1.711 0 2.797 2.837 6.344 6 7.5.825.301 3.947.584 6.938.627 4.088.06 6.256-.48 8.731-2.171zm-374.598-9.5c3.702-1.875 5.527-3.438 5.737-4.914.366-2.57-.383-2.85-11.52-4.33-9.865-1.31-18.15-3.634-20.538-5.758-.963-.857-1.75-2.613-1.75-3.903 0-3.016 3.002-3.108 10.24-.314 2.893 1.117 9.666 2.662 15.052 3.434 8.59 1.23 10.415 1.217 14.87-.106 5.205-1.546 9.838-5.164 9.838-7.685 0-1.043-2.57-1.733-9.75-2.618-5.363-.66-12.122-1.652-15.02-2.204-2.899-.551-6.585-.713-8.191-.36-3.744.822-6.484-.673-8.447-4.608-2.85-5.711-2.22-5.782 17.908-2.009 17.688 3.316 30.113 2.584 32.521-1.914.539-1.006.979-3.193.979-4.86 0-3.855-2.248-5.101-9.202-5.101-3.162 0-10.173-1.424-17.227-3.5-6.542-1.925-13.59-3.5-15.661-3.5-2.206 0-4.469-.702-5.46-1.693-1.59-1.59-1.557-1.802.54-3.5 3.082-2.496 6.123-2.28 17.06 1.207 19.22 6.13 29.95 5.025 29.95-3.083 0-5.18-5.901-10.318-19.784-17.226l-12.47-6.205-13.623.011c-24.75.02-30.554 4.024-38.349 26.454-4.02 11.566-5.49 25.367-3.94 37.002 1.592 11.959 3.876 18.611 7.412 21.586 2.875 2.42 3.135 2.447 23.151 2.447 20.102 0 20.283-.02 25.674-2.75zM676 530.706c4.07-2.06 3.175-4.196-1.79-4.269-3.28-.048-4.928-.7-7-2.773-2.577-2.577-2.704-3.165-2.594-11.937.1-7.85.675-10.868 3.862-20.227 4.663-13.695 5.112-23.157 1.754-37.023-2.144-8.853-2.764-10.831-9.083-28.938-3.453-9.893-3.126-11.6 1.832-9.547 5.206 2.156 10.536 1.614 14.602-1.487 4.131-3.151 6.844-8.67 5.97-12.147-.84-3.35-3.043-2.92-5.514 1.078-3.65 5.908-11.665 7.006-17.52 2.4-5.973-4.698-7.943-13.573-5.096-22.955 3.183-10.487 8.914-18.02 21.604-28.403l7.098-5.807-2.555-2.556-2.555-2.555-3.258 1.906c-7.116 4.162-16.868 14.047-21.276 21.567-10.369 17.686-11.135 27.99-3.828 51.467 3.39 10.893 4.12 20.106 1.927 24.346-2.158 4.173-7.076 7.146-11.83 7.15-2.714.003-3.75.43-3.75 1.55 0 2.472 4.66 6.454 7.553 6.454 3.864 0 9.187-2.826 11.535-6.123 1.126-1.582 2.638-2.877 3.359-2.877 3.835 0 6.106 27.085 3.029 36.117-2.14 6.28-9.636 14.582-14.283 15.82-5.787 1.543-12.237-.41-15.943-4.829-1.863-2.22-1.473-9.02.804-14.04 1.756-3.869 1.827-4.616.563-5.88-3.775-3.774-10.491 10.497-9.15 19.442.816 5.44 5.766 10.828 11.276 12.276 4.235 1.114 12.404.608 16.447-1.017 1.479-.595 3.107-.823 3.618-.508.51.316.708 3.646.44 7.4-.4 5.575-.11 7.568 1.574 10.87 3.276 6.421 11.825 9.269 18.178 6.055zM469.8 491.8c.66-.66 1.2-2.595 1.2-4.3 0-3.958-1.578-5.5-5.629-5.5-5.385 0-7.9 4.274-5.336 9.066 1.196 2.234 7.77 2.729 9.765.734zm-91.686-21.86c5.67-3.036 3.6-11.88-2.793-11.925-4.709-.033-7.665 6.286-4.908 10.492 1.74 2.655 4.468 3.162 7.7 1.432zm20.33-44.163c1.821-2.6 2.055-7.35.412-8.366-1.744-1.078-6.817-.688-8.425.647-3.245 2.692-.278 9.942 4.069 9.942 1.333 0 3.074-.982 3.943-2.223zm-114.48-49.711c2.443-4.563-.506-10.066-5.393-10.066-5.012 0-7.433 6.285-3.916 10.171 2.266 2.505 7.948 2.44 9.31-.105zm271.602-109.16c8.744-1.61 15.182-5.087 22.046-11.904 6.577-6.533 14.704-19.98 18.813-31.13 1.291-3.505 3.948-10.687 5.904-15.96 4.005-10.801 7.078-22.813 8.674-33.912 1.51-10.505 2.534-50.55 1.31-51.306-.533-.33-3.72.51-7.08 1.867-7.06 2.852-20.983 3.614-26.242 1.435-6.49-2.688-4.6 1.597 4.006 9.083 3.302 2.871 6.003 5.603 6.003 6.071 0 2.026-4.33.523-10.595-3.677-3.713-2.49-7.106-4.172-7.54-3.738-.434.434-.115 3.934.71 7.777 3.17 14.785 6.425 32.883 6.425 35.72 0 5.312-2.91 9.7-8.54 12.878-5.767 3.254-9.096 6.09-11.615 9.892-1.189 1.796-1.968 2.197-2.769 1.429-.818-.785-.712-2.211.397-5.354 1.416-4.015 1.402-4.238-.23-3.532-.959.415-4.443 1.085-7.743 1.489-3.3.404-7.267 1.237-8.815 1.85-6.984 2.768-16.77-.45-19.223-6.32-3.202-7.665-1.295-15.302 5.027-20.123 6.443-4.915 9.007-.661 3.011 4.994-3.698 3.488-4.243 5.84-2.329 10.042 1.877 4.118 4.959 4.158 13.346.175 10.165-4.827 13.338-5.34 16.696-2.7 1.462 1.15 2.8 3.174 2.973 4.496.307 2.354.439 2.31 6.314-2.1 3.3-2.477 6.415-5.566 6.922-6.865.952-2.439.272-7.603-3.552-26.983-4.973-25.2-5.09-26.345-3.927-38.269 1.415-14.51 3.884-21.153 10.214-27.483 8.992-8.992 22.28-12.407 34.147-8.775 4.228 1.294 4.918 1.294 5.759-.001.525-.81.839-2.594.696-3.965-.267-2.566-1.952-3.845-16.474-12.507-13.736-8.193-34.91-31.525-40.2-44.296-.73-1.762-1.714-3.204-2.186-3.204s-1.783 1.688-2.913 3.75c-8.454 15.43-15.544 23.73-27.827 32.574-9.716 6.996-19.884 11.107-34.659 14.013l-11 2.163-7.224 12.5c-3.973 6.875-9.092 15.875-11.375 20-2.282 4.125-6.401 11.325-9.153 16-16.2 27.524-29.748 51.794-29.748 53.289 0 2.129 4.47 14.681 7.198 20.211 17.913 36.319 51.04 64.38 90.85 76.955 7.101 2.244 11.812 2.985 28.018 4.407.862.076 4.237-.354 7.5-.955zm-24.21-20.419c-.75-1.955.954-3.959 4.677-5.5 3.935-1.63 3.742-2.438-.914-3.833-4.717-1.413-6.966-3.707-5.285-5.388.865-.865 2.438-.818 6.37.19 6.623 1.697 16.637 1.515 24.095-.438 7.519-1.969 7.701-1.948 7.701.884 0 1.805-.808 2.692-3.25 3.566l-3.25 1.163 3.75 1.959c2.062 1.077 3.75 2.65 3.75 3.495 0 1.281-.791 1.402-4.75.726-8.605-1.47-17.265-.743-24.62 2.066-8.087 3.088-7.542 3.015-8.273 1.11zm-15.916-15.782c-.273-.712.191-3.243 1.032-5.625.84-2.382 1.528-5.089 1.528-6.015 0-.925.622-2.533 1.382-3.573 1.268-1.734 1.722-1.778 5.506-.529 3.592 1.185 4.898 1.146 10.103-.3 7.026-1.954 10.967-2.095 14.433-.516 2.011.917 3.411.806 6.966-.552 2.485-.949 6.803-1.63 9.78-1.545 2.931.085 6.473-.151 7.87-.524 2.439-.652 2.606-.406 4.188 6.148 1.365 5.659 1.421 7.056.326 8.174-1.004 1.024-1.812 1.084-3.372.25-3.476-1.86-8.66-1.231-16.168 1.964l-7.196 3.062-9.102-2.137c-9.852-2.313-13.602-2.106-19.88 1.096-4.384 2.237-6.701 2.432-7.396.622zm-12.773-84.372c-1.354-1.353-.512-2.338 6.583-7.696 7.956-6.01 14.784-12.637 13.019-12.637-.619 0-4.603.484-8.854 1.075-9.872 1.373-18.193.02-28.54-4.64-8.386-3.777-11.732-4.115-19.716-1.99-5.677 1.512-7.67 1.273-8.55-1.022-.979-2.55.46-4.287 9.742-11.754 17.155-13.802 28.014-18.952 40.176-19.054 7.462-.063 13.65 2.345 14.267 5.553.26 1.347-1.31 1.544-11.497 1.446-11.014-.106-12.211.077-18.032 2.766-5.993 2.768-11.471 7.013-6.765 5.242 5.09-1.916 16.652-3.748 23-3.644 3.85.063 8.44.127 10.2.143 1.761.015 6.152-1.38 9.758-3.101 9.191-4.387 11.139-2.9 5.042 3.848-1.925 2.131-3.5 4.421-3.5 5.09 0 .668 1.41 3.178 3.132 5.576l3.132 4.361-2.882 6.803c-3.48 8.213-10.484 15.584-19.715 20.746-6.263 3.502-8.687 4.203-10 2.89zm8.892-26.888c1.892-1.516 1.889-1.53-.147-.552-3.059 1.47-6.544.32-9.641-3.182-2.97-3.358-4.632-3.188-2.773.285 1.16 2.169 6.129 4.891 9.06 4.965.858.021 2.433-.66 3.5-1.516zM494 118.082c0-2.799-1.448-4.082-4.607-4.082-4.203 0-4.603 2.391-.643 3.838 3.574 1.305 5.25 1.383 5.25.244zm29.8-.282c1.996-1.996 1.423-3.97-1.05-3.62-1.446.206-2.364 1.124-2.57 2.57-.35 2.473 1.624 3.046 3.62 1.05zM470 87.5c-.996-1.2-.983-1.816.068-3.082 1.911-2.303 11.057-6.69 21.932-10.52 8.718-3.07 10.487-3.347 21.5-3.372 11.414-.025 12.325.128 18.651 3.125C539.481 77.124 547 83.884 547 87c0 2.635-1.97 2.547-9.422-.423-3.343-1.332-9.228-2.723-13.078-3.09-9.18-.877-31.831 1.008-42.313 3.52-9.966 2.389-10.592 2.414-12.187.493zm4 159c-.685-.825-1.64-1.5-2.122-1.5-.483 0-.878.675-.878 1.5 0 .862.902 1.5 2.122 1.5 1.774 0 1.918-.247.878-1.5zm-10.004-2.25c-.005-3.376-3.144-8.724-6.028-10.267-3.067-1.641-3.398-.747-2.105 5.688 1.21 6.029 2.225 7.289 5.887 7.314 1.792.012 2.25-.544 2.246-2.735zm-14.016-1c-.035-3.139-2.719-16.678-3.894-19.644-1.37-3.457-6.876-10.606-8.17-10.606-.504 0-.916 1.102-.916 2.449 0 4.157 4.878 26.7 6.095 28.166 1.73 2.083 6.91 1.808 6.885-.365zM436 241.61c0-.214-.935-4.827-2.078-10.25-1.142-5.423-3.124-15.71-4.403-22.86-1.75-9.782-3.414-15.459-6.722-22.933-4.182-9.452-6.81-12.9-6.785-8.9.033 5.36 11.784 62.296 13.225 64.083.893 1.107 6.763 1.854 6.763.86zm-18.54-26.754c-2.602-12.846-4.948-24.613-5.215-26.15-.61-3.51-1.934-3.099-4.551 1.414l-2.05 3.534 3.714 19.423c2.042 10.683 3.938 20.464 4.212 21.736.539 2.494 6.322 5.635 7.774 4.22.464-.451-1.284-11.331-3.885-24.177zm-12.136 6.91-2.965-15.516c-.342-1.788-.903-3.25-1.247-3.25-.345 0-1.86 2.043-3.37 4.54-3.138 5.196-3.28 8.022-.907 17.96 1.501 6.287 2.021 7.175 5.107 8.716 5.677 2.837 6.045 1.482 3.382-12.45zm-14 4.945c-.772-4.053-.964-4.255-2.692-2.82-2.543 2.11-2.696 5.148-.304 6.053 3.052 1.154 3.698.457 2.996-3.233zm198.527-105.84c-1.457-.534-3.2-2.298-3.872-3.92-1.253-3.027-2.979-3.978-2.979-1.642 0 2.733 4.803 6.685 8 6.582.825-.027.308-.486-1.15-1.02zM601 114.944c0-1.729-.783-.979-2.928 2.806l-2.125 3.75 2.527-2.806c1.39-1.543 2.526-3.23 2.526-3.75zm-22 1.966c0-2.559-1.96-3.256-5.436-1.934-2.256.857-2.558 1.326-1.6 2.48 1.179 1.421 4.866 2.469 6.286 1.786.412-.198.75-1.248.75-2.332zm31.035-.452c.924-1.114.977-1.846.19-2.633-1.504-1.504-3.836-.42-4.493 2.09-.666 2.547 2.327 2.924 4.303.543zM580.5 101.912c6.558-1.352 18.316-1.021 24.17.68 6.55 1.904 7.922 1.114 3.83-2.203-7.293-5.912-22.66-7-32.183-2.277-5.586 2.77-7.527 6.695-2.666 5.39 1.567-.421 4.649-1.136 6.849-1.59zm32.31-10.182c.25-2.09-.354-2.97-3-4.38-4.736-2.525-17.968-2.265-23.926.47L581.5 89.83l8 .12c5.579.084 9.967.82 14.5 2.436 3.575 1.274 6.95 2.236 7.5 2.138.55-.099 1.14-1.356 1.31-2.795z\",\n    style: {\n      fill: \"#e2d200\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.159 0 0 .159 22.778 22.58)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m139.033 1198.834-.029-44.167-2.646-6.583c-5.415-13.47-16.6-47.008-19.873-59.584-7.482-28.755-13.501-61.164-16.9-91-2.1-18.422-3.923-60.163-3.146-72 .492-7.512.333-10.4-.642-11.608-.713-.884-6.632-5.737-13.153-10.784-8.997-6.965-12.168-8.918-13.152-8.101-.714.592-1.588 4.32-1.943 8.285-.355 3.964-1.077 10.358-1.603 14.208-.95 6.96-2.775 22.07-5.432 45-.765 6.6-2.347 19.875-3.516 29.5-1.17 9.625-2.478 21.143-2.908 25.596-.43 4.453-1.103 8.616-1.495 9.25-1.485 2.402.54 2.927 5.354 1.387 5.922-1.893 11.058-.781 16.142 3.497 7.255 6.105 8.017 18.143 1.592 25.152-2.704 2.95-9.286 6.067-12.874 6.096-1.48.012-2.982.493-3.338 1.069-.356.576 1.868 6.322 4.941 12.769 3.073 6.447 5.588 13.032 5.588 14.635 0 1.602-1.687 5.784-3.75 9.293-12.542 21.337-20.997 34.689-22.575 35.652-2.342 1.429-4.733-1.442-10.083-12.106-2.15-4.284-6.511-12.334-9.693-17.888-3.182-5.555-6.057-11.182-6.389-12.506-.464-1.849 1.263-5.532 7.448-15.887 4.428-7.415 7.921-13.871 7.762-14.348-.159-.477-2.195-1.01-4.524-1.184-2.329-.173-5.682-1.16-7.451-2.194-6.618-3.865-11.094-13.773-9.354-20.704.912-3.635 6.244-9.352 10.97-11.763 3.326-1.697 5.177-1.962 10.345-1.479l6.294.588-.008-3.213c-.01-4.193-1.664-18.754-3.487-30.712-.796-5.225-2.605-19.4-4.02-31.5-2.445-20.916-3.492-29.373-8.977-72.5-1.708-13.426-2.112-19.734-1.474-23 1.65-8.451 1.68-8.397-8.784-16.696-5.362-4.253-10.313-8.279-11-8.947C.265 839.4 0 816.194 0 730.967V622.794l3.543 3.11c1.95 1.712 6.337 4.517 9.75 6.235 8.795 4.426 41.387 24.927 52.945 33.304A2537.79 2537.79 0 0 0 85.158 679c15.045 10.65 24.885 18.02 33.07 24.77 5.366 4.426 8.412 6.276 9.959 6.052 1.558-.225 4.741-3.935 10.573-12.322 4.59-6.6 9.108-13.308 10.042-14.906 3.314-5.673 24.304-33.231 30.448-39.976 2.063-2.265 3.75-4.405 3.75-4.757 0-1.362 45.305-52.074 57.5-64.363 4.4-4.433 12.016-10.747 16.925-14.03 8.653-5.786 19.026-14.62 26.917-22.925 8.832-9.293 17.977-26.097 21.822-40.097 1.854-6.752 2.19-10.651 2.237-25.946.064-21.446-1.509-28.95-9.454-45.1-6.182-12.565-12.598-20.064-37.3-43.593C237.596 358.895 227.12 350 224.192 350c-2.922 0-10.191 5.764-10.191 8.081 0 1.676 13.747 15.035 30.399 29.539 14.195 12.364 28.591 26.107 32.524 31.045 4.968 6.24 11.268 18.81 14.201 28.335 2.027 6.58 2.305 9.523 2.27 24-.039 15.794-.17 16.864-3.078 25.01-3.748 10.496-7.55 18.093-12.004 23.984-6.255 8.274-18.715 20.113-27.983 26.587-28.858 20.16-86.223 85.283-116.399 132.14-3.063 4.757-6.27 9.09-7.125 9.63-1.2.757-3.239-.382-8.93-4.991-15.452-12.514-34.916-26.234-59.117-41.67-22.265-14.204-39.718-24.45-42.988-25.238-1.962-.474-4.566.2-9.25 2.392L0 621.894v-99.506c0-54.728.338-99.322.75-99.098.412.225 6.15 3.019 12.75 6.209 6.6 3.19 20.033 9.783 29.851 14.65C53.169 449.018 61.865 453 62.676 453c1.666 0 15.476-7.803 16.47-9.306.356-.537-1.331-3.405-3.748-6.373-5.592-6.865-8.11-11.832-10.23-20.178-1.44-5.671-2.395-7.31-6.415-11.017-5.486-5.056-6.777-5.067-18.866-.147-6.956 2.83-9.887 3.005-9.887.59 0-.67 1.058-4.335 2.352-8.144 1.294-3.809 2.657-8.966 3.03-11.46.616-4.135.418-4.782-2.247-7.336-6.254-5.991-6.337-18.325-.175-26.078 3.552-4.47 3.33-7.591-1.63-22.908-2.515-7.766-3.21-11.164-2.438-11.935.772-.772 4.144.399 11.844 4.112 5.92 2.855 11.556 5.189 12.523 5.186.968-.003 3.218-1.401 5-3.107 4.64-4.44 8.426-6.13 13.728-6.13 5.345 0 11.858 2.948 14.812 6.703 1.094 1.39 2.88 2.528 3.97 2.528 1.963 0 10.212-3.328 17.512-7.065 4.751-2.432 8.719-2.553 8.719-.266 0 .918-1.332 4.03-2.961 6.916-1.629 2.885-3.9 8.032-5.046 11.436l-2.085 6.189 4.853 5.145c7.944 8.42 9.336 18.367 3.752 26.805-1.462 2.209-3.973 4.764-5.58 5.678-3.6 2.048-3.677 3.779-.691 15.452 1.802 7.046 1.99 8.949.95 9.592-.77.476-4.809-.518-9.922-2.44-4.742-1.785-9.222-3.014-9.955-2.733-1.675.643-2.694 4.522-1.87 7.117 1.117 3.52 6.463 10.095 10.709 13.17 7.435 5.387 8.027 5.165 36.846-13.824 20.859-13.744 52.134-37.274 68.5-51.536 2.75-2.396 9.05-7.876 14-12.177 4.95-4.301 13.275-11.967 18.5-17.036 41.529-40.29 52.315-51.84 69.967-74.923 24.293-31.767 27.176-36.128 24.896-37.656-12.165-8.156-41.88-19.628-64.402-24.865-13.51-3.14-15.49-3.924-16.477-6.522-.65-1.71.16-6.498 2.986-17.652 7.423-29.29 10.028-49.53 10.016-77.805-.012-29.218-2.53-48.947-9.48-74.279C252.578 7.693 251 1.505 251 .971c0-.534 2.213-.971 4.918-.971h4.918l2.127 9.75c1.17 5.362 2.344 10.65 2.61 11.75 1.376 5.696 4.51 26.576 5.562 37.065 1.613 16.081 1.624 47.79.022 64.935-1.617 17.309-3.332 27.46-7.317 43.322-1.746 6.948-2.713 12.67-2.218 13.119.483.439 5.153 1.829 10.378 3.09 5.225 1.26 13.301 3.57 17.947 5.133 4.87 1.639 8.82 2.47 9.328 1.961 3.347-3.347 1.95-16.744-2.308-22.125-5.029-6.357-5.299-6.977-4.141-9.516 1.092-2.399 1.249-2.426 10.556-1.814 8.528.56 9.87.402 13.783-1.617 9.127-4.712 13.234-11.075 13.264-20.553.025-7.854-2.323-11.741-6.828-11.302-3.355.327-3.378.422-2.046 8.492.913 5.526.054 8.547-3.62 12.73-6.163 7.02-14.727 7.172-21.128.375-3.48-3.696-3.807-4.524-3.803-9.669.004-6.623 2.368-11.233 6.984-13.62 3.85-1.99 3.241-3.078-2.127-3.798-11.17-1.498-16.673-12.804-10.833-22.253C289.708 91.12 294.15 89 300.566 89c4.29 0 4.978.377 9.384 5.144 5.301 5.736 6.578 5.407 6.22-1.603-.136-2.683.557-5.354 2.062-7.947 3.43-5.908 6.83-7.98 13.203-8.041 4.703-.046 5.852.349 8.587 2.947 4.213 4.004 5.979 7.61 5.974 12.2-.007 6.742-5.213 12.779-12.265 14.221-3.432.702-4.337 2.528-3.3 6.658.474 1.891 1.266 2.421 3.62 2.421 7.786 0 16.694-7.029 19.955-15.747 1.097-2.93 1.994-6.13 1.994-7.109 0-4.481-3.287-12.189-6.995-16.401-4.514-5.128-4.678-5.787-2.326-9.376 1.592-2.43 1.996-2.528 7.818-1.904 9.36 1.002 14.68-.747 20.978-6.896 4.332-4.229 5.469-6.079 6.397-10.404 1.49-6.952 1.426-7.91-.876-12.981-1.706-3.76-2.317-4.277-4.728-4-2.732.314-2.764.398-2.447 6.514.442 8.545-2.185 14.428-7.697 17.24-5.18 2.643-9.374 2.613-14.202-.1C347.232 51.2 345 46.818 345 40.243c0-4.123.588-5.725 3.5-9.54 3.979-5.21 4.244-6.332 1.689-7.143-.996-.316-3.297-2.108-5.113-3.982-3.837-3.958-5.04-10.126-3.115-15.96L343.155 0h52.98l-.672 2.25c-1.292 4.329-3.667 6.953-8.047 8.89-4.73 2.093-5.714 4.703-3.113 8.26 3.683 5.037 19.91-6.627 21.298-15.308.48-2.999 1.127-4.092 2.421-4.092 1.479 0 1.647.53 1.028 3.25-1.133 4.981-4.519 10.915-8.212 14.392-4.076 3.837-10.89 7.358-14.24 7.358-3.566 0-3.962 1.387-2.045 7.16 2.128 6.406 1.541 15.792-1.335 21.37-5.371 10.411-15.397 15.907-29.968 16.426-1.833.065-1.525 2.85.656 5.912 3.131 4.398 5.314 13.448 4.548 18.86-1.882 13.297-8.164 19.461-26.308 25.815-.796.279-1.091 1.158-.716 2.135 4.593 11.97 1.758 24.402-7.463 32.733-6.147 5.553-10.17 6.94-18.195 6.27-3.7-.308-6.932-.23-7.182.173-.25.404.978 3.627 2.728 7.164 2.9 5.861 3.168 7.198 3.024 15.134l-.157 8.705 3.928 1.571c4.74 1.897 7.294 1.992 8.677.322.917-1.106 9.693-16.915 36.225-65.25 4.227-7.7 9.102-16.382 10.835-19.294 1.732-2.912 3.15-5.473 3.15-5.692 0-.22 2.839-5.262 6.308-11.206 3.47-5.945 8.716-15.308 11.66-20.808 2.943-5.5 8.059-14.725 11.369-20.5C405.347 36.28 424 1.775 424 .828 424 .373 444.435 0 469.412 0c35.78 0 45.364.265 45.19 1.25-.122.688-1.44 3.612-2.929 6.5-1.489 2.888-2.272 5.25-1.74 5.25.531 0 3.053-2.925 5.604-6.5 3.512-4.922 5.224-6.5 7.05-6.5 3.382 0 3.046 1.824-1.62 8.811-4.468 6.692-8.34 10.34-15.29 14.404-4.415 2.582-8.608 8.793-6.498 9.625.475.188 4.13-1.695 8.122-4.183 8.26-5.15 16.786-14.2 21.196-22.504 2.396-4.51 3.559-5.717 5.753-5.97 3.69-.424 3.522.89-1.192 9.317-4.38 7.831-12.193 16.48-19.238 21.299C509.158 33.987 497.019 40 495.243 40 493.94 40 491 43.4 491 44.908c0 2.834 16.065-3.416 25.541-9.936 8.753-6.022 16.499-15.853 23.106-29.325C541.581 1.703 542.997 0 544.34 0c4.403 0-.483 12.456-9.817 25.026-6.534 8.8-8.418 10.474-19.022 16.905-6.752 4.096-15.378 7.522-27.418 10.892-4.35 1.218-3.668 3.177 1.105 3.177 13.203 0 31.865-9.346 45.533-22.804 6.113-6.018 13.775-18.568 16.299-26.696 2.655-8.552 5.928-8.93 8.886-1.025 5.376 14.37 15.043 27.756 28.905 40.027 11.656 10.319 23.707 16.707 25.634 13.588 1.053-1.703-.525-3.758-4.238-5.52-17.159-8.14-35.147-27.502-41.662-44.843C565.474.557 565.442 0 568.025 0c1.543 0 2.815 1.727 5.338 7.25 7.005 15.33 24.604 34.584 35.749 39.113 8.032 3.264 8.136-1.977.138-6.997-11.02-6.917-24.771-22.189-28.918-32.114C577.83 1.266 577.835 0 580.358 0c1.687 0 2.814 1.178 4.543 4.75 5.211 10.763 17.584 24.864 25.335 28.872 6.328 3.272 6.342-3.923.016-7.692-8.14-4.85-18.162-16.589-19.79-23.18C589.885.411 590.095 0 591.87 0c1.476 0 3.42 2.022 6.633 6.9 4.657 7.068 12.095 14.1 14.915 14.1 2.675 0 1.787-4.004-1.517-6.84C607.893 10.72 602 3.099 602 1.356c0-2.606 3.92-1.327 6.568 2.144C612.065 8.085 614 8.06 614 3.43c0-3.13.277-3.53 2.25-3.25 2.173.309 2.277.818 3.036 14.82.432 7.975.56 24.175.284 36l-.5 21.5 3.614 11c1.988 6.05 5.798 17.456 8.467 25.348 7.998 23.653 15.275 51.954 20.223 78.652 5.109 27.571 7.68 55.358 9.209 99.5.352 10.175.927 22.528 1.278 27.45l.639 8.95 14.395 10.8c7.917 5.94 14.956 10.8 15.641 10.8 1.694 0 2.228-2.564 3.994-19.197 2.5-23.544 3.244-30.268 5.952-53.803 1.424-12.375 3.02-27.45 3.548-33.5.528-6.05 1.375-14.6 1.882-19 .508-4.399.802-8.119.655-8.267-.148-.147-2.699.356-5.668 1.12-7.275 1.87-12.981.227-18.08-5.206-6.426-6.847-7.147-14.672-2.06-22.36 3.905-5.9 8.57-8.296 15.991-8.212 3.438.039 6.25-.214 6.25-.561 0-.348-3.141-6.455-6.98-13.573-3.84-7.118-6.99-13.496-7-14.173-.011-.678 1.81-4.223 4.047-7.877 2.236-3.654 5.89-10.075 8.12-14.268 5.733-10.777 12.085-21.507 13.191-22.28 2.49-1.741 4.256.82 20.447 29.652 3.396 6.047 6.171 12.122 6.167 13.5-.005 1.48-3.69 8.022-9 15.979-4.946 7.41-8.992 13.78-8.992 14.155s2.587.46 5.75.19c4.765-.408 6.52-.08 10.25 1.919 7.862 4.212 11.446 12.677 9.083 21.453-2.415 8.969-9.445 13.678-19.636 13.154-3.466-.178-6.574-.052-6.906.28-.333.333.106 5.954.974 12.49 1.39 10.46 4.805 37.011 9.953 77.385.877 6.875 2.542 19.7 3.7 28.5 2.174 16.513 2.971 40.962 1.49 45.686-.89 2.839-.835 2.89 19.568 17.623l3.727 2.691.023 207.25c.015 126.573-.337 207.25-.903 207.25-.51 0-14.055-6.5-30.1-14.446l-29.175-14.445-4.863 1.917c-6.867 2.706-16.01 8.008-16.64 9.647-.303.79 1.625 3.664 4.485 6.688 5.087 5.378 8.59 11.325 12.079 20.509 1.06 2.79 3.402 6.935 5.206 9.212 3.144 3.97 3.47 4.121 7.92 3.694 2.552-.246 7.89-1.945 11.863-3.776 9.094-4.191 10.164-3.516 7.384 4.66-1.092 3.212-2.567 8.168-3.278 11.012l-1.292 5.172 3.213 2.704c9.631 8.105 10.4 22.12 1.663 30.309l-4.305 4.035 1.804 5.47c.993 3.008 3.473 9.59 5.512 14.626 2.41 5.954 3.366 9.497 2.731 10.132-.635.634-5.274-1.14-13.265-5.072-6.758-3.326-13.014-6.042-13.902-6.036-.887.007-2.652 1.616-3.921 3.575-4.105 6.335-14.183 9.164-21.474 6.03-1.77-.762-4.997-3.237-7.171-5.5-4.937-5.142-7.002-5.21-19.047-.625-7.188 2.737-9.252 3.176-10.251 2.18-1-.996-.834-2.038.836-5.209 2.26-4.292 6.939-17.142 6.877-18.888-.02-.591-1.85-2.33-4.065-3.862-10.448-7.23-10.374-23.953.138-31.237 4.961-3.438 5.11-5.951 1.062-17.856-3.886-11.424-3.04-12.24 7.498-7.235 8.921 4.236 11.066 4.452 12.52 1.26 3.007-6.598-13.922-22.425-21.438-20.043-10.66 3.377-70.565 47.383-104.177 76.528-19.917 17.27-59.329 58.459-83.032 86.775-17.77 21.228-35.999 46.427-34.887 48.226 1.293 2.092 26.728 13.504 39.419 17.686 13.886 4.576 17.84 5.624 29.5 7.816 9.23 1.735 12.246 2.991 13.017 5.422.303.953-.845 6.764-2.552 12.911-14.886 53.634-13.262 115.233 4.583 173.784.652 2.14.422 2.25-4.725 2.25h-5.41l-1.258-5.75c-10.731-49.052-11.58-55.706-11.58-90.75 0-25.006.312-31.066 2.259-44 2.293-15.237 5.358-31.238 7.19-37.53.88-3.024.736-3.695-1.118-5.22-1.17-.963-2.865-1.754-3.767-1.76-2.01-.01-19.411-4.405-24.81-6.265-5.59-1.925-6.329-1.366-6.329 4.793 0 6.614 1.148 9.736 5.558 15.118 3.93 4.795 4.407 8.575 1.355 10.713-1.542 1.08-2.912 1.225-5.244.556-1.735-.498-5.57-.905-8.522-.905-6.644 0-15.54 4.403-18.926 9.366-2.907 4.263-4.53 13.773-3.196 18.728 2.32 8.617 7.076 7.012 6.201-2.093-.402-4.186-.062-5.65 2.057-8.852 4.576-6.915 12.013-8.633 19.844-4.583 4.967 2.568 6.873 6.097 6.873 12.725 0 4.88-.473 6.64-2.5 9.298-3.25 4.261-3.166 4.867.943 6.817 8.718 4.137 11.494 14.656 6.057 22.954-3.986 6.083-13.245 7.537-19.768 3.104-2.053-1.395-3.732-2.885-3.732-3.311 0-1.521-4.138-5.186-5.15-4.56-.589.364-.762 2.062-.404 3.969.786 4.19-1.196 8.994-5.3 12.854-4.042 3.8-11.972 4.71-17.635 2.022-4.007-1.901-7.467-7.665-7.467-12.438 0-7.065 6.939-14.988 13.135-14.996 2.91 0 6.138-2.552 5.534-4.366-.601-1.803-7.294-2.424-11.296-1.048-7.95 2.733-15.417 13.697-15.417 22.64 0 5.46 3.778 14.046 6.92 15.728 5.114 2.736 5.829 6.15 2.012 9.604-1.576 1.426-2.54 1.525-6.15.63-7.777-1.927-16.572.803-22.47 6.973-4.001 4.184-5.312 7.623-5.312 13.932 0 4.941 2.17 11.917 3.699 11.888 2.806-.054 3.802-2.217 3.82-8.302.017-5.343.451-6.955 2.651-9.84 1.448-1.897 4.48-4.283 6.74-5.302 3.542-1.598 4.662-1.686 8.142-.643 5.967 1.787 9.984 5.83 10.929 10.997 1.197 6.547-.393 10.99-5.642 15.762-4.97 4.518-4.958 5.64.08 7.745 6.683 2.792 10.578 13.363 7.586 20.586l-1.248 3.012H364l.022-2.25c.034-3.445 3.483-10.29 6.12-12.142 1.297-.911 4.084-1.935 6.194-2.274 4.421-.711 5.166-1.883 3.681-5.789-.96-2.523-1.414-2.742-4.616-2.223-9.144 1.484-17.776 10.485-19.015 19.827-.527 3.969-1.007 4.851-2.643 4.851-1.788 0-1.928-.443-1.326-4.207 2.03-12.699 9.897-21.377 22.438-24.754 3.837-1.033 4.26-1.425 3.622-3.354-.397-1.202-.93-5.785-1.182-10.185-.37-6.432-.08-8.883 1.483-12.507 4.682-10.86 11.292-15.127 24.472-15.794 4.813-.244 8.75-.661 8.75-.927s-1.288-2.124-2.863-4.128c-6.724-8.558-8.388-16.057-5.605-25.25 3.06-10.106 11.902-18.099 21.468-19.405 10.212-1.395 10.464-1.7 7-8.489-3.001-5.883-2.747-15.286.584-21.601 5.849-11.09 11.917-14.755 24.916-15.053 5.272-.12 8.909-.613 8.78-1.189-.122-.54-1.36-2.658-2.75-4.707-3.285-4.842-4.682-10.224-4.409-16.987.122-3-.102-5.777-.496-6.171-1.232-1.232-10.017-4.29-12.326-4.291-1.681 0-3.084 1.593-5.943 6.749-10.795 19.47-42.122 74.956-73.823 130.75-20.108 35.392-30.238 53.455-32.524 58l-1.509 3-43.223.26c-39.37.238-43.167.118-42.605-1.347.34-.885 2.801-5.502 5.47-10.26 2.67-4.76 4.855-8.99 4.856-9.403.012-3.925-10.975 6.893-14.867 14.64-2.926 5.821-3.662 6.61-6.17 6.61-3.609 0-3.391-1.485 1.61-11.004 4.717-8.975 9.865-14.081 18.246-18.096 7.506-3.596 10.183-5.582 10.183-7.555 0-4.227-16.066 3.462-23.586 11.29-5.178 5.388-12.414 17.804-12.414 21.3 0 2.456-2.035 4.065-5.143 4.065-3.18 0-3.172-.657.127-9 7.114-17.996 23.344-32.256 41.407-36.383 4.633-1.058 7.855-3.704 6.347-5.212-1.295-1.296-11.759 1.528-21.507 5.804-8.377 3.675-10.778 5.313-17.256 11.78-7.755 7.74-11.301 13.634-14.45 24.011-2.316 7.637-2.862 8.456-5.876 8.816-3.074.368-3.215-.414-1.237-6.816 6.866-22.216 23.707-40.552 43.461-47.322 3.095-1.06 9.148-2.295 13.452-2.743 7.608-.792 11.223-2.24 10.105-4.048-.818-1.324-10.173-1.005-16.43.56-13.192 3.301-21.693 7.63-31.596 16.09-11.01 9.407-22.814 28.682-24.072 39.309-.542 4.578-.875 5.154-2.971 5.154-1.299 0-2.391-.337-2.428-.75-1.12-12.434-4.952-20.45-16.799-35.14-11.501-14.26-19.85-21.683-28.877-25.675-7.078-3.13-9.257-3.15-9.257-.087 0 1.923 1.34 3.01 7.41 6.01 12.115 5.987 27.51 21.629 34.095 34.642 3.491 6.9 7.322 18.096 6.756 19.75-.235.687-1.479 1.25-2.764 1.25-1.932 0-2.635-.908-4.063-5.25-4.801-14.592-14.674-28.538-26.506-37.439-9.655-7.263-13.724-9.26-14.922-7.32-1.309 2.117-.261 3.25 8.479 9.175 9.85 6.676 17.686 15.803 23.302 27.136 4.988 10.067 5.437 13.698 1.692 13.698-1.811 0-2.84-.775-3.65-2.75-6.016-14.671-11.608-23.154-19.457-29.515-5.127-4.155-8.945-5.562-10.6-3.907-.775.775-.136 1.873 2.257 3.877 10.647 8.915 14.174 12.949 17.991 20.575 4.897 9.785 5.062 11.72.999 11.72-2.429 0-3.1-.51-3.627-2.75-2.601-11.064-16.11-25.605-18.136-19.521-.225.676 1.82 3.601 4.542 6.5 4.58 4.876 9.202 12.275 9.202 14.731 0 .572-1.282 1.04-2.848 1.04-2.363 0-3.16-.692-4.68-4.06-1.586-3.52-3.993-5.94-5.906-5.94-.311 0-.566 1.538-.566 3.418 0 5.162-.88 6.582-4.076 6.582h-2.863l-.028-44.166zm259.512 25.711c4.049-4.048 2.919-9.282-2.487-11.521-5.848-2.422-12.058.973-12.058 6.592 0 6.995 9.321 10.154 14.545 4.93zm-189.365-8.795c5.48-10.466 20.098-25.606 29.482-30.536 13.33-7.003 28.122-11.102 40.347-11.18 6.06-.037 5.788.198 10.963-9.497 1.479-2.77 4.558-8.273 6.842-12.228 2.284-3.954 4.998-8.68 6.03-10.5 1.031-1.82 2.899-5.109 4.15-7.309 1.252-2.2 4.173-7.375 6.493-11.5 2.32-4.125 8.2-14.475 13.067-23 4.867-8.525 9.914-17.584 11.216-20.132l2.368-4.632-2.7-7.868c-8.358-24.345-23.955-46.614-44.973-64.21-26.446-22.141-57.493-34.376-83.66-32.968-16.14.869-26.513 8.42-36.384 26.486-13.763 25.19-20.99 46.65-23.853 70.824-1.775 14.996-3.166 43.5-2.24 45.914.558 1.453 1.233 1.334 5.901-1.04 4.493-2.287 6.6-2.697 14.271-2.778 4.95-.053 11.365.284 14.255.748 6.327 1.017 6.396-.358.25-4.938-4.81-3.584-6.857-6.954-5.219-8.592.86-.86 2.447-.234 6.38 2.52 3.345 2.34 5.583 3.317 6.196 2.704.946-.946-1.24-13.056-5.465-30.262-2.09-8.507-2.421-14.928-.917-17.738.538-1.007 4.08-3.873 7.869-6.37 3.79-2.496 7.784-5.766 8.876-7.266 2.8-3.843 5.369-2.752 4.333 1.84-1.064 4.72-3.163 7.604-9.535 13.105-6.722 5.803-6.882 7.24-2.538 22.798 5.831 20.883 7.644 42.18 4.589 53.91-3.178 12.2-5.688 17.306-11.13 22.646-7.053 6.92-13.036 8.813-27.694 8.76l-10.75-.04v3.121c0 3.32.29 3.55 9.17 7.302 5.613 2.372 15.6 8.996 21.984 14.583 5.648 4.944 10.866 11.5 18.93 23.787 6.092 9.284 7.89 11.786 8.468 11.786.17 0 2.252-3.712 4.628-8.25zm30.514-47.83c-8.832-.945-14.841-3.537-21.222-9.154-4.346-3.825-6.37-8.268-4.581-10.057.669-.669 2.746-.251 6.251 1.257 10.135 4.36 14.905 5.266 27.858 5.293 9.908.021 14.933-.517 24.23-2.595 6.453-1.442 13.404-3.32 15.448-4.174 4.496-1.878 6.322-1.346 6.322 1.843 0 4.404-12.356 10.954-28.5 15.106-11.83 3.043-16.42 3.485-25.806 2.48zm-.182-21.85c-6.037-3.124-8.305-3.816-11.053-3.37-3.201.52-3.459.368-3.459-2.034 0-1.459 1.315-4.094 3-6.013 3.472-3.954 3.785-6.162 1.08-7.61-1.056-.565-2.467-2.687-3.137-4.715-1.096-3.32-1.016-3.85.8-5.32 1.108-.899 2.32-3.015 2.69-4.703.371-1.689 2.17-4.81 3.996-6.938 4.298-5.002 20.124-15.753 22.084-15 3.1 1.19 2.119 2.499-8.286 11.05-4.55 3.74-8.764 7.718-9.364 8.838-.99 1.85-.872 1.966 1.274 1.26 1.3-.428 6.413-.977 11.363-1.22 8.431-.414 9.786-.185 21.446 3.631 12.674 4.149 17.435 4.75 24.554 3.099 3.063-.71 4.527-.582 6.25.547 4.406 2.887 3.674 3.914-12.75 17.906-11.167 9.513-23.577 14.488-36.196 14.51-5.85.01-7.656-.485-14.292-3.918zm22.977-3.067c7.702-1.97 18.996-7.473 21.48-10.467 1.845-2.222-.121-2.033-11.706 1.125-7.21 1.965-12.64 2.733-20.763 2.938-6.05.153-11.337.305-11.75.34-.412.033-.75.639-.75 1.345 0 2.32 8.36 6.245 14.09 6.614.875.056 5.104-.797 9.399-1.895zm9.351-20.356c1.096-.852 1.016-1.28-.44-2.344-2.675-1.956-6.4-1.667-6.4.497 0 3.802 3.211 4.67 6.84 1.847zm-33.84-1.706c0-2.086-1.471-2.606-2.53-.893-.907 1.468.302 4.211 1.523 3.456.554-.342 1.007-1.495 1.007-2.563zm-8-51.07c0-.62 1.564-2.86 3.475-4.975 6.254-6.922 5.943-13.661-.707-15.313-3.33-.827-4.22-.567-9.076 2.658-2.962 1.967-7.498 4.293-10.082 5.17-4.223 1.434-4.995 1.441-7.64.074-3.554-1.838-4.625-5.346-2.796-9.16 1.178-2.457 1.937-2.834 5.84-2.897 2.592-.042 6.356-1.039 8.914-2.36 5.359-2.771 14.544-3.714 18.042-1.852 2.771 1.474 6.786 6.963 7.67 10.488 1.278 5.092-.617 11.274-4.712 15.369-3.794 3.794-8.928 5.403-8.928 2.799zm-48.094-50.591c-2.476-5.776-2.163-7.867 1.125-7.518 6.38.678 8.246.387 13.961-2.178 6.782-3.043 10.979-3.135 26.508-.577 7.582 1.25 8.255 1.206 12.877-.844 2.683-1.19 5.771-2.163 6.864-2.163 2.183 0 2.163.452-.489 10.937-1.534 6.066-2.658 6.942-5.949 4.638-2.887-2.022-6.144-1.992-11.641.107-3.728 1.424-5.388 1.514-10.804.587-3.712-.636-7.755-.753-9.628-.28-1.777.45-7.192 1.066-12.035 1.37l-8.804.551-1.985-4.63zm38.594-13.348c-3.918-2.51-14.812-2.614-21.59-.206-3.998 1.42-5.085 1.493-6.134.417-1.04-1.066-.667-1.82 2.016-4.083l3.291-2.775-2.541-1.666c-2.534-1.66-3.32-4.02-1.677-5.036.476-.294 3.365-.01 6.42.631 5.373 1.127 8.921.833 22.965-1.905 4.143-.808 3.798 3.098-.47 5.305l-3.22 1.664 2.256 1.611c5.972 4.267 6.5 4.846 5.882 6.455-.823 2.144-3.441 1.994-7.198-.412zm-50.004 146.148c1.577-.615 1.052-.92-2.5-1.455-2.473-.371-8.091-2.239-12.486-4.15-4.394-1.911-8.332-3.475-8.75-3.475-.418 0-.76 1.313-.76 2.917 0 2.945.8 3.46 10 6.44 2.378.77 12.3.58 14.496-.277zm7.965-9.518c4.64-1.396 9.539-4.924 9.539-6.868 0-.587-1.642-.643-4.25-.143-5.619 1.077-25.232 1.164-30.105.134-5.872-1.241-4.287 1.19 3.3 5.065 7.235 3.694 13.506 4.222 21.516 1.812zm271.084-11.016c4.459-4.459 2.761-11.023-3.137-12.13-4.425-.83-7.868.865-9.433 4.644-1.502 3.627-.5 6.588 2.844 8.404 3.934 2.136 6.957 1.85 9.726-.918zM47.686 1121.25c5.6-8.098 15.09-24.307 16.354-27.935.975-2.796.354-4.467-7.466-20.11-4.69-9.382-9.017-17.361-9.615-17.73-.597-.369-1.988.147-3.092 1.146-1.733 1.568-9.662 14.233-14.995 23.952a200.488 200.488 0 0 1-3.775 6.5c-1.15 1.885-2.091 4.256-2.093 5.27-.005 2.568 18.07 34.657 19.523 34.657.65 0 2.972-2.587 5.16-5.75zm-11.597-17.44c-2.781-5.12-5.065-10.483-5.073-11.917-.022-3.599 11.565-21.122 13.691-20.706.879.172 3.78 4.12 6.446 8.772 6.414 11.194 6.377 13.193-.445 24.09-7.288 11.638-8.174 11.623-14.619-.24zm115.526 20.425c1.605-1.057 2.639-4.96 1.5-5.663-.53-.329-2.124-.07-3.54.576-2.69 1.225-3.48 4.32-1.325 5.19 1.798.725 2.123.715 3.365-.103zm14.806-7.816c3.651-1.59.973-1.9-3.086-.356-3.215 1.222-4.311 2.612-4.288 5.437.014 1.734.3 1.618 2.156-.87 1.176-1.579 3.524-3.474 5.218-4.211zm9.94 5.081c-.316-.825-.752-1.5-.968-1.5-.216 0-.393.675-.393 1.5s.436 1.5.969 1.5c.532 0 .71-.675.393-1.5zm10.198.019c1.68-1.282 1.74-1.616.441-2.485-3.348-2.24-6.527-.887-4.93 2.097 1.208 2.256 1.955 2.321 4.489.388zM175 1118.535c0-.256-1.012-.955-2.25-1.555-2.16-1.047-2.173-1.029-.309.465 2.04 1.634 2.559 1.855 2.559 1.09zm169.623-56.087c-1.034-8.795-12.199-65.952-13.2-67.571-.621-1.006-5.179-1.646-6.39-.897-.772.476-.359 4.513 1.39 13.599 1.368 7.107 3.156 16.838 3.974 21.626 1.638 9.591 12.346 38.795 14.225 38.795.36 0 .36-2.498 0-5.551zm-278.392-5.495c5.35-1.486 8.769-6.326 8.769-12.415 0-4.211-.457-5.23-3.882-8.656-3.518-3.517-4.373-3.882-9.1-3.882-4.6 0-5.62.402-8.618 3.4-2.934 2.934-3.4 4.065-3.396 8.25.004 5.977 2.799 10.926 7.266 12.867 3.944 1.715 4.294 1.732 8.96.436zm-27.497-3.487c3.445-3.445 3.517-3.676 2.864-9.23-.81-6.892-2.655-9.944-7.144-11.82-9.197-3.843-18.454 1.81-18.454 11.269 0 8.843 4.552 13.205 13.85 13.275 4.816.036 5.703-.313 8.884-3.494zm314.277-.716c2.522-4.136 2.508-4.53-.652-19.086-7.948-36.606-7.759-35.91-9.948-36.714-3.83-1.405-4.432.064-2.905 7.079 2.815 12.922 9.494 48.113 9.494 50.017 0 2.933 1.784 2.357 4.011-1.296zm9.743-17c2.82-5.322 2.791-8.523-.195-22.202-1.586-7.266-2.988-11.389-4.166-12.25-1.935-1.415-6.013-1.748-6.712-.548-.848 1.454 7.08 39.25 8.233 39.25.324 0 1.602-1.913 2.84-4.25zm-311.786-30.816c1.614-13.989 3.646-31.059 4.514-37.934.868-6.875 3.158-27.125 5.089-45 1.93-17.875 4.006-36.325 4.613-41 1.478-11.387.013-18.67-4.838-24.039-8.08-8.943-23.154-8.92-30.7.048-5.275 6.269-5.314 7.75-1.173 44.727 2.08 18.57 3.881 34.439 4.003 35.264 1.102 7.493 2.636 19.66 4.476 35.5 2.97 25.572 6.204 51.285 6.73 53.5.97 4.08 2.412 6.306 3.427 5.291.508-.508 2.244-12.369 3.859-26.357zm-8.35-18.684c-.285-.963-1.253-8.275-2.152-16.25-.898-7.975-2.293-19.225-3.1-25-.806-5.775-1.871-15-2.366-20.5-.496-5.5-1.375-12.925-1.953-16.5-1.34-8.27-2.556-37.837-1.698-41.256 1.516-6.04 9.735-12.32 14.493-11.075 3.267.854 2.65 2.398-2.935 7.331-4.124 3.644-5.257 5.356-5.955 9-1.036 5.407.868 32.195 4.976 70 3.859 35.507 4.455 46 2.613 46-.774 0-1.64-.787-1.924-1.75zm280.792 32.5c-2.32-12.383-5.61-25.196-6.786-26.421-.618-.645-2.024-1.32-3.124-1.5-1.717-.283-1.965.166-1.755 3.171.306 4.383 4.188 20.819 5.55 23.5 1.555 3.06 5.848 8.5 6.708 8.5.42 0 .154-3.263-.593-7.25zm51.527-4.238c1.89-3.56 3.172-6.736 2.849-7.06-.324-.324-2.679-1.217-5.232-1.986-5.828-1.754-6.326-.893-4.531 7.834 2.03 9.866 2.293 9.913 6.914 1.212zm-68.572-14.76c-2.073-8.885-3.53-10.752-8.388-10.752-3.797 0-3.977.143-3.977 3.16 0 2.525 1.193 4.353 5.938 9.098 3.265 3.265 6.375 5.667 6.91 5.336.613-.38.435-2.908-.483-6.843zm83.142-8.767c2.24-4.967 2.357-4.858-8.996-8.393-26.142-8.14-51.566-14.158-70.011-16.573-4.95-.648-11.925-1.618-15.5-2.156-7.86-1.182-64.661-2.416-68.369-1.485-4.7 1.18-2.814 2.416 7.119 4.669 5.362 1.215 13.125 3.439 17.25 4.94 6.299 2.293 9.822 2.842 22 3.427 26.847 1.292 32.066 1.85 53.3 5.705 13.567 2.463 39.682 9.124 50.2 12.804 4.952 1.733 8.598 2.494 9.57 1.999.865-.44 2.41-2.662 3.437-4.937zM287 989.5c0-.825-.73-1.5-1.622-1.5-1.33 0-1.398.271-.378 1.5.685.825 1.415 1.5 1.622 1.5.208 0 .378-.675.378-1.5zm108.443-9.723c2.677-3.821 1.95-5.68-3.065-7.83-4.984-2.136-5.202-3.042-2.466-10.223 1.477-3.876 3.526-4.33 9.851-2.18l5.487 1.866 1.922-2.374c3.926-4.849 2.521-6.132-12.172-11.112-35.288-11.96-66.473-18.658-109-23.412-15.76-1.762-56.902-2.036-73.5-.49-28.685 2.672-33.992 3.344-48 6.085-18.637 3.647-25.5 5.587-25.5 7.207 0 .693 2.297 2.974 5.105 5.07 5.417 4.045 5.193 4.021 15.243 1.587 2.667-.646 5.192-.791 5.612-.323.42.469 1.231 2.777 1.803 5.13.823 3.39.748 4.568-.362 5.678-2.246 2.246-1.641 4.232 1.967 6.462 4.05 2.504 9.121 2.647 23.708.668 27.423-3.718 67-4.4 98.588-1.697 25.422 2.175 62.165 9.784 88.836 18.395 13.201 4.263 13.954 4.333 15.943 1.493zm-28.404-15.719c-6.907-2.25-7.729-3.523-6.08-9.413 1.841-6.574 2.53-6.865 10.58-4.465 9.768 2.91 10.2 3.46 7.853 10.005-2.232 6.228-3.707 6.69-12.353 3.873zm-27.539-6.56c-.55-.214-2.97-.897-5.38-1.517l-4.378-1.128.666-5.676c.943-8.029 1.561-8.412 10.592-6.564 10.025 2.05 10.556 2.656 8.296 9.47-1.693 5.106-1.997 5.428-5.296 5.612-1.925.107-3.95.019-4.5-.196zm-160.25-5.635c-1.854-1.874-1.64-11.776.27-12.509.836-.32 4.746-.644 8.688-.719l7.169-.135.852 4c1.052 4.935.32 8.21-1.981 8.861-4.946 1.4-13.815 1.697-14.998.502zM306 951.63c-8.755-1.523-9.278-1.954-8.498-6.984 1.293-8.327.882-7.993 8.982-7.308 3.994.338 8.501 1.085 10.015 1.66 2.656 1.01 2.728 1.23 2.062 6.25-1.095 8.254-1.278 8.347-12.561 6.382zm-97.333-3.298c-.367-.366-.667-3.058-.667-5.98 0-4.954.187-5.365 2.75-6.046 1.512-.402 5.45-.748 8.75-.769l6-.038.305 5.907c.208 4.05-.106 6.168-1 6.735-1.555.986-15.182 1.148-16.138.191zm61.583-.019c-2.052-.413-2.25-1.017-2.25-6.864 0-7.576.561-7.918 11-6.705l6.5.755v13l-6.5.134c-3.575.074-7.513-.07-8.75-.32zm-31.821-1.64c-.299-.776-.405-3.834-.236-6.793l.307-5.381 7.094-.29c8.592-.353 9.308.304 8.5 7.79l-.594 5.5-7.264.294c-5.54.224-7.394-.041-7.807-1.12zm-49.956 23.127c5.16-2.507 5.769-3.806 1.777-3.79-5.33.021-10.25 1.255-10.25 2.57 0 1.03 2.392 3.207 3.723 3.389.123.016 2.26-.96 4.75-2.17zm234.032-32.75c-.652-6.495-.54-7.1 1.707-9.25 1.323-1.266 3.125-2.751 4.003-3.301 2.622-1.64 3.034-4.97.937-7.56-2.703-3.34-8.337-3.21-11.818.271-4.824 4.825-4.152 17.286 1.281 23.744 3.937 4.678 4.677 3.935 3.89-3.904zM395 941.177c0-.452-3.712-4.39-8.25-8.75-7.888-7.581-12.218-11.519-27.408-24.927-3.739-3.3-10.636-9.6-15.327-14-4.691-4.4-17.073-15.65-27.515-25-10.443-9.35-21.914-19.71-25.493-23.024A1081.107 1081.107 0 0 0 279 834.545c-3.025-2.7-8.65-7.864-12.5-11.476-3.85-3.613-11.313-10.394-16.585-15.069-5.272-4.675-14.96-13.45-21.528-19.5-20.618-18.992-23.472-21.5-24.464-21.5-1.427 0-2.438 2.891-6.993 20C188.311 819.374 163 921.773 163 924.27c0 2.289-1.596 2.357 26.5-1.138 31.65-3.937 40.247-4.438 66.5-3.873 47.118 1.015 78.455 5.825 124.5 19.111 13.043 3.764 14.5 4.046 14.5 2.807zm-55.5-23.83c-12.948-2.624-25.889-4.308-45-5.855l-28-2.265c-11.186-.904-54.873.23-67.568 1.754-19.603 2.353-21.84 2.423-22.5.703-.661-1.724 1.767-11.705 17.559-72.184 1.005-3.85 4.156-16 7.002-27 5.334-20.613 6.695-24.589 8.64-25.22.622-.203 6.022 4.28 12 9.962 12.738 12.108 40.598 37.722 50.177 46.132 3.68 3.23 11.865 10.673 18.19 16.538 6.325 5.866 15.55 14.227 20.5 18.58 4.95 4.354 10.129 9.062 11.508 10.462 1.38 1.4 8.917 8.34 16.75 15.423 7.833 7.082 14.242 13.27 14.242 13.75 0 1.205-5.187.906-13.5-.78zm-1.5-6.808c0-.804-1.012-2.423-2.25-3.598-4.092-3.885-27.931-25.412-49.25-44.473-11.55-10.326-21.9-19.762-23-20.97-1.1-1.206-8.214-7.774-15.809-14.596a6121.275 6121.275 0 0 1-24.5-22.133c-5.88-5.353-11.238-9.74-11.906-9.75-1.91-.03-2.67 2.171-8.28 23.981-2.902 11.275-8.08 31.3-11.507 44.5-11.362 43.76-11.045 42.353-9.813 43.585.849.849 4.033.858 12.477.038 6.236-.605 25.513-1.379 42.838-1.718 33.31-.653 55.344.517 85 4.514 7.425 1.001 14.063 1.879 14.75 1.95.688.072 1.25-.526 1.25-1.33zm-64-17.34c-22.146-1.27-30.76-1.327-52.43-.341-27.673 1.258-28.295 1.178-26.542-3.433.47-1.233 3.388-12.295 6.487-24.583 3.1-12.288 6.91-27.067 8.47-32.842a4949.01 4949.01 0 0 0 3.964-14.75c.778-2.929 1.66-4.24 2.84-4.22.94.015 5.761 3.886 10.711 8.6 4.95 4.714 13.725 12.865 19.5 18.114 5.775 5.248 14.55 13.234 19.5 17.747 4.95 4.512 14.4 13.038 21 18.946 6.6 5.908 13.25 12.073 14.78 13.7 2.878 3.066 2.842 4.966-.089 4.723-.93-.077-13.616-.824-28.191-1.66zM225 881.5c4.5-3.575 8.539-6.5 8.973-6.5 1 0 10.694 3.71 23.362 8.94 7.705 3.18 11.116 4.06 15.75 4.06 3.253 0 5.915-.383 5.915-.851 0-1.12-45.155-19.149-47.96-19.149-1.852 0-15.38 11.517-19.758 16.82-1.674 2.028-.701 3.18 2.685 3.18 2.001 0 5.286-1.936 11.033-6.5zm23.698 4.912c.42-1.267-11.154-6.42-14.413-6.415-2.557.003-9.561 5.747-8.703 7.136.818 1.323 22.664.642 23.116-.72zm-40.198-5.024c11.48-10.518 20.003-17.476 22.028-17.984 1.273-.32 5.813.956 11.065 3.11 7.474 3.063 22.852 9.068 38.407 14.997 4.042 1.54 6.036.45 3.908-2.137-1.719-2.09-8.646-5.273-33.717-15.499-10.62-4.331-20.422-7.875-21.781-7.875-3.712 0-24.77 18.942-26.857 24.158-2.905 7.261-.166 7.746 6.947 1.23zm8.517-22.872c5.278-4.657 9.355-7.49 10.792-7.5 1.27-.01 9.226 2.914 17.68 6.495 16.051 6.8 21.511 8.495 21.511 6.681 0-2.21-8.862-8.185-15.912-10.728-4.04-1.457-10.926-4.183-15.305-6.057-4.378-1.874-8.847-3.407-9.931-3.407-2.506 0-18.58 13.463-19.307 16.171-.3 1.118-.802 2.887-1.113 3.93-1.17 3.92 3.201 1.812 11.585-5.585zM218 843.5c5.245-5.344 6.746-5.502 15.805-1.662 10.486 4.446 13.728 4.902 11.43 1.61-2.372-3.4-18.236-11.448-22.564-11.448-2.623 0-9.63 6.44-11.156 10.254-2.855 7.136.14 7.711 6.485 1.246zm.5-14.5c.34-.55 1.73-1 3.09-1 3.515 0 4.29-2.869 1.407-5.203-3.425-2.774-6.084-1.943-7.57 2.368-.695 2.016-1 3.928-.679 4.25.922.922 3.073.683 3.752-.415zm221.106 108.523c3.094-2.028 3.052-5.046-.099-7.11-4.922-3.225-11.503 1.483-10.067 7.202.596 2.378 1.001 2.575 4.216 2.053 1.955-.317 4.633-1.283 5.95-2.145zm-27.886-10.3c-.224-8.953-.15-9.202 4.7-15.745 1.31-1.767-1.05-6.943-3.85-8.44-1.886-1.01-2.857-.94-5.417.383-5.907 3.054-7.507 9.656-4.663 19.234 1.522 5.125 6.75 13.345 8.487 13.345.562 0 .872-3.658.743-8.777zm-275.793 4.364c1.532-1.846-.9-7.967-3.777-9.507-2.859-1.53-6.69-1.338-8.14.407-2.26 2.725-.398 5.974 4.71 8.216 5.944 2.609 5.792 2.59 7.207.884zm7.877-9.933c-.54-6.526-4.402-14.654-7.861-16.548-2.193-1.2-2.976-1.2-5.5.006-5.284 2.525-4.267 8.109 1.716 9.423 1.92.421 3.461 1.63 4.229 3.314 4.731 10.384 8.106 12.116 7.416 3.805zm255.176-.904c-.011-.688-.437-4.13-.946-7.651-1.66-11.491 1.34-20.43 7.527-22.416 6.49-2.084 8.155-6.232 4.413-10.989-2.636-3.351-5.015-4.031-9.675-2.765-2.888.785-4.558 2.176-6.965 5.802-3.735 5.626-4.46 8.629-4.5 18.612-.03 7.555 1.284 11.903 5.412 17.907 1.943 2.827 4.77 3.722 4.734 1.5zm102.636-3.663c8.139-3.696 13.338-14.399 11.397-23.46-2.142-9.995-7.586-14.386-16.577-13.373-8.92 1.006-10.328 6.746-1.654 6.746 3.997 0 5.29.48 7.402 2.75 3.414 3.67 4.183 7.436 2.394 11.718-2.625 6.281-8.01 10.08-12.897 9.096-1.2-.241-3.43-.703-4.956-1.027-4.469-.947-10.592-7.288-13.738-14.226-3.561-7.855-8.344-26.426-10.381-40.311-2.827-19.265-7.026-32.389-15.228-47.589-4.751-8.806-5.663-9.81-12.39-13.645-10.516-5.994-25.92-7.733-39.269-4.435-12.221 3.02-21.396 4.169-33.219 4.16-11.14-.01-12.416-.214-17.794-2.846-14.885-7.284-21.9-23.35-15.746-36.061 1.234-2.551 3.661-5.71 5.392-7.019 3.877-2.932 10.882-4.892 14.58-4.08 2.866.63 7.985 5.371 9.965 9.231 1.598 3.115.3 9.896-2.54 13.271-2.739 3.255-2.947 4.573-.848 5.378 2.792 1.072 6.39-1.246 8.571-5.522 1.779-3.487 2.07-5.376 1.647-10.66-.565-7.035-2.032-9.686-8.057-14.562-2.946-2.385-4.913-3.083-9.651-3.426-8.382-.606-12.296.37-17.544 4.376-2.513 1.918-4.934 3.263-5.38 2.988-.937-.58-2.475-7.894-4.636-22.059-1.924-12.61-5.78-21.174-12.76-28.33-8.13-8.333-11.34-9.67-23.199-9.665-9.176.004-11.004.354-22.186 4.25-6.703 2.335-13.813 4.245-15.8 4.245-7.098 0-13.978-5.797-15.083-12.707-.606-3.79-.372-4.506 2.371-7.25 3.978-3.977 6.687-3.853 10.664.49 2.828 3.087 3.395 3.339 4.506 2 3.046-3.67-3.414-10.533-9.913-10.533-4.078 0-10.957 4.265-12.657 7.848-2.658 5.602-1.398 13.23 3.09 18.708 5.575 6.802 13.807 8.675 25.758 5.859 2.319-.547 2.75-.326 2.75 1.41 0 1.131-.512 2.374-1.138 2.76-.788.487-.965 3.612-.575 10.147.686 11.5 2.785 15.356 10.7 19.664 4.774 2.599 5.885 2.812 11.786 2.26 7.516-.701 9.45-2.053 11.823-8.267 1.372-3.593 1.439-4.642.378-5.92-1.13-1.362-1.805-.97-5.434 3.155-3.839 4.362-4.493 4.71-8.864 4.71-3.846 0-5.285-.54-7.783-2.917-4.533-4.314-5.279-6.262-5.077-13.257.148-5.132.707-7.076 2.934-10.208 4.187-5.89 10.578-8.952 18.685-8.952 7.643 0 10.537 1.228 15.709 6.668 8.874 9.333 12.65 22.351 16.922 58.332 2.295 19.328 5.049 26.268 13.363 33.679 6.082 5.42 13.673 8.421 26.146 10.335 6.629 1.017 8.538.919 23.925-1.234 2.518-.353 2.411 1.594-.537 9.72-5.091 14.035 1.29 29.56 14.992 36.477 3.095 1.563 10.753 4.31 17.018 6.104 13.738 3.935 18.572 6.507 24.382 12.97 5.213 5.797 6.395 9.273 4.185 12.311-.854 1.176-2.236 3.087-3.07 4.247-2.321 3.23-.908 5.391 3.526 5.391 5.394 0 8.086-2.55 8.731-8.272 1.092-9.688-7.313-20.291-23.07-29.103-3.661-2.048-6.657-4.365-6.657-5.15 0-.786 1.089-2.142 2.419-3.014 2.806-1.839 6.581-9.285 6.581-12.982 0-4.327-2.734-9.68-4.731-9.265-1.18.245-1.683 1.141-1.51 2.69.141 1.277-.208 4.05-.777 6.163-4.053 15.05-24.38 17.338-33.114 3.727-3.73-5.814-4.834-13.338-2.84-19.376 1.783-5.406 9.067-12.781 15.258-15.452 9.567-4.126 22.928-2.756 30.308 3.109 11.282 8.966 17.7 25.612 23.405 60.714 4.062 24.987 6.296 33.313 11.194 41.711 4.834 8.29 7.26 11.138 11.307 13.274 6.564 3.465 17.064 4.061 23.116 1.313zm-352.815-4.88c.56-9.55-6.3-26.711-12.086-30.24C130.835 878.383 125 880.392 125 886c0 3.436 2.557 5.731 7.539 6.767 5.73 1.19 8.593 6.024 12.462 21.048 1.475 5.729 3.418 4.907 3.8-1.608zm550.47-2.06c3.1-3.056 3.883-4.65 4.39-8.925.537-4.542.278-5.716-2.037-9.214-1.886-2.85-3.355-4.008-5.081-4.008-3.093 0-5.543 3.451-5.543 7.806 0 4.322-2.193 3.794-3.123-.751-.37-1.813-1.643-4.254-2.829-5.426l-2.155-2.129-3.446 3.735c-2.984 3.234-3.447 4.416-3.447 8.8 0 5.736 1.99 10.354 5.202 12.073 7.184 3.845 12.803 3.235 18.07-1.96zM385 909.658c0-.19-.916-3.002-2.036-6.25-3.068-8.9-2.895-11.964.872-15.404 3.855-3.521 4.013-6.19.53-8.93-4.279-3.366-8.55-2.37-11.203 2.611-2.856 5.363-.072 17.726 5.443 24.169 1.952 2.28 4.19 4.147 4.972 4.147s1.422-.155 1.422-.343zM151.775 890.03c-.507-8.368-3.82-17.448-6.982-19.141-2.895-1.55-6.793 1.34-6.793 5.035 0 2.2.783 3.34 3.322 4.838 2.805 1.655 3.752 3.263 6.092 10.344 1.524 4.612 3.057 8.837 3.405 9.39 1.056 1.672 1.438-2.515.956-10.466zm-51.113-7.296c11.573-11.85 13.29-14.068 16.083-20.777 1.72-4.13 3.424-9.75 3.787-12.486.88-6.631-1.536-20.186-6.053-33.97-3.384-10.327-3.541-11.367-2.565-17 1.368-7.899 5.001-11.501 11.602-11.501 5.44 0 5.87-1.656 1.407-5.411-3.436-2.891-3.961-2.961-8.923-1.182-2.996 1.075-3.872 2.179-6.085 7.674-3.142 7.804-5.047 8.545-7.326 2.85-8.494-21.228-4.689-43.549 8.611-50.516 8.628-4.52 19.678.986 21.305 10.614.783 4.633 3.151 5.344 4.069 1.221a127.2 127.2 0 0 1 1.089-4.508c.717-2.644-4.106-12.331-7.126-14.31-4.207-2.756-11.127-2.938-18.404-.481-3.501 1.182-6.61 1.906-6.906 1.61-.297-.298-.629-4.258-.737-8.8-.319-13.333-5.044-20.627-12.463-19.24-6.781 1.266-7.72 4.002-2.01 5.862 4.129 1.346 7.947 7.4 7.956 12.617.003 1.925-1.6 9.125-3.565 16-4.016 14.06-5.242 26.229-3.553 35.247 1.096 5.854 2.609 9.882 12.678 33.753 3.131 7.425 5.92 14.513 6.197 15.75.63 2.82-1.068 2.916-4.457.25-3.209-2.524-12.71-2.784-16.056-.44-4.177 2.926-6.313 9.159-4.254 12.414.756 1.195 1.667.676 4.83-2.75C93.13 831.61 94.273 831 97.7 831c4.745 0 9.732 3.032 13.027 7.922 3.39 5.029 3.161 13.7-.568 21.578-2.971 6.278-12.042 17.057-22.432 26.658-5.308 4.905-5.948 5.87-4.802 7.25.726.876 2.1 1.592 3.05 1.592.952 0 7.561-5.97 14.688-13.266zM369 886.106c0-7.379.153-7.912 3-10.448 3.361-2.995 3.733-5.167 1.443-8.435-1.15-1.644-2.561-2.223-5.41-2.223-8.229 0-11.706 10.508-6.949 21 2.295 5.063 5.774 9.206 7.061 8.41.47-.29.855-4.027.855-8.304zm173.48-.652c2.36-2.16 3.555-4.073 3.346-5.35-.18-1.094-12.926-14.013-28.326-28.708-15.4-14.696-29.828-29.067-32.062-31.936-18.685-23.996-23.218-58.892-11.38-87.6 6.496-15.754 17.649-28.172 37.998-42.312 13.084-9.09 27.68-22.89 48.814-46.148 19.602-21.572 22.225-24.695 40.228-47.9 14.81-19.087 17.251-22.517 26.696-37.5 5.948-9.435 7.16-11 8.517-11 .67 0 4.136 2.362 7.702 5.25 6.56 5.312 17.085 13.393 33.487 25.711 22.8 17.123 64.301 43.068 68.799 43.01 3.207-.04 14.201-6.212 14.201-7.971 0-.825-3.6-3.606-8-6.18-38.021-22.246-75.827-48.25-105.505-72.57-6.208-5.088-12.052-9.25-12.985-9.25-1.07 0-6.254 6.563-14.021 17.75-15.229 21.933-24.277 34.305-29.489 40.32-2.2 2.54-6.68 8.353-9.954 12.92-17.584 24.521-61.608 69.42-78.655 80.219-1.435.909-4.66 3.371-7.165 5.472-2.505 2.1-6.396 5.31-8.648 7.132-9.174 7.425-21.498 26.434-27.532 42.469-5.22 13.87-7.321 38.304-4.62 53.718 1.863 10.628 8.596 28.018 14.085 36.379 2.572 3.916 8.01 10.775 12.083 15.242 7.73 8.476 46.033 45.992 51.63 50.569 3.853 3.152 5.755 2.845 10.756-1.736zm126.558-1.704c3.448-1.739 4.534-2.88 4.78-5.024.288-2.496-.238-3.03-5.26-5.328-5.767-2.64-6.455-4.398-1.721-4.398 3.243 0 7.163-2.52 7.163-4.604 0-.82-1.19-2.595-2.646-3.944-2.13-1.974-3.7-2.452-8.05-2.452-9.829 0-15.308 4.794-15.297 13.385.008 6.044 2.339 10.183 7.193 12.772 4.483 2.39 8.528 2.27 13.838-.407zm28.408-4.364c4.155-3.638 7.554-6.913 7.554-7.278 0-2.65-10.735-14.108-13.218-14.108-2.267 0-16.782 11.673-16.782 13.496 0 2.76 10.64 14.504 13.142 14.504.963 0 5.15-2.977 9.304-6.614zm27.76 4.007c8.464-4.376 8.825-18.355.604-23.367-4.376-2.668-10.299-2.565-15.31.267-7.09 4.007-5.329 8.343 3.919 9.652 5.542.785 5.585 2.646.077 3.4-8.256 1.132-10.31 3.62-6.951 8.416 2.929 4.181 11.245 4.95 17.661 1.632zm-568.474-2.643c-.613-4.09-6.22-19.428-7.796-21.328-1.442-1.737-4.118-1.84-5.736-.222-2.17 2.17-1.343 5.562 1.923 7.888 1.946 1.385 4.439 4.994 6.611 9.568 3.694 7.777 5.81 9.51 4.998 4.094zm199.888 0c-.333-1.788-.86-7.75-1.171-13.25-.668-11.838.177-14.136 6.213-16.875 6.72-3.05 8.065-8.052 3.415-12.702-6.092-6.092-14.217-2.664-17.367 7.327-3.331 10.569-1.138 27.063 4.806 36.134 2.519 3.844 4.872 3.48 4.104-.634zM344 873.537c0-.255-.856-2.634-1.901-5.287-1.046-2.653-2.213-7.311-2.592-10.35-.633-5.067-.464-5.797 2.026-8.757 4.791-5.694 3.08-11.143-3.5-11.143-5.905 0-7.547 2.608-7.468 11.86.076 8.81 2.579 15.616 7.682 20.89 2.708 2.798 5.753 4.273 5.753 2.787zm-184-4.853c0-19.268-11.384-35.83-21.066-30.649-1.32.707-1.934 2.097-1.934 4.378 0 3.938 1.195 5.091 6.209 5.994 2.457.443 4.39 1.627 5.731 3.51 1.68 2.36 5.853 11.97 8.393 19.333 1.125 3.258 2.667 1.774 2.667-2.566zM489 868c1.1-1.1 2-2.9 2-4 0-2.646-3.45-6-6.171-6-5.034 0-7.638 6.344-4.174 10.171 2.172 2.4 5.85 2.325 8.345-.171zm-324.607-11.582c1.114-2.903.544-6.848-2.228-15.418-2.186-6.756-3.285-8.758-5.358-9.757-6.653-3.206-9.35 4.25-2.867 7.928 2.43 1.378 3.415 3.174 5.62 10.25 2.664 8.54 3.677 10.009 4.833 6.997zM327 848.894c0-8.253.234-9.383 2.5-12.076 3.077-3.657 3.164-6.121.311-8.779-2.819-2.627-6.99-2.605-9.391.05-2.311 2.553-3.184 14.36-1.52 20.543 1.099 4.077 5.081 9.368 7.052 9.368.654 0 1.048-3.425 1.048-9.106zM687 855c1.333-1.333 2-3.333 2-6 0-5.234 1.318-5.075 3.413.412 2.577 6.747 5.818 6.91 9.153.46 5.52-10.675-5.164-22.212-17.496-18.89-4.51 1.214-8.53 6.064-9.644 11.637-1.042 5.213 4.884 14.381 9.297 14.381.702 0 2.177-.9 3.277-2zm-371.673-21.02c.233-14.31.993-16.252 7.119-18.206 2.513-.801 4.563-2.294 5.525-4.024 1.37-2.465 1.371-3.032.005-5.475-3.849-6.88-12.63-6.497-17.901.78l-2.872 3.965-1.037-2.975c-.666-1.91-1.956-3.205-3.602-3.618-9.033-2.267-12.69 6.487-8.61 20.608 1.666 5.764 6.715 12.965 9.091 12.965 1.714 0 1.96-.404 1.368-2.25-1.623-5.058-2.366-9.519-2.389-14.326-.02-4.12.44-5.511 2.443-7.393l2.467-2.317-.614 10.08c-.426 6.982-.212 11.52.695 14.76 1.353 4.83 5.52 10.768 7.17 10.218.516-.172 1.03-5.929 1.142-12.792zm-260.668 8.243c4.827-2.302 9.592-10.129 10.097-16.587 1.282-16.373-20.05-27.22-32.328-16.438-5.17 4.539-6.791 8.297-6.817 15.802-.034 10.277 4.687 16.802 13.82 19.098 4.01 1.008 10.981.15 15.228-1.875zm-19.458-8.26c-3.84-3.69-4.201-4.469-4.201-9.05 0-5.713 1.789-9.815 5.581-12.798 3.352-2.637 8.884-3.68 11.996-2.262 4.261 1.942 2.543 5.147-2.759 5.147-1.11 0-3.548 1.53-5.418 3.4-4.814 4.814-4.65 8.585.6 13.835 4.736 4.736 4.95 5.765 1.201 5.765-1.908 0-4.134-1.284-7-4.037zm132.782 8.787c-.066-4.726-3.245-19.516-4.75-22.104-1.424-2.447-2.617-3.213-5.367-3.447-4.553-.386-6.607 1.792-5.271 5.59.516 1.467 1.895 3.146 3.065 3.729 3.834 1.911 5.212 3.575 6.883 8.31 2.837 8.039 3.385 9.172 4.436 9.172.561 0 1.013-.563 1.004-1.25zM600 828.498c0-4.692.735-8.029 2.896-13.143 3.95-9.35 5.262-16.552 5.412-29.7.202-17.725-3.154-25.655-10.856-25.655-3.906 0-6.657 2.856-9.343 9.702-8.175 20.829-8.254 40.172-.23 56.055 2.908 5.755 5.316 8.562 8.121 9.465 3.178 1.024 4-.358 4-6.724zm-427.64-2.102c.943-6.885-.15-12-4.534-21.225-3.307-6.956-4.527-8.566-7.401-9.767-8.31-3.472-16.216 3.805-10.425 9.596 1.1 1.1 3.237 2.007 4.75 2.015 1.512.008 3.256.346 3.875.75 2.45 1.6 7.266 10.652 8.922 16.771.962 3.555 2.297 6.464 2.966 6.464.686 0 1.49-2.003 1.846-4.604zm512.975-1.028c3.249-.446 4.787-1.178 5.199-2.475.841-2.65-6.455-14.644-12.043-19.795-4.494-4.142-7.434-5.705-21.737-11.559-12.381-5.067-25.067-14.714-29.419-22.372-3.483-6.128-4.908-7.167-9.835-7.167-8.5 0-9.734 4.128-4.375 14.63 6.218 12.187 11.84 16.024 41.65 28.427 10.176 4.233 16.911 9.175 19.688 14.443 3.91 7.417 3.03 6.943 10.872 5.868zm-181.98-3c3.46-2.896 11.173-9.672 25.59-22.478a7151.787 7151.787 0 0 1 22.615-19.965c7.243-6.367 15.817-14.18 19.054-17.362 3.237-3.182 6.899-6.463 8.136-7.29 3.08-2.058 2.823-4.36-.876-7.836-4.576-4.3-6.826-9.906-6.852-17.073-.012-3.455-.675-7.387-1.516-9-3.071-5.889-1.187-13.93 4.358-18.596 2.103-1.77 3.136-3.537 3.136-5.366 0-4.639 4.335-10.715 9.476-13.283 2.908-1.452 5.025-3.315 5.649-4.97 1.32-3.502 6.31-8.588 11.875-12.103 7.036-4.443 13.07-5.24 33.748-4.459l18.248.69 5.252-4.888c3.415-3.179 5.427-5.938 5.752-7.889.426-2.556.944-3 3.5-3 2.833 0 3 .222 3 4 0 6.298 2.864 5.94 19.744-2.472C716.663 637.36 738 625.605 738 624.373c0-.635-4.807-3.96-10.683-7.387-25.75-15.021-49.19-31.348-80.317-55.946-4.125-3.26-8.4-5.949-9.5-5.976-1.245-.032-2.912 1.362-4.416 3.693-8.048 12.467-11.456 17.285-28.109 39.743-17.895 24.133-32.005 40.486-53.975 62.556-17.059 17.136-28.863 27.635-36.533 32.493-20.869 13.217-34.754 30.658-39.697 49.86-3.214 12.483-2.9 32.94.693 45.091 2.59 8.76 7.272 18.396 12.393 25.5 4.005 5.556 9.425 11 10.953 11 .771 0 2.817-1.185 4.547-2.632zm-6.642-11.989c-.392-.392-.713-1.755-.713-3.03 0-2.3-.025-2.305-3.51-.643-4.813 2.295-6.314.833-4.834-4.711 1.053-3.947 1.033-3.995-1.672-3.995-5.137 0-6.467-5.6-1.91-8.04 1.563-.836 2.432-.545 4.478 1.501 1.396 1.397 2.688 2.539 2.87 2.539.672 0 4.672-10.157 7.684-19.512 1.772-5.506 3.76-9.883 4.642-10.221 1.869-.718 4.252 2.254 4.252 5.302 0 3.341 2.046 4.52 5.003 2.884 3.142-1.739 6.688-1.838 7.294-.203.255.687.235 3.345-.045 5.906l-.508 4.655 4.878 1.378c3.706 1.047 4.878 1.848 4.878 3.335 0 1.562-1.612 2.481-8 4.56-8.282 2.693-19.91 8.151-20.948 9.832-.327.529.127 1.365 1.01 1.858 1.044.585 1.487 1.913 1.27 3.812-.258 2.267-.896 2.98-2.87 3.21-1.395.163-2.858-.025-3.25-.417zm39.369-34.78c-1.771-2.134-.395-5.482 2.558-6.223 3.2-.804 4.603.62 4.188 4.252-.256 2.239-.898 2.938-2.914 3.173-1.422.165-3.146-.376-3.832-1.202zm-8.965-5.958c-.845-1.018-.756-2.412.354-5.56 1.425-4.036 1.407-4.177-.456-3.586-4.812 1.527-8.455-5.119-4.087-7.456 2.6-1.392 4.961-.328 5.687 2.564.33 1.31.938 2.173 1.352 1.917 1.081-.668 6.748-12.512 11.015-23.02 4.14-10.197 6.265-11.51 9.18-5.67 2.3 4.604 2.156 4.558 6.838 2.17 2.307-1.177 4.825-1.897 5.597-1.601 1.802.691 1.786 4.265-.043 9.45-1.62 4.587-1.605 4.608 3.928 5.608 9.781 1.77 10.31 5.315 1.268 8.502-11.725 4.133-23.24 9.225-30.838 13.636-4.173 2.423-7.83 4.405-8.127 4.405-.297 0-1.048-.612-1.668-1.359zm-15.766-27.638c-.6-3-.786-3.105-4.414-2.492-3.075.52-3.973.29-4.781-1.22-1.158-2.164-.323-4.336 10.844-28.215 8.15-17.429 9.434-18.694 13.01-12.826 1.09 1.787 2.134 3.7 2.32 4.25.189.561 2.551-.04 5.4-1.374 2.785-1.304 5.56-2.065 6.167-1.69 1.508.932 1.384 4.517-.325 9.359-1.6 4.538-1.04 5.205 4.387 5.205 1.538 0 3.338.653 4.001 1.452 2.453 2.955.642 4.793-8.46 8.583-8.84 3.681-21.768 10.188-24.272 12.216-.996.807-.822 1.345.807 2.486 3.14 2.2 2.323 6.664-1.296 7.08-2.392.276-2.846-.102-3.388-2.814zm-14.336-13.484c-1.022-1.232-1.055-2.135-.152-4.117 1.33-2.92 4.744-3 6.53-.152 2.326 3.71-3.567 7.655-6.378 4.269zm76.327-43.12c-2.008-3.064-.918-5.71 2.565-6.226 4.449-.66 6.732 4.045 3.522 7.256-2.261 2.26-4.14 1.942-6.087-1.03zm-8.302-5.851c-1.446-1.742-.872-3.837 3.437-12.548 2.661-5.38 9.79-23.482 11.912-30.25 1.056-3.369 3.733-1.867 5.926 3.323 1.944 4.6 2.378 5.011 4.664 4.415 1.387-.362 3.871-.732 5.521-.823 2.85-.157 2.984.01 2.672 3.335-.84 8.965-1.025 8.476 3.328 8.767 7.124.474 8.659 1.107 8.315 3.426-.231 1.56-2.042 2.84-6.815 4.819-17.887 7.418-26.862 11.592-30.447 14.16-4.405 3.156-6.725 3.53-8.513 1.376zm-7.617-10.998c-1.226-4.888 4.326-7.517 6.97-3.3 1.506 2.403-.331 5.159-3.709 5.563-2.098.251-2.742-.196-3.26-2.263zm98.608-20.012c-.985-1.187-.08-3.777 4.806-13.75 3.311-6.758 7.681-17.35 9.711-23.538 3.01-9.176 4.047-11.25 5.623-11.25 2.046 0 4.829 5.185 4.829 9 0 2.868 2.251 3.438 5.976 1.512 1.736-.897 4.364-1.493 5.84-1.322 2.826.326 3.128 1.835 2.06 10.273-.361 2.846-.188 2.99 4.432 3.675 5.665.84 8.222 2.519 6.674 4.383-.573.691-5.641 3.126-11.262 5.41-5.621 2.285-12.47 5.307-15.22 6.716-23.066 11.818-21.524 11.234-23.469 8.89zm-4.985-9.983c-.66-.795-1.052-2.482-.873-3.75.259-1.822.956-2.305 3.327-2.305 2.42 0 3.067.472 3.345 2.444.212 1.502-.343 2.947-1.441 3.75-2.27 1.66-2.882 1.64-4.358-.139zm-21.552-17.204c-.915-.915-1.422-2.518-1.14-3.599.425-1.624.146-1.834-1.672-1.257-5.402 1.714-7.658 1.73-8.298.063-.372-.969 1.3-6.235 3.992-12.58 2.547-6.003 5.793-15.092 7.212-20.196 3.944-14.186 3.973-14.262 5.647-14.586 1.053-.205 2.432 1.52 4.196 5.25 1.445 3.054 3.177 5.544 3.848 5.532.672-.012 2.346-.903 3.721-1.978 3.31-2.59 6.686-2.564 7.518.058.36 1.132.348 4.282-.026 7l-.68 4.942 3.344.056c5.465.093 10.344 2.172 10.344 4.408 0 1.548-2.118 2.832-10 6.062-10.05 4.118-18.99 8.443-23.34 11.29l-2.342 1.533 2.591 1.357c1.627.853 2.591 2.201 2.591 3.626 0 4.422-4.353 6.172-7.506 3.019zm-17.11-14.793c-1.584-4.126 2.39-8.213 5.227-5.376 2.48 2.48 1.104 6.818-2.161 6.818-1.382 0-2.762-.649-3.066-1.442zM289 814.648c0-7.915.157-8.515 3-11.49 3.488-3.65 3.786-6.137 1.033-8.628-2.583-2.338-6.579-2.258-9.877.197-2.292 1.707-2.697 2.816-2.953 8.094-.163 3.364.186 7.91.776 10.102 1.07 3.971 5.377 10.077 7.11 10.077.501 0 .911-3.758.911-8.352zm78.95 5.912c.657-.791 1.05-2.704.872-4.25-.273-2.386-.834-2.859-3.717-3.134-2.042-.195-3.73.203-4.235 1-3.01 4.749 3.537 10.653 7.08 6.384zm-191.683-15.1c-.434-12.749-4.325-21.042-9.267-19.75-5.762 1.507-6.194 8.663-.68 11.29 2.642 1.26 3.503 2.624 5.363 8.5 1.219 3.85 2.239 7.15 2.267 7.333.027.184.613.136 1.3-.105.867-.304 1.179-2.529 1.017-7.267zm100.357-2.71c-.545-12.029.677-16.113 5.876-19.63 7.29-4.935 8.07-10.735 1.977-14.727-3.829-2.509-8.94-.94-12.88 3.953l-3.097 3.847.036 12.653c.033 11.293.29 13.138 2.385 17.154 2.26 4.331 3.709 5.952 5.35 5.985.425.008.583-4.148.353-9.235zm481.19-1.022c.418-2.17-10.551-23.311-18.02-34.728-3.058-4.675-7.862-11.18-10.677-14.457-2.814-3.276-5.117-6.345-5.117-6.82 0-.474 5.625-6.346 12.5-13.049 6.875-6.702 12.5-12.706 12.5-13.34 0-3.07-19.261-22.878-26.563-27.316-3.357-2.04-3.064-3.722 1.656-9.518 8.073-9.912 19.591-28.267 26.184-41.725 6.843-13.97 7.952-17.775 5.18-17.775-2.483 0-31.457 15.124-32.36 16.891-.453.885-1.112 3.503-1.465 5.817-1.202 7.874-7.643 25.76-13.305 36.946l-5.647 11.154 3.363 4.346c1.85 2.39 5.437 6.821 7.973 9.846 6.113 7.292 8.984 11.507 8.984 13.189 0 1.782-8.885 10.371-16.25 15.708-3.163 2.291-5.75 4.67-5.75 5.285 0 .615 2.191 4.538 4.87 8.718 5.876 9.172 13.042 23.32 16.14 31.867l2.27 6.267 15.11 7.428c8.31 4.085 15.78 7.335 16.599 7.222.818-.114 1.64-.994 1.825-1.956zm-491.278-.478c-1.562-4.028-3.536-12.897-3.536-15.883 0-1.969.968-4.365 2.5-6.185 3.119-3.706 3.23-7.557.277-9.625-4.674-3.274-10.117-.887-11.206 4.915-1.724 9.19 5.862 28.528 11.191 28.528.975 0 1.229-.575.774-1.75zM52 795.38c3.542-1.898 5.27-3.447 7.683-6.89 3.665-5.226 4.374-10.004 3.27-22.024-.554-6.031-1.428-19.291-1.942-29.466-1.59-31.483-5.6-72.799-7.258-74.797-1.678-2.023-6.768-4.411-8.215-3.856-1.37.526-2.608 11.052-4.544 38.653-.598 8.525-1.516 20.225-2.04 26-1.427 15.74-1.822 21.982-2.48 39.216-.656 17.16.087 20.72 5.153 24.705 4.545 3.576 2.278 6.077-3.166 3.494-2.235-1.061-4.38-3.22-5.76-5.803-1.976-3.692-2.19-5.49-2.09-17.612.062-7.425.86-21.15 1.774-30.5 1.772-18.13 3.973-41.051 5.665-59 .57-6.05 1.242-12.8 1.492-15 .416-3.663-.758-7.618-1.917-6.458-.944.943-10.087 81.874-11.01 97.458-.229 3.85-.988 10.711-1.688 15.247-1.456 9.437-.394 16.489 3.295 21.871 2.934 4.282 5.418 5.698 11.278 6.427 5.658.704 8.88.275 12.5-1.665zm128.992-4.63c-.186-9.755-.187-9.75 1.391-9.75 3.09 0 3.492-10.144.72-18.2-4.7-13.659-12.64-19.745-20.419-15.65-2.856 1.503-3.65 2.79-3.669 5.945-.023 3.986 3.167 6.29 7.71 5.569 2.076-.33 4.265-.277 4.865.118 2.621 1.727 7.317 9.664 8.408 14.208 1.621 6.76.762 8.377-1.798 3.383-2.973-5.801-8.153-7.292-11.704-3.369-1.512 1.672-1.62 2.427-.652 4.553.639 1.402 2.524 3.024 4.19 3.604 3.417 1.192 5.108 3.981 7.023 11.589.793 3.15 1.872 5.25 2.697 5.25 1.055 0 1.344-1.695 1.238-7.25zm70.618-10.66c-.1-8.98.101-10.134 2.14-12.314 3.921-4.191 2.719-7.867-3.046-9.314-3.498-.878-6.424 1.526-7.256 5.962-1.028 5.479 4.753 25.576 7.356 25.576.504 0 .867-4.46.806-9.91zm420.194 5.758c.657-7.869-4.907-15.524-13.581-18.686-3.216-1.173-6.91-3.264-8.209-4.647-1.424-1.515-3.466-2.515-5.14-2.515-5.094 0-13.001 2.167-13.6 3.728-.882 2.3 2.644 8.073 7.193 11.778 8.635 7.032 25.08 14.686 30.533 14.211 2.106-.183 2.548-.792 2.804-3.869zM241 779.062c0-.516-.712-4.003-1.582-7.75-1.575-6.783-1.319-14.812.637-19.956.475-1.25 2.675-3.198 4.889-4.327 5.593-2.854 6.76-9.181 2.483-13.46-3.328-3.327-11.217-.81-13.936 4.448-1.837 3.553-2.192 3.613-5.12.861-2.972-2.791-8.647-1.913-11.017 1.705-3.208 4.895.06 18.757 5.933 25.167 1.656 1.807 4.755 3.125 4.701 2-.007-.137-.676-2.725-1.488-5.75-1.797-6.697-1.853-9.75-.235-12.921 2.446-4.794 3.413-3.397 4.071 5.88.655 9.228 3.859 19.389 7.318 23.211 1.791 1.98 3.346 2.394 3.346.892zm145.316-3.212c2.841-1.495 3.546-2.66 2.962-4.896-.73-2.793-3.86-5.152-6.345-4.784-1.228.181-3.134 1.542-4.235 3.023-1.898 2.55-1.915 2.827-.327 5.25 1.808 2.76 4.478 3.232 7.945 1.407zM702 775.638c0-2.567-6.186-15.004-10.978-22.07-5.395-7.957-9.397-12.072-10.86-11.168-1.182.73-10.162 17.152-10.162 18.584 0 1.045 28.56 15.871 30.75 15.963.688.03 1.25-.56 1.25-1.309zm-255.571-9.21c1.895-1.895 2.037-4.796.305-6.233-.775-.644-6.7-.982-15.305-.873-11.093.14-14.48-.137-16.142-1.322-1.156-.825-10.091-8.925-19.857-18-9.765-9.075-23.194-21.41-29.842-27.41-15.3-13.81-32.97-30.183-46.796-43.362-5.927-5.65-11.934-10.712-13.35-11.25-3.622-1.377-7.736-1.215-9.933.392-1.743 1.274-1.114 2.098 9.059 11.862 6.013 5.77 14.524 13.591 18.915 17.38 4.39 3.788 11.14 9.848 15 13.465 3.86 3.617 11.292 10.388 16.517 15.048 5.225 4.659 11.075 9.898 13 11.642 1.925 1.744 7.775 6.882 13 11.418s13.325 11.805 18 16.153c12.328 11.465 11.452 11.077 26.451 11.73 7.177.313 14.48.65 16.228.75 1.774.102 3.873-.512 4.75-1.39zm219.469-9.05c5.504-6.253 13.661-23.17 15.624-32.403 3.798-17.868 3.59-36.403-.563-50.394-2.844-9.58-6.173-13.728-11.13-13.869-7.038-.2-8.463 3.846-4.802 13.632 8.889 23.756 5.492 52.387-8.72 73.507-4.915 7.305-3.88 14.149 2.143 14.149 2.766 0 4.12-.84 7.448-4.621zm-367.847-2.43c3.232-3.231 1.114-7.897-3.601-7.933-2.778-.02-4.45 1.853-4.45 4.985 0 5.016 4.38 6.62 8.051 2.949zm341.025-.507c8.81-2.861 16.87-14.658 23.53-34.441 2.878-8.548 2.662-29.115-.405-38.64-2.406-7.472-4.048-9.626-8.201-10.761-1.375-.376-10.6-.916-20.5-1.2l-18-.517-7.25 3.52c-6.796 3.3-8.758 5.548-6.214 7.12 1.16.717 8.737 1.979 23.158 3.857 8.184 1.065 10.01 1.64 11.717 3.691 1.112 1.337 2.037 3.217 2.056 4.18.045 2.38-4.867 2.318-13.112-.162-18.452-5.552-32.453-5.382-38.921.472-3.125 2.828-2.445 5.22 1.816 6.388 4.089 1.122 22.259 3.22 31.623 3.652 5.257.242 6.17.618 8.71 3.585 1.56 1.823 2.854 4.15 2.876 5.17.05 2.246-2.795 2.03-16.459-1.256-12.39-2.979-30.727-3.89-35.756-1.775-5.703 2.397-7.388 9.19-2.88 11.603.951.51 4.66.909 8.242.888 3.582-.02 8.96.652 11.953 1.494 2.993.842 9.778 2.497 15.08 3.677 7.045 1.57 10.24 2.788 11.876 4.53 2.584 2.75 2.052 5.484-1.067 5.484-2.38 0-15.212-3.136-24.803-6.061-8.566-2.613-16.084-2.562-19.51.134-1.45 1.14-2.635 2.732-2.635 3.54 0 2.74 3.868 9.064 7.49 12.243 5.708 5.013 17.262 10.477 23.51 11.12 9.047.929 27.158.063 32.076-1.535zm-436.32-5.417c6.926-3.143 10.793-6.7 14.167-13.03 4.426-8.306 6.077-15.527 6.077-26.587 0-11.988-2.156-20.792-7.415-30.274-4.636-8.362-9.046-12.004-17.61-14.548-4.418-1.312-6.456-1.42-10.597-.56-16.44 3.413-24.804 17.923-24.772 42.975.016 12.597 1.606 19.87 6.199 28.355 6.967 12.874 22.196 19.005 33.951 13.67zM185.5 739.06c-5.222-3.366-7.237-5.447-9.32-9.619-6.116-12.253-6.936-31.74-1.807-42.943 3.258-7.118 4.944-9.106 9.837-11.603 5.59-2.853 9.897-2.453 14.962 1.39 9.951 7.549 13.306 17.047 12.662 35.848-.331 9.674-.782 12.214-3.025 17.049-4.865 10.489-15.421 14.962-23.309 9.878zm14.045-9.514c3.162-3.161 3.11-6.571-.193-12.64-4.803-8.824-10.083-7.053-11.04 3.705-.447 5.022-.204 6.295 1.654 8.64 2.734 3.45 6.315 3.56 9.58.295zm-12.768-16.102c4.13-2.892 2.18-9.443-2.812-9.443-2.891 0-6.965 2.951-6.965 5.045 0 1.5 4.663 5.955 6.232 5.955.728 0 2.323-.7 3.545-1.557zm20.706-4.068c.986-.987 1.506-2.854 1.321-4.75-.293-3.014-.488-3.136-5.492-3.425-4.326-.25-5.364.028-6.246 1.677-1.058 1.977-.61 4.518 1.212 6.873 1.381 1.786 7.284 1.545 9.205-.375zm-11.526-12.284c3.76-8.025 1.324-15.091-5.2-15.091-6.872 0-8.522 5.668-4.293 14.75 1.943 4.174 2.93 5.25 4.82 5.25 1.864 0 2.868-1.054 4.673-4.91zM451.054 742.5c1.028-5.391.77-5.5-13.02-5.5H425.28l-4.015-3.25c-2.209-1.788-12.314-10.9-22.456-20.25a11271.23 11271.23 0 0 0-39.842-36.5l-21.402-19.5h-6.533c-5.277 0-6.533.303-6.533 1.574 0 1.424 10.12 10.954 53 49.917 31.012 28.178 34.856 31.617 38.319 34.283l3.603 2.775 15.53-.275 15.53-.274.572-3zm3.592-13.194c2.315-5.541.653-6.306-13.702-6.306-13.424 0-12.252.55-25.462-11.927-4.41-4.165-15.418-14.323-24.462-22.573-9.045-8.25-20.363-18.712-25.15-23.25-8.166-7.739-8.974-8.25-13.038-8.235-2.383.008-5.007.46-5.832 1.002-1.776 1.168.754 3.708 29.38 29.483 10.385 9.35 25.685 23.168 34 30.706 8.862 8.033 16.155 13.869 17.62 14.1 1.375.217 7.585.462 13.801.544l11.301.15 1.544-3.694zm240.344-3.8c7.111-4.558 7.917-5.908 5.864-9.822-2.004-3.817-8.989-11.684-10.375-11.684-.88 0-1.567 1.962-2.016 5.75-.374 3.163-1.3 8.45-2.057 11.75-.757 3.3-1.383 6.563-1.391 7.25-.027 2.256 2.858 1.318 9.975-3.243zM465.476 707.81c1.087-2.03 1.648-4.018 1.247-4.42-.402-.401-6.805-.824-14.23-.94-9.556-.148-14.053-.61-15.396-1.58-2.831-2.045-23.284-20.312-36.14-32.278-9.857-9.173-11.868-10.605-15.706-11.18-7.288-1.094-7.44.653-.677 7.815 3.26 3.45 11.376 11.224 18.037 17.274 6.661 6.05 16.678 15.175 22.26 20.277l10.149 9.278 14.24-.278 14.24-.277 1.976-3.69zm225.718-23.059c1.56-2.465 10.562-22.634 13.234-29.649.944-2.48 1.297-4.776.808-5.265-.988-.988-22.085 9.476-23.947 11.878-.734.946-.883 2.198-.378 3.174 1.01 1.953 4.39 12.02 5.999 17.862 1.324 4.808 2.237 5.234 4.284 2zM132.76 671.094c31.41-47.531 77.006-99.012 112.74-127.292 9.35-7.4 19.333-16.012 22.185-19.137 7.511-8.234 14.15-19.463 18.036-30.509 3.366-9.565 3.394-9.788 2.961-23.656-.5-16.07-3.34-28.065-9.407-39.728-4.143-7.965-14.561-19.772-17.446-19.772-1.146 0-9.661 6.704-20.007 15.75a14603.956 14603.956 0 0 1-50.687 44.145c-7.224 6.268-13.135 11.96-13.135 12.651 0 .691 1.548 2.17 3.44 3.286s4.7 3.933 6.239 6.259c2.557 3.864 2.823 5.141 3.08 14.819.155 5.824.385 12.898.511 15.72.218 4.866-.013 5.39-4.52 10.207-2.612 2.792-4.75 5.975-4.75 7.073 0 4.928-3.146 8.14-13.347 13.622-1.016.547-2.445 2.732-3.176 4.856-.73 2.124-2.793 5.374-4.584 7.222-1.79 1.848-3.023 3.593-2.739 3.878 1.341 1.34 21.78-7.634 31.821-13.973 2.192-1.383 4.396-2.515 4.898-2.515 1.48 0 2.197 3.001 1.174 4.912-1.087 2.032-13.356 34.081-14.771 38.588-1.415 4.505-4.447 4.003-6.045-1-.702-2.2-1.472-4.548-1.71-5.217-.33-.93-1.263-.871-3.945.25-6.553 2.738-7.576 2.198-7.576-3.998 0-6.07-1.334-7.535-6.863-7.535-3.238 0-6.137-2.213-6.137-4.685 0-1.245-.82-1.423-4.25-.923-2.337.34-11.842.201-21.122-.308-9.28-.51-17.38-.715-18-.455-.62.26-2.028 1.898-3.128 3.64-1.353 2.142-3.294 3.528-6 4.283-3.214.897-4.061 1.63-4.312 3.734-.362 3.04-3.546 4.492-5.78 2.637-1.012-.84-1.295-2.162-.873-4.082.527-2.4.306-2.841-1.427-2.841-2.812 0-11.212 3.822-25 11.374A1586.15 1586.15 0 0 1 36.5 604.48c-11.466 5.991-13.5 7.273-13.5 8.503 0 .406 2.813 2.236 6.25 4.068 21.932 11.682 62.29 38.745 83.165 55.767 10.348 8.438 11.759 9.283 13.329 7.98.735-.61 3.892-4.977 7.016-9.704zm-11.203-5.317c-.856-1.222-1.557-2.543-1.557-2.934 0-.392-.434-1.854-.964-3.249l-.964-2.535-5.084 2.637c-4.632 2.403-5.224 2.497-6.662 1.058-1.262-1.262-1.413-2.55-.752-6.416.455-2.661.85-5.275.877-5.81.027-.533-2.651-1.433-5.951-2-5.117-.877-6.048-1.364-6.324-3.312-.286-2.016 1.006-2.918 11-7.674 6.228-2.964 16.684-8.349 23.236-11.966 6.552-3.617 12.514-6.576 13.25-6.576 2.188 0 1.544 4.641-1.495 10.779-3.786 7.644-6.418 14.615-10.277 27.221-4.207 13.74-5.283 15.132-8.333 10.777zm21.014-30.348c-1.913-1.914-1.985-3.481-.265-5.833 2.057-2.813 6.12-1.745 6.516 1.714.563 4.91-3.067 7.302-6.25 4.119zm-59.706-6.179c-.601-1.512-1.502-3.807-2.002-5.098-.677-1.747-1.352-2.15-2.636-1.573-.95.427-3.302.808-5.227.848l-3.5.073-.299-5.148c-.294-5.066-.357-5.159-3.981-5.839-2.026-.38-4.479-1.116-5.452-1.637-2.276-1.218-2.288-4.77-.018-5.507 10.342-3.361 26.426-10.557 33.38-14.936 4.748-2.988 9.135-5.433 9.75-5.433 1.92 0 1.264 2.68-3.244 13.26-4.512 10.586-7.21 18.082-10.076 27.99-1.298 4.492-2.093 5.75-3.633 5.75-1.217 0-2.387-1.05-3.062-2.75zm41.335-8.45c-1.89-1.89-1.405-5.543.955-7.196 4.05-2.837 7.313 1.406 5.238 6.814-.715 1.864-4.479 2.096-6.193.382zm-20.629-17.371c-.864-.865-1.571-2.183-1.571-2.929 0-1.693 2.727-4.5 4.371-4.5 1.883 0 3.629 2.165 3.629 4.5 0 4.114-3.602 5.755-6.429 2.929zm93.475-30.874c-2.845-3.427 1.078-9.22 4.704-6.948 2.362 1.48 2.719 4.782.732 6.768-2.01 2.01-3.867 2.07-5.436.18zm-16.391-17.384c-3.42-3.78-.852-8.335 3.713-6.583 2.187.839 3.174 5.054 1.621 6.925-1.645 1.983-3.328 1.875-5.334-.342zm56.054-11.866c-.263-.443-.793-2.707-1.177-5.03l-.7-4.227-5.916.619c-6.494.678-6.33.849-5.957-6.229.157-2.97-.026-3.104-6.149-4.5-5.015-1.143-6.31-1.826-6.31-3.329 0-2.188.137-2.269 11.848-6.946 4.866-1.944 12.372-5.68 16.679-8.303l7.83-4.769-2.995-1.82c-3.335-2.03-3.614-5.282-.612-7.164 2.538-1.59 5.181.405 5.56 4.199l.31 3.104 3.35-1.597c1.841-.878 4.06-1.324 4.928-.99 1.8.69 1.553 1.587-3.316 12.002-1.657 3.544-4.622 10.884-6.59 16.31-6.12 16.886-7.005 18.84-8.679 19.163-.895.172-1.842-.05-2.104-.493zM258.2 512.8c-1.738-1.738-1.487-6.476.382-7.193 5.162-1.98 8.793 1.646 5.966 5.96-1.722 2.628-4.428 3.153-6.348 1.233zm-44.49-2.497c-.261-.442-.805-2.378-1.208-4.303-1.134-5.412-2.173-6.221-5.67-4.413-1.632.844-3.95 1.395-5.15 1.224-1.803-.257-2.11-.832-1.765-3.311 1.139-8.19.895-8.852-3.579-9.749-4.24-.85-6.96-2.937-5.951-4.568.307-.497 4.059-2.146 8.336-3.663 4.277-1.518 13.115-5.434 19.64-8.704 12.296-6.161 15.317-6.663 14.238-2.364-.495 1.972-.088 2.684 2.144 3.749 3.278 1.563 4.192 5.777 1.702 7.843-1.413 1.173-2.08 1.129-4.57-.3l-2.914-1.672-3.416 7.395c-1.878 4.067-4.175 9.788-5.103 12.714-.927 2.925-2.194 6.408-2.815 7.739-1.192 2.555-3.124 3.73-3.92 2.383zm40.075-40.053c-.838-.963-1.967-3.1-2.508-4.75-.727-2.217-1.48-2.888-2.88-2.57-1.044.237-3.247.462-4.897.5-2.83.066-3-.15-3-3.818 0-3.776-.137-3.928-4.75-5.28-3.45-1.011-4.75-1.898-4.75-3.24 0-2.4.655-2.835 12.5-8.274 5.5-2.525 13.564-6.231 17.919-8.236 5.559-2.558 8.234-3.33 8.975-2.588.741.741.702 1.623-.132 2.959-2.118 3.391-8.09 19.498-10.16 27.402-2.757 10.52-3.366 11.282-6.317 7.895zm-35.745-4.702c-1.725-2.079-.875-4.997 1.558-5.346 2.678-.385 4.75 2.127 3.917 4.75-.754 2.376-3.729 2.7-5.475.596zM271.2 446.8c-2.821-2.821-.07-7.528 3.7-6.331 1.1.348 2.283 1.532 2.631 2.63 1.197 3.77-3.51 6.522-6.331 3.701zm-16.16-16.252c-1.889-2.276-.838-5.011 2.054-5.349 3.133-.365 5.305 1.97 4.421 4.753-.766 2.416-4.667 2.775-6.475.596zM523.15 650.905c3.283-1.32 7.455-5.632 6.437-6.651-.415-.415-77.734-.886-171.82-1.048l-171.066-.295-2.851 2.732c-2.845 2.725-3.744 5.892-1.852 6.524.55.183 76.937.214 169.75.069 116.561-.183 169.57-.594 171.402-1.33zM23.1 605.317c11.382-5.905 15.03-8.278 15.762-10.25 8.11-21.878 14.121-35.456 20.432-46.154L62 544.326l-5.098-6.413c-2.805-3.527-6.549-7.988-8.321-9.913-3.947-4.286-6.58-8.443-6.58-10.388 0-2.493 4.824-7.35 13.076-13.166 4.358-3.07 7.924-5.964 7.924-6.428 0-.464-3.015-7.071-6.7-14.681-3.684-7.61-8.31-18.112-10.279-23.337l-3.58-9.5-7.47-3.84c-13.329-6.85-26.935-12.8-27.903-12.202-3.375 2.086 14.64 36.47 26.047 49.713 2.687 3.12 4.885 5.887 4.885 6.15 0 .263-2.963 3.336-6.585 6.829C22.66 505.593 14 516.268 14 518.616c0 1.95 13.725 15.981 22.25 22.748 2.668 2.117 4.75 4.6 4.75 5.664 0 1.042-2.053 4.415-4.563 7.496-6.34 7.783-15.72 23.374-24.234 40.276C4.822 609.455 3.74 613 6.644 613c.905 0 8.31-3.458 16.455-7.683zm553.527-13.748c1.856-2.146 3.374-4.277 3.374-4.736 0-1.113-12.67-1.174-189.947-.915-83.845.122-153.145.602-154 1.066-2.933 1.593-7.271 6.854-6.578 7.976.51.825 46.155 1.042 172.236.818l171.542-.306 3.373-3.903zM70.75 580.822c5.649-3.028 9.25-5.571 9.25-6.532 0-.866-.854-4.548-1.898-8.182-1.043-3.634-2.177-7.845-2.519-9.358-1-4.425-3.215-3.22-7.579 4.126C63.65 568.206 57 583.175 57 585.646c0 2.066 2.591 1.157 13.75-4.824zm654.67 1.428c.585-1.848 3.925-36.796 5.615-58.75.55-7.15 1.428-16.6 1.952-21 1.36-11.44 2.513-29.592 2.513-39.58 0-7.905-.226-8.876-2.866-12.335-3.807-4.989-7.915-7.351-14.13-8.128-3.684-.46-6.228-.181-9.03.99-5.735 2.395-7.29 4.215-9.372 10.968-1.984 6.432-1.834 14.35.835 44.085.543 6.05 1.474 18.2 2.07 27 1.394 20.62 2.895 38.854 3.646 44.318.498 3.618 1.229 4.737 4.511 6.91 2.794 1.848 4.225 2.283 4.992 1.516 1.3-1.3 2.506-12.889 3.302-31.744.325-7.7 1.013-19.4 1.529-26 .515-6.6 1.191-18.75 1.502-27 .311-8.25.823-17.152 1.137-19.782.99-8.3-.523-18.442-3.233-21.662-2.752-3.27-3.118-6.056-.797-6.056 2.897 0 7.15 3.909 8.836 8.12 2.155 5.387 1.786 12.367-4.938 93.38-.821 9.9-1.778 21.458-2.126 25.685-.348 4.226-.362 8.389-.031 9.25.808 2.106 3.394 1.989 4.083-.185zM384.6 578.836c.42-.678-.495-2.17-2.19-3.577-1.601-1.327-5.836-5.202-9.411-8.61-3.575-3.41-11-10.221-16.5-15.139-5.5-4.917-13.406-12.19-17.569-16.16-4.163-3.972-8.663-7.447-10-7.722-4.447-.917-23.096-1.567-27.525-.96-3.564.488-4.72 1.198-6.29 3.86-2.9 4.915-1.582 5.472 12.934 5.472 14.804 0 13.652-.567 30.45 14.99 13.953 12.922 29.28 26.277 31.844 27.745 2.754 1.578 13.298 1.653 14.257.101zM418 578.17c0-1.743-14.863-15.979-45.072-43.17a3488.902 3488.902 0 0 1-22.86-20.775l-10.083-9.276-15.706.276-15.705.275-1.522 2.715c-2.337 4.166-.68 4.879 12.396 5.327l11.708.402 8.75 7.778C344.72 526 353.607 534 359.656 539.5c48.473 44.075 43.884 40.5 51.983 40.5 5.498 0 6.362-.249 6.362-1.83zm19.71.215c.334-1.017-28.067-27.58-51.64-48.296-5.263-4.627-10.02-8.96-10.57-9.63-.55-.67-8.337-7.798-17.304-15.84L341.89 490h-29.814l-1.083 4.023c-.596 2.213-.812 4.463-.48 5 .348.563 6.72.977 15.035.977h14.431l20.76 18.663c11.418 10.265 24.585 22.366 29.26 26.892 4.675 4.525 15.025 14.14 23 21.365l14.5 13.137 4.921-.278c2.707-.154 5.087-.78 5.289-1.394zm28.203.22c.935-1.126-1.01-3.39-10.097-11.75-6.19-5.695-15.093-13.986-19.785-18.423-4.692-4.438-13.706-12.72-20.031-18.406-11.379-10.228-28.094-25.644-51.666-47.653-6.69-6.247-13.357-11.812-14.815-12.366-1.457-.554-9.54-1.007-17.962-1.007-16.125 0-18.175.554-17.377 4.694.468 2.432 4.02 3.04 18.82 3.225l12.5.156 28 25.463c27.782 25.264 51.625 46.818 67 60.567 4.4 3.934 9.8 8.783 12 10.774 6.903 6.25 10.962 7.68 13.413 4.726zm-369.08-3.92c1.707-1.368 1.09-7.792-1.648-17.185-3.695-12.672-4.426-21.88-2.751-34.654 2.083-15.89 6.553-29.53 13.053-39.826 4.153-6.578 2.7-10.02-4.23-10.02-4.445 0-8.164 4.095-14.074 15.5-7.594 14.654-10.172 25.97-10.249 44.987-.055 13.765 2.169 26.762 6.212 36.304 2.666 6.293 9.083 8.588 13.688 4.895zm430.836-.935c1.956-1.337 4.14-4.215 5.379-7.09 1.99-4.62 2.015-5.118.54-10.931C530.78 544.666 523.333 540 508.485 540c-3.933 0-7.434-.282-7.779-.627-.345-.345.044-2.233.864-4.196 2.276-5.447 2.1-14.827-.379-20.204-3.789-8.217-9.814-11.973-19.207-11.973-6.826 0-9.01.846-13.734 5.316-2.39 2.262-3.25 3.95-3.25 6.38 0 4.3 1.701 4.24 6.019-.215 3.694-3.812 9.424-5.91 13.408-4.91 1.376.345 4.283 2.56 6.46 4.922 6.643 7.207 6.593 16.474-.13 24.131-3.78 4.305-5.386 5.168-11.932 6.41-9.452 1.792-21.523-3.493-27.815-12.179-4.113-5.677-5.781-14.677-6.555-35.355-.782-20.868-2.27-30.23-5.97-37.531-3.775-7.45-10.911-14.202-18.044-17.076-5.525-2.225-7.288-2.397-25.169-2.454-10.575-.034-19.535-.37-19.912-.745-.376-.376.627-3.049 2.228-5.939 2.615-4.72 2.91-6.172 2.899-14.255-.016-10.724-1.983-15.748-8.665-22.123-6.217-5.931-11.856-8.79-24.322-12.333-12.32-3.5-19.089-7.458-24.25-14.177-3.803-4.951-4.204-9.25-1.307-14.014 2.589-4.257 1.298-6.853-3.407-6.853-4.131 0-6.247 1.944-7.108 6.532-.938 4.998.3 10.25 3.764 15.968 4.622 7.629 10.498 11.904 22.558 16.409 3.438 1.284 6.25 2.87 6.25 3.522 0 .653-2.223 3.494-4.94 6.313-5.96 6.184-7.986 11.607-6.066 16.242 1.472 3.553 4.79 5.873 5.446 3.807.226-.711.682-3.333 1.014-5.826 1.195-8.98 6.685-13.995 15.264-13.945 12.426.072 21.332 12.24 18.435 25.186-3.214 14.36-20.098 22.743-33.87 16.818-7.432-3.197-16.1-12.596-20.601-22.339-6.168-13.35-8.443-21.511-12.138-43.54-4.316-25.73-4.945-28.63-8.2-37.809-3.77-10.629-7.84-16.228-14.208-19.544-12.979-6.76-27.153-.777-32.079 13.54-1.889 5.49-1.907 6.005-.345 9.977 3.856 9.808 9.135 13.343 18.572 12.436 5.784-.556 8.295-2.796 6.627-5.913-.864-1.614-1.732-1.794-5.95-1.234-4.353.577-5.35.34-8.408-1.992-4.715-3.596-5.526-8.02-2.45-13.365 6.718-11.674 21.432-10.863 28.19 1.555 3.097 5.69 6.343 15.664 7.225 22.202.334 2.475 1.239 8.325 2.012 13 .772 4.675 2.126 13 3.008 18.5 4.312 26.888 14.752 48.435 27.801 57.378 8.55 5.86 13.12 6.433 41.118 5.157 13.774-.628 25.612-1.331 26.306-1.562 2.785-.926 16.868 1.67 22.131 4.079 6.96 3.186 9.643 5.65 12.705 11.665 3.23 6.345 3.37 16.655.295 21.783-8.937 14.908-23.671 17.197-30.062 4.671-3.562-6.982-.727-16.575 5.773-19.537 1.317-.6 2.395-1.826 2.395-2.724 0-1.342-.668-1.51-3.75-.947-4.815.88-7.44 2.607-10.933 7.195-2.41 3.164-2.804 4.577-2.727 9.77.192 12.967 9.586 21.512 23.7 21.557 5.712.018 10.878-2.423 15.656-7.397 4.14-4.31 6.033-4.57 6.112-.838.758 36.14 9.37 51.08 32.419 56.245 4.767 1.068 8.026.528 27.023-4.479 19.62-5.171 31.5-.716 31.5 11.814 0 4.814-5.394 10.67-9.829 10.67-3.073 0-3.484-.288-7.016-4.917-2.392-3.135-5.155-2.218-5.155 1.711 0 2.797 2.837 6.344 6 7.5.825.301 3.947.584 6.938.627 4.088.06 6.256-.48 8.731-2.171zm54.896-3.64c18.067-8.206 24.76-34.738 14.762-58.515-7.183-17.083-16.916-24.394-31.122-23.378-8.39.6-13.534 3.679-18.595 11.13-6.702 9.863-9.194 20.816-7.685 33.776 2.221 19.087 12.043 34.003 24.964 37.915 4.783 1.448 13.447.993 17.676-.928zm-17.129-8.523c-3.688-1.606-9.677-8.388-12.431-14.077-4.578-9.457-5.175-27.488-1.211-36.598 4.372-10.05 13.928-15.333 22.355-12.36 8.816 3.111 14.803 11.798 17.368 25.198 2.735 14.294 1.144 25.326-4.73 32.793-4.391 5.583-14.584 7.991-21.35 5.044zm13.095-7.934c2.584-3.69 1.376-10.978-2.819-16.997-1.631-2.34-2.562-2.776-5.264-2.46-2.92.34-3.344.074-3.842-2.418-1.033-5.164-8.895-5.905-11.427-1.076-2.206 4.208 3.552 9.582 7.82 7.298 2.94-1.573 3.11-1.3 2.421 3.89-.898 6.775.938 11.937 4.83 13.573 3.692 1.552 6.33.976 8.28-1.81zm6.155-20.827c1.272-1.196 2.314-2.771 2.314-3.5 0-2.288-3.88-5.326-6.8-5.326-3.633 0-5.2 1.657-5.2 5.5 0 1.705.54 3.64 1.2 4.3 1.878 1.878 5.946 1.411 8.486-.974zm-12.94-7.076c1.639-2.065 3.476-11.468 2.725-13.942-1.818-5.986-8.399-8.836-11.682-5.058-2.742 3.156-2.992 7.002-.78 12.003 3.366 7.61 7.115 10.303 9.738 6.997zm-418.675 38.5c3.702-1.875 5.527-3.438 5.737-4.914.366-2.57-.383-2.85-11.52-4.33-9.865-1.31-18.15-3.634-20.538-5.758-.963-.857-1.75-2.613-1.75-3.903 0-3.016 3.002-3.108 10.24-.314 2.893 1.117 9.666 2.662 15.052 3.434 8.59 1.23 10.415 1.217 14.87-.106 5.205-1.546 9.838-5.164 9.838-7.685 0-1.043-2.57-1.733-9.75-2.618-5.363-.66-12.122-1.652-15.02-2.204-2.899-.551-6.585-.713-8.191-.36-3.744.822-6.484-.673-8.447-4.608-2.85-5.711-2.22-5.782 17.908-2.009 17.688 3.316 30.113 2.584 32.521-1.914.539-1.006.979-3.193.979-4.86 0-3.855-2.248-5.101-9.202-5.101-3.162 0-10.173-1.424-17.227-3.5-6.542-1.925-13.59-3.5-15.661-3.5-2.206 0-4.469-.702-5.46-1.693-1.59-1.59-1.557-1.802.54-3.5 3.082-2.496 6.123-2.28 17.06 1.207 19.22 6.13 29.95 5.025 29.95-3.083 0-5.18-5.901-10.318-19.784-17.226l-12.47-6.205-13.623.011c-24.75.02-30.554 4.024-38.349 26.454-4.02 11.566-5.49 25.367-3.94 37.002 1.592 11.959 3.876 18.611 7.412 21.586 2.875 2.42 3.135 2.447 23.151 2.447 20.102 0 20.283-.02 25.674-2.75zm-80.19-42.642c.643-5.44.932-10.129.642-10.418C72.117 509.783 61 518.243 61 520.72c0 1.484 6.235 9.953 8.458 11.488 1.721 1.19 2.21-.323 3.423-10.6zM676 530.706c4.07-2.06 3.175-4.196-1.79-4.269-3.28-.048-4.928-.7-7-2.773-2.577-2.577-2.704-3.165-2.594-11.937.1-7.85.675-10.868 3.862-20.227 4.663-13.695 5.112-23.157 1.754-37.023-2.144-8.853-2.764-10.831-9.083-28.938-3.453-9.893-3.126-11.6 1.832-9.547 5.206 2.156 10.536 1.614 14.602-1.487 4.131-3.151 6.844-8.67 5.97-12.147-.84-3.35-3.043-2.92-5.514 1.078-3.65 5.908-11.665 7.006-17.52 2.4-5.973-4.698-7.943-13.573-5.096-22.955 3.183-10.487 8.914-18.02 21.604-28.403l7.098-5.807-2.555-2.556-2.555-2.555-3.258 1.906c-7.116 4.162-16.868 14.047-21.276 21.567-10.369 17.686-11.135 27.99-3.828 51.467 3.39 10.893 4.12 20.106 1.927 24.346-2.158 4.173-7.076 7.146-11.83 7.15-2.714.003-3.75.43-3.75 1.55 0 2.472 4.66 6.454 7.553 6.454 3.864 0 9.187-2.826 11.535-6.123 1.126-1.582 2.638-2.877 3.359-2.877 3.835 0 6.106 27.085 3.029 36.117-2.14 6.28-9.636 14.582-14.283 15.82-5.787 1.543-12.237-.41-15.943-4.829-1.863-2.22-1.473-9.02.804-14.04 1.756-3.869 1.827-4.616.563-5.88-3.775-3.774-10.491 10.497-9.15 19.442.816 5.44 5.766 10.828 11.276 12.276 4.235 1.114 12.404.608 16.447-1.017 1.479-.595 3.107-.823 3.618-.508.51.316.708 3.646.44 7.4-.4 5.575-.11 7.568 1.574 10.87 3.276 6.421 11.825 9.269 18.178 6.055zm-148.396-28.39c1.856-2.025 3.656-5.187 4.001-7.025.987-5.259-.626-20.264-2.804-26.09-2.13-5.697-6.168-11.162-7.365-9.968-.404.403-.218 3.864.415 7.692.632 3.828 1.149 10.174 1.149 14.103 0 6.943-.1 7.231-3.59 10.307-4.58 4.038-5.614 6.005-4.819 9.173.667 2.654 4.557 5.383 7.774 5.452 1.026.022 3.384-1.618 5.24-3.644zm15.941-3.77c2.788-2.788 3.308-8.966 1.316-15.615-1.533-5.116-9.246-13.852-10.857-12.296-.897.867-.78 1.898.495 4.363.918 1.775 1.915 5.615 2.216 8.534.445 4.311.146 5.957-1.595 8.774-2.389 3.865-1.97 6.405 1.27 7.714 3.386 1.369 4.553 1.128 7.155-1.475zM469.8 491.8c.66-.66 1.2-2.595 1.2-4.3 0-3.958-1.578-5.5-5.629-5.5-5.385 0-7.9 4.274-5.336 9.066 1.196 2.234 7.77 2.729 9.765.734zm130.886-.974c5.158-4.846 1.25-12.826-6.282-12.826-2.074 0-4.05-.778-5.252-2.067-1.914-2.055-5.749-13.67-4.82-14.598.267-.267.778.436 1.136 1.564.874 2.754 5.746 6.101 8.88 6.101 1.462 0 3.175-.91 4.04-2.143 2.139-3.054.068-7.883-3.933-9.173-4.443-1.432-5.22-2.363-6.956-8.335-2.241-7.71-4.093-6.605-3.672 2.191.3 6.261.19 6.718-1.326 5.46-2.473-2.052-3.47.243-3.474 8-.008 15.697 6.906 28 15.735 28 2.33 0 4.43-.771 5.924-2.174zM82.078 490c.435-.825 2.396-4.209 4.357-7.52 1.96-3.31 3.565-6.747 3.565-7.636 0-.889-1.688-2.41-3.75-3.379-2.063-.97-7.783-3.715-12.713-6.1-5.957-2.884-9.297-4.005-9.96-3.342-1.116 1.116 2.705 9.52 10.131 22.276 4.497 7.727 6.559 9.13 8.37 5.701zm85.49-12.41c2.645-1.853 6.966-10.574 8.963-18.09 3.517-13.235 2.9-28.052-1.757-42.239-1.64-4.993-3.421-7.976-6.952-11.64-4.023-4.174-4.984-4.732-6.285-3.651-.931.772-1.537 2.912-1.537 5.428 0 2.283-1.396 9.766-3.101 16.627-3.323 13.365-4.358 25.689-3.297 39.233.827 10.56 3.9 14.96 10.925 15.642.566.055 1.934-.535 3.042-1.31zm349.207-.966c1.996-1.95 2.661-10.975 1.204-16.35-1.613-5.955-4.702-12.274-6-12.274-2.254 0-2.463.896-2.133 9.146.33 8.224-.133 10.447-3.55 17.068-.203.392.586 1.668 1.754 2.836 2.26 2.26 6.17 2.068 8.725-.426zm-392.957-1.163c4.13-1.226 5.182-1.97 5.182-3.659 0-2.62-6.81-11.793-11.294-15.213-3.713-2.831-27.234-10.984-29.35-10.172-5.241 2.011 5.64 18.349 13.471 20.224 4.568 1.093 8.545 3.425 11.872 6.96 3.7 3.93 3.359 3.868 10.12 1.86zm26.645-3.066c1.801-1.802 1.525-3.333-1.961-10.895-4.62-10.018-17.855-20.405-33.502-26.292-3.025-1.139-8.2-3.098-11.5-4.354-7.009-2.667-13.421-8.187-18.261-15.719l-3.448-5.365-5.088.675c-2.798.371-5.483.92-5.966 1.218-1.367.844.247 8.326 2.954 13.692 4.786 9.487 13.772 15.656 29.809 20.463 7.362 2.207 17.172 7.575 21.668 11.857 1.467 1.398 3.923 5.186 5.459 8.42 3.14 6.613 4.958 7.703 13.052 7.826 3.505.053 5.697-.44 6.784-1.526zm227.65-2.456c5.672-3.035 3.6-11.879-2.792-11.924-4.709-.033-7.665 6.286-4.908 10.492 1.74 2.655 4.468 3.162 7.7 1.432zm186.102-2.446c2.757-10.498 13.655-55.697 14.224-58.993.38-2.2 4.08-17.5 8.224-34C595.115 340.846 601 315.56 601 312.895c0-.977-.432-2.044-.96-2.37-.527-.326-6.265.293-12.75 1.375-32.367 5.402-86.21 7.344-118.79 4.284-29.25-2.747-62.051-9.232-90.257-17.845-8.39-2.562-15.584-4.331-15.984-3.931-.94.94 7.906 9.317 30.189 28.592 9.855 8.525 20.423 17.818 23.485 20.651 3.062 2.834 7.875 7.109 10.697 9.5 8.18 6.935 26.619 23.16 28.84 25.376 1.116 1.115 5.18 4.7 9.03 7.969 3.85 3.268 9.497 8.206 12.55 10.973 3.052 2.767 12.709 11.331 21.46 19.031 8.75 7.7 18.874 16.7 22.498 20 3.624 3.3 11.264 10.05 16.978 15 5.714 4.95 13.031 11.39 16.26 14.312 3.235 2.926 6.615 5.169 7.527 4.993.911-.175 2.01-1.666 2.442-3.312zM541.22 437.25A3398.159 3398.159 0 0 0 520.497 419c-5.99-5.225-13.848-12.2-17.465-15.5-6.97-6.36-22.223-19.77-37.534-33-5.093-4.4-14.521-12.725-20.952-18.5-6.431-5.775-14.247-12.69-17.37-15.366C411.479 323.176 408.144 319 413.094 319c1.151 0 6.439.877 11.75 1.948 5.311 1.072 19.107 3.19 30.657 4.705 19.762 2.594 23.241 2.756 59 2.747 29.847-.007 40.987-.378 51.924-1.73 9.247-1.143 14.26-1.387 14.92-.725.99.99-.207 7.708-4.464 25.055-1.794 7.306-14.66 62.263-19.363 82.71-1.291 5.614-2.638 10.677-2.992 11.25-1.347 2.179-3.773.774-13.306-7.71zm12.676-5c1.089-3.712 2.705-10.35 3.593-14.75.887-4.4 2.662-12.05 3.944-17 2.454-9.477 5.181-20.941 11.06-46.5 1.96-8.525 3.945-16.915 4.41-18.645 1.556-5.783 1.218-5.849-19.918-3.88-15.84 1.476-25.186 1.694-53.344 1.244-33.108-.529-50.88-1.972-70.79-5.747-11.813-2.24-12.623-.648-3.6 7.084 3.438 2.945 8.275 7.233 10.75 9.529 4.76 4.415 13.698 12.262 33.44 29.36 6.633 5.744 17.874 15.644 24.98 22C536.07 428.621 548.215 439 549.978 439c1.528 0 2.353-1.422 3.916-6.75zm-20.948-19.298c-6.296-5.547-14.874-13.18-19.064-16.962-4.189-3.783-12.289-10.93-18-15.884-19.671-17.06-37.383-33.72-37.383-35.161 0-1.058 1.07-1.382 4-1.21 19.606 1.157 76.645 1.337 86.804.274 6.492-.679 12.102-.936 12.466-.572.876.875-1.748 16.005-6.803 39.23a323416.49 323416.49 0 0 1-6.374 29.28c-1.252 5.746-2.708 10.591-3.238 10.768-.529.176-6.113-4.217-12.408-9.763zm12-1.702c.573-2.063 1.044-4.088 1.047-4.5.01-1.347-3.718-.787-4.994.75-.685.825-1.865 1.5-2.622 1.5-1.866 0-1.737 1.946.277 4.171 2.733 3.02 5.123 2.29 6.292-1.921zm-1.85-10.82c3.703-2.72 5.125-4.54 5.956-7.628 1.724-6.402.021-6.746-6.93-1.397-3.32 2.555-6.307 5.084-6.638 5.62-.895 1.448-4.924 1.183-9.43-.62-5.554-2.222-7.215-1.384-3.704 1.87 2.987 2.768 9.56 5.514 13.515 5.646 1.301.043 4.555-1.528 7.23-3.492zm-.282-13.957c7.052-5.19 9.094-7.27 9.982-10.165 1.142-3.72.866-5.308-.925-5.308-.556 0-5.536 3.375-11.067 7.5-5.531 4.125-10.64 7.5-11.354 7.5-.714 0-6.458-2.251-12.764-5.003C503.22 375.121 499 374.005 499 376.32c0 2.924 7.46 7.82 17.912 11.753 5.726 2.155 10.639 4.146 10.917 4.423.277.278 1.768.505 3.312.505 1.885 0 5.723-2.145 11.674-6.527zm-.195-14.526c6.534-4.979 12.442-9.79 13.13-10.69 1.352-1.773 1.741-9.257.481-9.257-.98 0-7.432 4.551-19.654 13.862l-9.663 7.363-16.207-6.7c-23.985-9.916-37.655-14.913-38.477-14.065-.402.414 1.645 2.89 4.547 5.5 4.323 3.89 8.303 5.978 22 11.55 22.335 9.085 28.414 11.376 30.343 11.438.891.028 6.966-4.022 13.5-9zm-7.444-10.197c4.432-3.438 8.905-6.867 9.94-7.622 3.009-2.191 2.33-4.128-1.445-4.128-3.388 0-10.622 4.078-14.152 7.979-2.555 2.823-4.679 2.534-15.519-2.113-8.082-3.464-10.844-4.148-18.5-4.575-7.549-.422-8.79-.285-7.703.85 1.332 1.39 35.657 15.64 38.012 15.78.72.044 4.935-2.733 9.367-6.171zm-7.376-7.95c2.114-2.114 1.307-2.8-3.3-2.8-3.23 0-4.5.402-4.5 1.427 0 2.314 5.832 3.34 7.8 1.373zm-40.584 112.876c5.116-4.742 6.07-7.292 6.564-17.552.348-7.233.045-11.214-1.173-15.404-1.625-5.59-5.821-11.834-7.097-10.561-.363.362-.23 5.038.295 10.39.592 6.031.602 11.013.027 13.099-.987 3.572-4.339 7.352-6.52 7.352-2.51 0-5.312 3.918-5.312 7.427 0 6.65 8.194 9.903 13.216 5.249zm16.86-1.6c2.642-2.64 2.924-3.56 2.924-9.532 0-5.13-.585-7.778-2.614-11.827-2.92-5.826-5.293-8.892-6.37-8.227-.393.243-.5 4.911-.237 10.373.39 8.107.18 10.358-1.15 12.257-2.265 3.233-2.033 6.484.594 8.323 3.002 2.103 3.48 2.008 6.854-1.366zm95.974-14.17c1.63-3.044.347-6.65-2.978-8.369-2.075-1.073-3.364-2.9-4.537-6.43-2.353-7.085-5.535-7.94-5.535-1.49 0 5.993 2.184 13.658 4.572 16.046 2.937 2.937 6.975 3.053 8.478.244zm-122.01-7.946c5.11-5.11 5.38-13.852.71-23.055-1.788-3.523-3.958-6.535-4.823-6.694-1.358-.25-1.511.878-1.124 8.264.42 7.978.273 8.808-2.177 12.343-3.301 4.764-3.3 6.507.01 9.11 3.304 2.6 4.83 2.606 7.404.032zm133.389-.531c2.11-2.111 2.007-7.732-.179-9.674-.963-.856-3.378-2.228-5.368-3.05-4.233-1.746-7.852-6.299-10.3-12.955-1.821-4.95-2.947-5.848-3.975-3.168-2.032 5.295 2.69 22.87 7.415 27.594 3.277 3.277 9.73 3.929 12.407 1.253zM451.663 431.49l4.32-4.508 2.008 2.008c2.74 2.74 6.18 2.522 9.085-.577 4.983-5.315 1.976-20.387-5.45-27.314-2.216-2.066-2.66-2.176-3.191-.791-.34.885-.054 3.315.635 5.4 1.643 4.973 1.755 14.866.186 16.435-1.877 1.877-2.58.406-3.379-7.074-.918-8.591-4.301-20.138-6.806-23.227-2.677-3.303-3.295-1.987-1.97 4.194 1.282 5.977.745 16.142-1.058 20.022-.654 1.407-3.05 3.432-5.324 4.5-6.792 3.189-7.183 10.878-.719 14.147 4.501 2.277 7.083 1.565 11.663-3.215zm274.99-2.029c5.892-3.452 8.787-9.675 8.088-17.386-.671-7.4-2.811-11.432-7.83-14.753-4.74-3.138-13.265-4.248-17.895-2.33-4.338 1.797-9.728 8.224-11.07 13.2-2.338 8.666.952 18.51 7.345 21.979 6.206 3.367 14.9 3.078 21.363-.71zM711.1 426.62c-1.125-1.355-1.044-1.683.538-2.18 7.588-2.383 10.114-4.904 11.751-11.727.777-3.238-1.705-9.268-4.544-11.042-1.014-.633-1.844-1.767-1.844-2.519 0-1.715 4.216-.801 7.616 1.65 2.745 1.98 6.384 8.846 6.384 12.047 0 3.488-2.476 8.391-5.83 11.544-3.791 3.565-11.897 4.847-14.071 2.227zm-312.656-.842c1.822-2.6 2.056-7.35.413-8.366-1.744-1.078-6.817-.688-8.425.647-3.245 2.692-.278 9.942 4.069 9.942 1.333 0 3.074-.982 3.943-2.223zm210.986-7.348c.864-.865 1.571-2.215 1.571-3 0-1.878-3.594-5.429-5.494-5.429-1.54 0-7.494-7.442-7.521-9.4-.008-.605-.459-1.775-1-2.6-.876-1.333-1.094-1.333-1.97 0-2.31 3.519.39 14.8 4.64 19.383 2.779 2.997 7.335 3.485 9.774 1.046zm-168.022-9.745c3.57-3.57 4.277-11.875 1.592-18.686-1.156-2.934-3.01-6.609-4.119-8.166-2.234-3.137-5.532-3.975-4.44-1.128.36.938.9 5.1 1.201 9.25.508 7.005.362 7.793-2.047 10.99-3.023 4.014-3.133 4.842-1.037 7.833 2.027 2.894 5.904 2.853 8.85-.093zm170.723-1.588 2.352-1.905-3.88-3.66c-2.396-2.26-4.88-6.125-6.491-10.104-1.436-3.545-3.061-6.329-3.611-6.186-.55.142-.969 2.987-.93 6.32.102 8.918 4.461 16.83 9.57 17.371.35.038 1.697-.789 2.99-1.836zm-533.848-1.467c6.884-2.934 10.934-11.413 8.694-18.203-1.555-4.71-3.53-6.426-7.392-6.426-3.876 0-6.285 2.32-6.75 6.5-.507 4.556-3.11 3.817-4.094-1.162-.99-5.006-2.845-6.78-6.209-5.935-6.294 1.58-7.916 14.811-2.562 20.909 4.56 5.193 12.09 6.968 18.313 4.317zm544.495-5.186c1.649-1.154 2.223-2.56 2.223-5.443 0-4.6-2.644-7-7.708-7-2.67 0-3.708-.682-5.706-3.75-1.344-2.063-3.2-6.45-4.125-9.75-1.944-6.934-2.956-8.405-4.631-6.73-1.794 1.794 1.318 18.968 4.682 25.844 3.713 7.589 10.1 10.447 15.265 6.83zm-212.435-2.438c5.08-4.46 5.941-7.475 5.505-19.258-.347-9.37-.692-10.905-3.864-17.19-1.916-3.795-3.974-7.062-4.574-7.259-.753-.248-1.065 3.799-1.01 13.102.077 12.908-.02 13.567-2.334 16.03-1.327 1.414-2.978 2.57-3.667 2.57-1.827 0-5.403 4.921-5.366 7.385.06 3.984 4.353 7.53 9.183 7.585 1.622.018 4.089-1.176 6.127-2.965zm19.813-2.39c1.566-2.486 1.846-4.19 1.386-8.436-1.014-9.377-7.488-22.179-11.215-22.179-1.718 0-1.674 1.762.174 7 2.158 6.117 1.93 13.567-.537 17.56-1.408 2.277-1.831 4.116-1.372 5.948 1.296 5.162 8.34 5.227 11.564.107zm292.57-8.126c6.141-1.824 10.387-6.246 12.194-12.701 1.29-4.604.498-22.681-1.895-43.288-.511-4.4-1.428-12.725-2.038-18.5-.61-5.775-1.948-15.9-2.973-22.5s-2.357-16.5-2.961-22c-3.664-33.392-7.64-63.421-8.512-64.293-1.404-1.405-2.457 2.007-3.483 11.293-.609 5.5-1.75 15.4-2.537 22-.786 6.6-2.15 19.2-3.03 28-.88 8.8-2.448 23.2-3.484 32-2.32 19.685-3.747 32.827-4.563 42-.343 3.85-1.235 10.932-1.983 15.738-3.138 20.176 2.878 30.503 19.608 33.655.313.059 2.858-.573 5.656-1.404zm-10.597-5.389c-2.275-1.44-.716-3.505 3.848-5.096 7.737-2.698 10.396-9.01 9.482-22.504-.693-10.223-3.818-41.393-6.918-69-2.619-23.321-2.801-26.22-1.694-26.905 1.76-1.088 2.944 2.518 4.084 12.442 1.703 14.832 3.77 31.763 6.527 53.463 4.618 36.348 4.45 47.652-.796 53.345-4.173 4.528-10.963 6.517-14.533 4.255zm-655.583-3.555c1.35-1.35 2.455-2.875 2.455-3.389 0-1.956-3.882-5.606-7.123-6.697-4.28-1.442-4.346-3.679-.133-4.54C62.164 361.787 58.938 352 47.815 352c-6.2 0-10.005 1.953-12.885 6.613-4.244 6.867-2.2 16.422 4.369 20.427 2.2 1.342 5.014 1.954 8.996 1.956 4.823.003 6.208-.408 8.25-2.45zm50.549.906c8.848-4.575 9.288-20.2.716-25.425-4.597-2.803-11.526-2.69-15.912.258-5.771 3.88-4.958 8.92 1.638 10.157 4.871.914 4.305 2.954-1.286 4.633-4.005 1.202-4.75 1.815-4.75 3.904 0 2.01 1.041 2.991 5.5 5.187 6.362 3.133 9.9 3.456 14.094 1.286zm512.712-2.107c.252-2.595-.3-3.618-3.1-5.754-2.999-2.288-5.267-6.076-7.09-11.84-.954-3.017-2.616-1.908-2.616 1.746 0 4.193 3.63 15.286 5.827 17.801.928 1.064 2.61 1.676 4.12 1.5 2.055-.239 2.613-.913 2.86-3.453zM79.14 374.387c3.859-3.158 6.861-6.401 6.861-7.413C86 365.497 76.605 353 75.495 353c-.182 0-1.036-.27-1.896-.6C71.586 351.626 59 364.273 59 367.067c0 1.688 6.409 9.895 9.5 12.167 2.04 1.498 3.94.632 10.639-4.848zm204.826 1.679c2.442-4.563-.507-10.066-5.394-10.066-5.012 0-7.433 6.285-3.916 10.171 2.266 2.505 7.948 2.44 9.31-.105zm114.09-3.096c3.485-1.865 5.21-6.695 4.479-12.544-.803-6.43-7.8-21.426-9.998-21.426-.845 0-1.53.113-1.524.25.007.138.676 2.725 1.488 5.75 2.403 8.954 2.015 13.39-1.427 16.285-2.972 2.501-3.403 3.5-3.191 7.394.246 4.53 5.549 6.766 10.173 4.291zm224.374-7.541c.864-.865 1.571-2.777 1.571-4.25 0-2.554.238-2.679 5.08-2.679 5.708 0 7.92-1.848 7.92-6.619 0-3.195-4.053-6.881-7.567-6.881-1.379 0-3.1-1.128-4.307-2.823-2.324-3.264-7.126-15.553-7.126-18.237 0-1.928-1.728-3.545-2.724-2.55-1.29 1.29-1.92 9.97-1.116 15.383.467 3.15 2.42 8.841 4.34 12.648 1.92 3.806 3.271 7.141 3.002 7.41-1.043 1.043-4.843-3.572-7.064-8.581-2.332-5.26-4.32-6.781-4.572-3.5-.626 8.16 2.027 19.5 4.962 21.214 2.51 1.464 5.835 1.23 7.6-.535zm-256.259-5.713c4.032-2.981 5.83-9.41 5.83-20.845 0-10.22-1.716-18.988-4.725-24.14-2.048-3.507-3.868-3.37-3.572.269.698 8.577.29 16.428-1.184 22.773-1.582 6.81-1.938 7.4-5.571 9.254-7.413 3.781-8.112 10.914-1.448 14.778 2.51 1.456 7.089.56 10.67-2.09zm21.693-6.088c1.264-5.02.817-8.667-2.041-16.628-1.911-5.323-4.32-9-5.897-9-.42 0-.688 4.181-.595 9.292.135 7.37-.192 9.845-1.58 11.965-2.878 4.396-2.234 8.329 1.72 10.49 3.346 1.832 7.076-.887 8.393-6.119zM70.001 347.5c2.022-4.044 3.202-4.242 5.08-.853 1.178 2.124 2.327 2.853 4.5 2.853 2.477 0 3.27-.706 5.231-4.66 2.578-5.193 2.352-9.397-.783-14.552-3.222-5.297-12.825-8.002-18.345-5.166-9.872 5.072-11.53 15.44-3.866 24.175 2.36 2.689 6.38 1.806 8.183-1.797zm285.384-12.63c3.344-1.523 4.854-5.607 4.927-13.326.049-5.228-.49-7.51-2.876-12.16-4.322-8.428-5.436-8.134-5.436 1.438 0 7.665-.142 8.158-3.5 12.178-1.925 2.304-3.5 4.575-3.5 5.048 0 2.09 2.41 5.837 4.364 6.782 2.812 1.362 3.116 1.364 6.021.04zm277.784-4.12c3.881-3.127 2.66-7.57-3.076-11.191-2.932-1.851-4.325-3.602-5.206-6.543-1.415-4.72-4.462-5.556-5.48-1.503-1.313 5.235 2.356 17.362 5.968 19.722 1.77 1.156 6.09.887 7.794-.485zm-289.264-10.122c.773-.62 2.019-2.597 2.77-4.393 2.308-5.521-1.108-20.235-4.698-20.235-.933 0-1.397 2.084-1.054 4.74.39 3.028-2.146 9.099-4.907 11.745-3.67 3.516-3.754 4.868-.5 8.123 2.581 2.58 5.191 2.586 8.389.02zm293.481-4.157c2.145-2.145 1.159-3.892-4.486-7.948-7.318-5.257-9.248-4.341-6.425 3.05 2.372 6.213 7.358 8.451 10.911 4.898zm-80.886-5.455c23.36-2.194 28.23-2.886 47-6.67 15.98-3.223 18.187-4.54 13.149-7.84-1.97-1.291-3.532-1.374-9.63-.509-4.997.71-7.668.71-8.52.001-2.05-1.701-2.594-7.924-.917-10.484 1.402-2.139 1.296-2.44-1.767-5.017-7.135-6.003-8.077-6.136-26.09-3.68-26.178 3.568-42.303 4.493-67.725 3.887-44.888-1.07-78.284-6.607-125.26-20.772-8.444-2.545-9.686-2.23-11.206 2.838-.583 1.942-.129 2.499 3.142 3.854 6.197 2.567 6.452 2.993 4.636 7.712-2.508 6.516-3.216 6.962-8.247 5.187-6.127-2.162-7.64-1.929-10.126 1.562-1.858 2.61-1.984 3.287-.818 4.393 1.412 1.338 23.437 8.79 36.879 12.475 4.125 1.132 8.85 2.488 10.5 3.015 8.069 2.576 37.987 7.879 59 10.457 17.961 2.205 70.559 1.98 96-.41zm-47.75-8.735c-2.104-2.33-2.313-8.569-.343-10.204.873-.724 4.198-1.056 8.75-.873l7.343.296.31 4.89c.171 2.689-.054 5.253-.5 5.697-.445.445-3.735 1.106-7.31 1.47-5.667.578-6.724.415-8.25-1.276zm-29 .023c-2.977-.473-3.257-1.606-2.108-8.554l.62-3.75h5.244c2.884 0 6.67.285 8.415.634 3.156.631 3.17.66 2.875 6.25l-.296 5.616-6 .12c-3.3.067-7.237-.075-8.75-.316zm57.25-5.037c0-2.825.547-5.454 1.25-6.01 1.481-1.169 12.3-2.367 14.334-1.586 1.678.644 2.003 9.848.383 10.85-.569.35-4.394.892-8.5 1.203l-7.467.565v-5.022zm-84.2 2.705c-2.585-.435-5.172-1.084-5.75-1.44-1.34-.83-1.352-5.608-.02-9.109 1.003-2.64 1.183-2.692 7.262-2.125 9.28.867 9.708 1.159 9.708 6.609 0 7.12-1.173 7.756-11.2 6.065zm115.739-1.91c-1.324-2.142-.975-8.055.568-9.597.863-.863 4.291-1.764 8.047-2.115 6.28-.586 6.57-.515 7.182 1.77.923 3.45.805 8.675-.21 9.302-.481.298-4.018.833-7.86 1.19-4.961.461-7.201.302-7.727-.55zM421 294.837c-5.265-1.478-6.326-2.95-5.528-7.67.962-5.697 2.177-6.417 8.65-5.131 10.316 2.049 10.904 2.73 8.825 10.215-.97 3.497-1.29 3.744-4.744 3.66-2.037-.05-5.278-.533-7.203-1.074zm-30.25-7.998c-6.21-2.165-6.477-2.681-4.697-9.088.778-2.803 1.568-3.75 3.128-3.75 2.686 0 9.95 2.07 11.569 3.298 2.738 2.075.675 11.763-2.475 11.623-.976-.043-4.362-.98-7.525-2.083zm-57.689 20.1c1.15-1.148 1.924-3.03 1.75-4.25-.255-1.795-1.067-2.243-4.523-2.494-5.32-.386-8.288 1.151-8.288 4.291 0 4.533 7.352 6.163 11.061 2.454zm209.351-31.629c2.594-1.452 1.098-2.054-7.979-3.216-8.474-1.084-18.507-3.633-27.433-6.971-3.775-1.412-7.945-2.067-13.297-2.09-8.85-.036-38.717-3.211-52.203-5.548-15.671-2.716-30.809-6.388-47.142-11.434-9.135-2.823-16.267-4.535-16.85-4.044-.554.467-2.133 2.924-3.507 5.459-3.034 5.594-3.393 5.27 10.999 9.956 16.665 5.426 27.609 8.308 43.597 11.482 13.305 2.64 23.033 3.951 52.403 7.06 11.293 1.196 59.015.687 61.412-.654zm29.078-2.725c6.212-.87 8.063-1.5 8.32-2.84.207-1.071-.635-2.163-2.228-2.889-2.08-.948-3.36-.835-6.822.601-8.935 3.707-11.782 4.49-17.926 4.926-3.484.247-6.671.487-7.084.534-.412.046-.75.53-.75 1.073 0 1.114 13.655.39 26.49-1.405zm-15.924-5.677c8.744-1.611 15.182-5.088 22.046-11.905 6.577-6.533 14.704-19.98 18.813-31.13 1.291-3.505 3.948-10.687 5.904-15.96 4.005-10.801 7.078-22.813 8.674-33.912 1.51-10.505 2.534-50.55 1.31-51.306-.533-.33-3.72.51-7.08 1.868-7.06 2.851-20.983 3.613-26.242 1.434-6.49-2.688-4.6 1.597 4.006 9.083 3.302 2.871 6.003 5.603 6.003 6.071 0 2.026-4.33.523-10.595-3.677-3.713-2.49-7.106-4.172-7.54-3.738-.434.434-.115 3.934.71 7.777 3.17 14.785 6.425 32.883 6.425 35.72 0 5.312-2.91 9.7-8.54 12.878-5.767 3.254-9.096 6.09-11.615 9.892-1.189 1.796-1.968 2.197-2.769 1.429-.818-.785-.712-2.211.397-5.354 1.416-4.015 1.402-4.238-.23-3.532-.959.415-4.443 1.085-7.743 1.489-3.3.405-7.267 1.237-8.815 1.85-6.984 2.768-16.77-.45-19.223-6.32-3.202-7.665-1.295-15.302 5.027-20.123 6.443-4.915 9.007-.661 3.011 4.994-3.698 3.488-4.243 5.84-2.329 10.042 1.877 4.118 4.959 4.158 13.346.175 10.165-4.827 13.338-5.34 16.696-2.7 1.462 1.15 2.8 3.174 2.973 4.496.307 2.354.439 2.31 6.314-2.1 3.3-2.477 6.415-5.566 6.922-6.865.952-2.439.272-7.603-3.552-26.983-4.973-25.2-5.09-26.345-3.927-38.269 1.415-14.51 3.884-21.153 10.214-27.483 8.992-8.992 22.28-12.407 34.147-8.775 4.228 1.294 4.918 1.294 5.759-.001.525-.81.839-2.594.696-3.965-.267-2.566-1.952-3.845-16.474-12.507-13.736-8.193-34.91-31.525-40.2-44.296-.73-1.762-1.714-3.204-2.186-3.204s-1.783 1.688-2.913 3.75c-8.454 15.43-15.544 23.73-27.827 32.574-9.716 6.996-19.884 11.107-34.659 14.013l-11 2.163-7.224 12.5c-3.973 6.875-9.092 15.875-11.375 20-2.282 4.125-6.401 11.325-9.153 16-16.2 27.524-29.748 51.794-29.748 53.289 0 2.129 4.47 14.681 7.198 20.211 17.913 36.319 51.04 64.38 90.85 76.955 7.101 2.244 11.812 2.985 28.018 4.407.862.076 4.237-.354 7.5-.955zm-24.21-20.42c-.75-1.955.954-3.959 4.677-5.5 3.935-1.63 3.742-2.438-.914-3.833-4.717-1.413-6.966-3.707-5.285-5.388.865-.865 2.438-.818 6.37.19 6.623 1.697 16.637 1.515 24.095-.438 7.519-1.968 7.701-1.948 7.701.884 0 1.805-.808 2.692-3.25 3.566l-3.25 1.163 3.75 1.959c2.062 1.077 3.75 2.65 3.75 3.495 0 1.281-.791 1.402-4.75.726-8.605-1.47-17.265-.743-24.62 2.066-8.087 3.088-7.542 3.015-8.273 1.11zm-15.916-15.782c-.273-.712.191-3.243 1.032-5.625.84-2.382 1.528-5.089 1.528-6.015 0-.925.622-2.533 1.382-3.573 1.268-1.734 1.722-1.778 5.506-.529 3.592 1.185 4.898 1.146 10.103-.3 7.026-1.954 10.967-2.095 14.433-.516 2.011.917 3.411.806 6.966-.552 2.485-.949 6.803-1.63 9.78-1.545 2.931.085 6.473-.151 7.87-.524 2.439-.652 2.606-.406 4.188 6.148 1.365 5.659 1.421 7.056.326 8.174-1.004 1.024-1.812 1.084-3.372.25-3.476-1.86-8.66-1.231-16.168 1.964l-7.196 3.062-9.102-2.137c-9.852-2.313-13.602-2.106-19.88 1.096-4.384 2.237-6.701 2.432-7.396.622zm-12.773-84.372c-1.354-1.353-.512-2.338 6.583-7.696 7.956-6.01 14.784-12.637 13.019-12.637-.619 0-4.603.484-8.854 1.075-9.872 1.373-18.193.02-28.54-4.64-8.386-3.777-11.732-4.115-19.716-1.99-5.677 1.512-7.67 1.273-8.55-1.022-.979-2.55.46-4.287 9.742-11.754 17.155-13.802 28.014-18.952 40.176-19.054 7.462-.063 13.65 2.345 14.267 5.553.26 1.347-1.31 1.544-11.497 1.446-11.014-.106-12.211.077-18.032 2.766-5.993 2.768-11.471 7.013-6.765 5.242 5.09-1.916 16.652-3.748 23-3.644 3.85.063 8.44.127 10.2.143 1.761.015 6.152-1.38 9.758-3.101 9.191-4.387 11.139-2.9 5.042 3.848-1.925 2.131-3.5 4.421-3.5 5.09 0 .668 1.41 3.178 3.132 5.576l3.132 4.361-2.882 6.803c-3.48 8.213-10.484 15.584-19.715 20.746-6.263 3.502-8.687 4.203-10 2.89zm8.892-26.888c1.892-1.516 1.889-1.53-.147-.552-3.059 1.47-6.544.32-9.641-3.182-2.97-3.358-4.632-3.188-2.773.285 1.16 2.169 6.129 4.891 9.06 4.965.858.021 2.433-.66 3.5-1.516zM494 118.082c0-2.799-1.448-4.082-4.607-4.082-4.203 0-4.603 2.391-.643 3.838 3.574 1.305 5.25 1.383 5.25.244zm29.8-.282c1.996-1.996 1.423-3.97-1.05-3.62-1.446.206-2.364 1.124-2.57 2.57-.35 2.473 1.624 3.046 3.62 1.05zM470 87.5c-.996-1.2-.983-1.816.068-3.082 1.911-2.303 11.057-6.69 21.932-10.52 8.718-3.07 10.487-3.347 21.5-3.372 11.414-.025 12.325.128 18.651 3.125C539.481 77.124 547 83.884 547 87c0 2.635-1.97 2.547-9.422-.423-3.343-1.332-9.228-2.723-13.078-3.09-9.18-.877-31.831 1.008-42.313 3.52-9.966 2.389-10.592 2.414-12.187.493zm4 159c-.685-.825-1.64-1.5-2.122-1.5-.483 0-.878.675-.878 1.5 0 .862.902 1.5 2.122 1.5 1.774 0 1.918-.247.878-1.5zm-10.004-2.25c-.005-3.376-3.144-8.724-6.028-10.267-3.067-1.641-3.398-.747-2.105 5.688 1.21 6.029 2.225 7.289 5.887 7.314 1.792.012 2.25-.544 2.246-2.735zm-14.016-1c-.035-3.139-2.719-16.678-3.894-19.644-1.37-3.457-6.876-10.606-8.17-10.606-.504 0-.916 1.102-.916 2.449 0 4.157 4.878 26.7 6.095 28.166 1.73 2.083 6.91 1.808 6.885-.365zM436 241.61c0-.214-.935-4.827-2.078-10.25-1.142-5.423-3.124-15.71-4.403-22.86-1.75-9.782-3.414-15.459-6.722-22.933-4.182-9.452-6.81-12.9-6.785-8.9.033 5.36 11.784 62.296 13.225 64.083.893 1.107 6.763 1.854 6.763.86zm-18.54-26.754c-2.602-12.846-4.948-24.613-5.215-26.15-.61-3.51-1.934-3.099-4.551 1.414l-2.05 3.534 3.714 19.423c2.042 10.683 3.938 20.464 4.212 21.736.539 2.494 6.322 5.635 7.774 4.22.464-.451-1.284-11.331-3.885-24.177zm-12.136 6.91-2.965-15.516c-.342-1.788-.903-3.25-1.247-3.25-.345 0-1.86 2.043-3.37 4.54-3.138 5.196-3.28 8.022-.907 17.96 1.501 6.287 2.021 7.175 5.107 8.716 5.677 2.837 6.045 1.482 3.382-12.45zm-14 4.945c-.772-4.053-.964-4.255-2.692-2.82-2.543 2.11-2.696 5.148-.304 6.053 3.052 1.154 3.698.457 2.996-3.233zm348.59-20.452c1.422-1.039 3.429-3.584 4.458-5.657 1.703-3.427 1.748-4.234.5-8.896-1.666-6.225-5.994-9.706-12.07-9.706-10.93 0-17.446 11.511-11.779 20.807 3.723 6.105 12.946 7.79 18.89 3.452zm-35.521.225c9.668-4.588 8.362-21.1-1.937-24.498-10.26-3.387-19.07 4.6-17.035 15.443.87 4.643 3.302 7.37 8.079 9.065 5.177 1.836 7.006 1.834 10.893-.01zm13.304-27.734c3.55-3.906 19.146-28.276 19.824-30.978.767-3.054.708-3.177-10.307-21.562-5.536-9.24-9.077-14.187-10.02-14-.802.16-3.7 4.34-6.44 9.29-2.739 4.95-7.21 12.936-9.936 17.747-3.362 5.936-4.752 9.385-4.325 10.73.71 2.236 14.985 27.69 16.665 29.713 1.495 1.801 2.175 1.66 4.539-.94zm-2.883-16.5c-3.01-3.52-8.814-14.067-8.814-16.017 0-1.103 1.718-4.644 3.818-7.87 2.1-3.224 4.615-7.146 5.59-8.714l1.771-2.852 2.94 2.817c3.242 3.106 8.881 13.632 8.881 16.578 0 3.39-2.781 8.615-7.051 13.248-2.312 2.508-4.527 4.56-4.921 4.56-.395 0-1.391-.787-2.214-1.75zM589.85 120.871c-1.457-.534-3.2-2.298-3.872-3.92-1.253-3.027-2.979-3.978-2.979-1.642 0 2.733 4.803 6.685 8 6.582.825-.027.308-.486-1.15-1.02zM601 114.944c0-1.729-.783-.979-2.928 2.806l-2.125 3.75 2.527-2.806c1.39-1.543 2.526-3.23 2.526-3.75zm-276.073 2.421c2.775-3.527 2.613-6.916-.477-10.006-3.075-3.075-6.746-2.631-10.2 1.234-3.005 3.363-2.864 6.779.385 9.334 3.687 2.9 7.743 2.68 10.292-.562zM579 116.91c0-2.559-1.96-3.256-5.436-1.934-2.256.857-2.558 1.326-1.6 2.48 1.179 1.421 4.866 2.469 6.286 1.786.412-.198.75-1.248.75-2.332zm31.035-.452c.924-1.114.977-1.846.19-2.633-1.504-1.504-3.836-.42-4.493 2.09-.666 2.547 2.327 2.924 4.303.543zM580.5 101.912c6.558-1.352 18.316-1.021 24.17.68 6.55 1.904 7.922 1.114 3.83-2.203-7.293-5.912-22.66-7-32.183-2.277-5.586 2.77-7.527 6.695-2.666 5.39 1.567-.421 4.649-1.136 6.849-1.59zm32.31-10.182c.25-2.09-.354-2.97-3-4.38-4.736-2.525-17.968-2.265-23.926.47L581.5 89.83l8 .12c5.579.084 9.967.82 14.5 2.436 3.575 1.274 6.95 2.236 7.5 2.138.55-.099 1.14-1.356 1.31-2.795zM376.505 25.75c3.178-2.734 3.648-7.82.993-10.753C373.414 10.484 364 14.322 364 20.5c0 3.292 4.151 7.5 7.399 7.5 1.37 0 3.666-1.012 5.105-2.25z\",\n    style: {\n      fill: \"#1156a1\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.159 0 0 .159 22.778 22.58)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M247 1242.094c0-.51.352-1.077.782-1.26 1.857-.793 12.385-21.086 11.9-22.94-.359-1.374.388-2.622 2.503-4.177 3.324-2.445 7.23-9.191 6.47-11.174-.267-.695 1.052-2.713 2.93-4.484 2.58-2.433 3.415-4.05 3.415-6.605 0-2.487.596-3.701 2.25-4.582 3.07-1.635 4.68-3.922 4.718-6.699.018-1.28 1.4-3.694 3.07-5.366 1.672-1.67 3.982-4.899 5.134-7.173 1.152-2.274 8.855-16.059 17.118-30.634 8.262-14.575 18.166-32.125 22.01-39 3.843-6.875 7.807-13.672 8.809-15.105 1.002-1.433 2.38-4.696 3.064-7.25.683-2.555 1.566-4.645 1.963-4.645 1.702 0 3.864-3.365 3.864-6.015 0-1.66.782-3.423 1.855-4.178 2.6-1.832 8.145-11.975 8.145-14.9 0-1.564.804-2.785 2.25-3.42 2.602-1.141 7.692-9.9 7.727-13.293.013-1.269 1.316-3.519 2.896-5 1.58-1.482 4.103-4.944 5.605-7.694 1.502-2.75 3.089-5.45 3.526-6 .437-.55.952-3.003 1.145-5.45.34-4.304.236-4.489-3.149-5.632-9.694-3.275-17.165-5.48-23.5-6.935a2337.1 2337.1 0 0 1-13.134-3.063c-22.782-5.404-42.918-8.12-65.37-8.815-11.52-.358-13.292-.684-22.5-4.146-5.498-2.066-11.571-4.144-13.496-4.616-25.432-6.243-42.952-4.696-54.327 4.798-1.554 1.297-3.197 2.359-3.65 2.359-.453 0-2.37-1.462-4.261-3.25-1.891-1.787-6.714-5.725-10.718-8.75-4.004-3.025-9.139-7.556-11.412-10.068-2.272-2.513-6.382-5.862-9.132-7.442s-8.15-5.374-12-8.432c-3.85-3.057-8.204-6.178-9.675-6.937-1.47-.758-6.646-5.145-11.5-9.749-4.854-4.603-12.2-10.928-16.325-14.054-4.125-3.126-8.412-6.72-9.526-7.987l-2.026-2.302L98.6 885.764c11.407-11.496 14.832-15.622 17.65-21.264 3.705-7.417 5.835-15.362 5.226-19.5-.202-1.375-.892-6.1-1.534-10.5s-2.743-12.708-4.668-18.463c-2.962-8.854-3.402-11.298-2.863-15.888 1.081-9.199 5.307-13.704 12.156-12.96 3.801.413 4.43-2.492 1.273-5.873-1.994-2.134-2.989-2.434-6.709-2.02-5.261.584-8.115 3.275-10.56 9.954-2.352 6.43-3.974 6.117-6.466-1.25-6.232-18.418-4.152-35.094 5.485-43.977 4.083-3.763 4.75-4.023 10.352-4.023 5.26 0 6.413.374 9.491 3.076 2.32 2.037 3.728 4.319 4.165 6.75.964 5.355 2.24 6.63 4.544 4.544 4.56-4.126.681-17.914-6.141-21.834-4.253-2.444-14.242-2.497-18.875-.101-5.339 2.76-5.802 2.308-5.826-5.685-.024-7.94-2.074-14.815-5.51-18.472-2.754-2.932-9.508-3.137-12.898-.393-1.956 1.585-2.122 2.134-1.037 3.441.71.855 2.45 1.694 3.868 1.865 1.418.17 3.473 1.513 4.567 2.985 3.434 4.62 3.264 10.88-.702 25.824-3.093 11.654-3.583 15.033-3.586 24.715-.004 13.056.073 13.327 11.181 39.63 4.378 10.365 7.72 19.084 7.429 19.375-.292.292-2.358-.201-4.592-1.095-10.448-4.18-20.021.54-20.021 9.871 0 5.151 2.35 5.57 6.289 1.12 3.162-3.573 4.521-4.088 9.958-3.774 3.642.21 10.33 6.345 11.811 10.835.71 2.15.903 5.56.49 8.666-1.142 8.614-5.675 15.46-19.672 29.707C85.794 888.26 80 894.572 80 895.08c0 1.478-1.29 1.088-5.215-1.579-7.104-4.827-8.056-3.851-9.272 9.5-.325 3.575-1.483 13.7-2.572 22.5-1.09 8.8-2.67 21.85-3.51 29a2751.64 2751.64 0 0 1-2.944 24c-.778 6.05-2.113 17.975-2.968 26.5-.854 8.525-2.047 17.676-2.65 20.336-1.514 6.671-.507 7.453 6.69 5.19 4.579-1.44 6.346-1.57 9.297-.678 7.453 2.252 11.908 9.42 10.833 17.432-1.089 8.12-6.862 12.945-16.2 13.54-3.569.227-6.489.788-6.489 1.245 0 .458 2.925 6.763 6.5 14.01 3.575 7.249 6.5 14.094 6.5 15.213 0 2.432-15.628 29.313-23.583 40.562-1.613 2.282-1.713 2.297-3.434.5-.975-1.017-4.126-6.35-7.002-11.85-2.877-5.5-5.562-10.45-5.966-11-.404-.55-2.613-4.477-4.908-8.726l-4.172-7.725 1.99-3.904c1.096-2.147 4.936-8.757 8.534-14.69 3.597-5.933 6.541-11.57 6.541-12.525 0-1.467-.909-1.717-5.824-1.604-6.668.154-9.512-1.278-13.86-6.978-3.881-5.089-4.027-13.418-.316-18.043 4.165-5.189 9.415-7.642 14.846-6.937 10.628 1.38 9.66 1.871 9.61-4.868-.023-3.3-.848-12.075-1.833-19.5-.985-7.425-2.155-16.875-2.6-21-.445-4.125-1.538-13.125-2.428-20-.89-6.875-2.282-17.9-3.091-24.5-.81-6.6-2.37-18.975-3.466-27.5-4.617-35.906-5.047-40.681-4.103-45.633.51-2.677 1.233-5.66 1.608-6.63.38-.982.084-2.482-.667-3.387-1.582-1.906-18.35-14.487-21.626-16.226L0 837.93V622.793l3.543 3.11c1.95 1.712 6.337 4.517 9.75 6.235 8.795 4.426 41.387 24.927 52.945 33.304A2537.79 2537.79 0 0 0 85.158 679c15.045 10.65 24.885 18.02 33.07 24.77 5.366 4.426 8.412 6.276 9.959 6.052 1.558-.225 4.741-3.935 10.573-12.322 4.59-6.6 9.108-13.308 10.042-14.906 3.314-5.673 24.304-33.231 30.448-39.976 2.063-2.265 3.75-4.405 3.75-4.757 0-1.362 45.305-52.074 57.5-64.363 4.4-4.433 12.016-10.747 16.925-14.03 8.653-5.786 19.026-14.62 26.917-22.925 8.832-9.293 17.977-26.097 21.822-40.097 1.854-6.752 2.19-10.651 2.237-25.946.064-21.446-1.509-28.95-9.454-45.1-6.182-12.565-12.598-20.064-37.3-43.593C237.596 358.895 227.12 350 224.192 350c-2.922 0-10.191 5.764-10.191 8.081 0 1.676 13.747 15.035 30.399 29.539 14.195 12.364 28.591 26.107 32.524 31.045 4.968 6.24 11.268 18.81 14.201 28.335 2.027 6.58 2.305 9.523 2.27 24-.039 15.794-.17 16.864-3.078 25.01-3.748 10.496-7.55 18.093-12.004 23.984-6.255 8.274-18.715 20.113-27.983 26.587-28.858 20.16-86.223 85.283-116.399 132.14-3.063 4.757-6.27 9.09-7.125 9.63-1.2.757-3.239-.382-8.93-4.991-15.452-12.514-34.916-26.234-59.117-41.67-22.265-14.204-39.718-24.45-42.988-25.238-1.962-.474-4.566.2-9.25 2.392L0 621.894V523.98c0-92.807.091-97.886 1.75-97.338 1.754.58 12.086 5.51 41.52 19.812 15.157 7.365 25.433 11.47 28.84 11.522.884.014 4.138 1.375 7.23 3.025 5.19 2.77 8.66 3.76 8.66 2.471 0-.29-1.4-3.3-3.11-6.689-2.594-5.139-3.01-6.894-2.504-10.58.574-4.186.366-4.685-3.962-9.497-2.511-2.794-5.259-6.419-6.105-8.055C69.825 423.828 67 414.907 67 411.856c0-2.21-.868-3.379-3.957-5.329-2.176-1.374-4.426-3.374-4.999-4.445-1.702-3.18-4.509-3.323-12.31-.63C37.302 404.361 35 404.6 35 402.562c0-1.935 3.677-17.23 4.438-18.463.333-.538-1.136-2.59-3.264-4.56-4.149-3.838-6.578-9.801-5.703-14.002l1.054-5.063c.29-1.39 2.146-4.32 4.127-6.512 4.249-4.702 4.638-1.847-4.257-31.213-.781-2.58.712-2.215 11.267 2.75 5.26 2.475 10.458 4.5 11.55 4.5 1.092 0 3.184-1.283 4.65-2.851C62.693 323.046 67.231 321 72.5 321c5.363 0 9.31 1.798 12.643 5.758 1.31 1.556 2.895 3.147 3.522 3.535.628.388 5.882-1.319 11.675-3.794 5.793-2.474 11.012-4.499 11.596-4.499 1.722 0 1.248 2.317-1.891 9.24-1.626 3.586-3.491 8.646-4.146 11.246l-1.19 4.728 4.775 4.082c10.303 8.806 10.22 20.865-.204 29.53-5.038 4.186-5.141 5.218-1.75 17.39 1.028 3.695 1.631 6.956 1.338 7.249-.292.293-4.512-1.03-9.378-2.941-9.567-3.756-10.33-3.669-12.996 1.487-1.226 2.37-1.127 3.189.921 7.608 2.44 5.266 7.372 11.072 11.737 13.815 1.458.917 6.183 2.519 10.5 3.56 13.878 3.347 31.991 12.76 35.832 18.621 2.202 3.361 3.516 2.963 3.516-1.066 0-4.063 1.31-11.009 4.152-22.002 1.13-4.374 2.404-11.775 2.83-16.447.685-7.514 1.088-8.763 3.494-10.833 2.92-2.511 5.523-2.35 8.821.549 2.852 2.506 9.843 13.197 10.85 16.59 3.096 10.44 4.727 18.002 5.306 24.594.59 6.726.294 8.763-2.87 19.738-6.316 21.9-10.455 26.603-19.806 22.505-8.618-3.777-13.295-4.51-25.506-3.995-14.889.627-23.885 3.245-27.514 8.007-9.145 12-15.918 37.588-14.298 54.022.989 10.037 4.163 21.553 7.209 26.156l2.633 3.98-2.4 4.543c-2.941 5.566-7.384 7.195-13.829 5.068-3.843-1.268-4.298-1.166-12.778 2.886-4.837 2.311-13.069 6.628-18.294 9.594-5.225 2.965-15.575 8.452-23 12.194-16.359 8.243-16.67 8.94-6.5 14.605 7.22 4.023 10.254 5.88 31.5 19.271 15.891 10.017 40.582 27.42 50.513 35.602 10.322 8.506 13.64 10.824 15.489 10.824 1.614 0 3.148-2.001 17.632-23 4.743-6.875 9.827-13.85 11.3-15.5 1.471-1.65 3.898-4.839 5.393-7.086 1.494-2.247 4.62-6.37 6.945-9.163 2.325-2.792 6.703-8.14 9.728-11.885 3.025-3.745 7.797-9.296 10.604-12.337 2.808-3.041 7.716-8.454 10.907-12.029 17.338-19.424 34.46-35.719 49.387-47 12.395-9.368 22.716-19.16 28.618-27.149 5.366-7.263 11.984-20.698 13.947-28.311 1.959-7.597 2.022-26.853.12-36.702-3.934-20.374-15.315-39.112-28.426-46.803-2.311-1.356-5.9-4.056-7.973-6-10.537-9.878-15.842-14.63-17.341-15.535-.911-.55-5.346-4.375-9.856-8.5-4.509-4.124-9.216-8.174-10.46-9-2.702-1.792-7.527-7.398-7.527-8.744 0-.526 2.813-3.369 6.25-6.318 3.438-2.949 15.925-14.85 27.75-26.445 11.825-11.596 25.005-24.42 29.29-28.496 9.348-8.895 26.116-28.08 36.896-42.215 22.498-29.501 27.075-36.153 28.199-40.982.573-2.465.214-2.884-4.116-4.8-2.61-1.153-5.678-2.976-6.82-4.048-1.143-1.073-4.748-2.436-8.013-3.028-3.265-.593-6.885-1.687-8.046-2.432-2.27-1.458-19.795-7.182-30.39-9.926-3.575-.926-7.85-2.155-9.5-2.73-1.65-.577-5.365-1.496-8.256-2.043-6.449-1.22-7.32-3.324-4.819-11.65 2.719-9.048 4.888-18.838 6.57-29.643.513-3.3 1.717-9.375 2.675-13.5 1.446-6.23 1.748-12.663 1.785-38 .028-19.222-.418-33.828-1.207-39.5-2.21-15.882-6.561-38.535-9.747-50.75C255.858.286 256.046 0 258.31 0c2.383 0 2.646.55 4.653 9.75 1.17 5.362 2.344 10.65 2.61 11.75 1.376 5.696 4.51 26.576 5.562 37.065 1.613 16.081 1.624 47.79.022 64.935-1.617 17.309-3.332 27.46-7.317 43.322-1.746 6.948-2.713 12.67-2.218 13.119.483.439 5.153 1.829 10.378 3.09 5.225 1.26 13.301 3.57 17.947 5.133 4.87 1.639 8.82 2.47 9.328 1.961 2.052-2.052 2.547-8.386 1.092-13.98-1.442-5.542-2.162-6.906-6.535-12.366-1.843-2.301-2.003-3.108-1.038-5.225 1.132-2.485 1.215-2.5 10.588-1.884 8.528.56 9.87.402 13.783-1.617 9.127-4.712 13.234-11.075 13.264-20.553.025-7.854-2.323-11.741-6.828-11.302-3.355.327-3.378.422-2.046 8.492.913 5.526.054 8.547-3.62 12.73-6.163 7.02-14.727 7.172-21.128.375-3.48-3.696-3.807-4.524-3.803-9.669.004-6.623 2.368-11.233 6.984-13.62 3.85-1.99 3.241-3.078-2.127-3.798-11.17-1.498-16.673-12.804-10.833-22.253C289.708 91.12 294.15 89 300.566 89c4.29 0 4.978.377 9.384 5.144 5.301 5.736 6.578 5.407 6.22-1.603-.136-2.683.557-5.354 2.062-7.947 3.43-5.908 6.83-7.98 13.203-8.041 4.703-.046 5.852.349 8.587 2.947 4.213 4.004 5.979 7.61 5.974 12.2-.007 6.742-5.213 12.779-12.265 14.221-3.432.702-4.337 2.528-3.3 6.658.474 1.891 1.266 2.421 3.62 2.421 7.786 0 16.694-7.029 19.955-15.747 1.097-2.93 1.994-6.13 1.994-7.109 0-4.481-3.287-12.189-6.995-16.401-4.514-5.128-4.678-5.787-2.326-9.376 1.592-2.43 1.996-2.528 7.818-1.904 9.36 1.002 14.68-.747 20.978-6.896 4.332-4.229 5.469-6.079 6.397-10.404 1.49-6.952 1.426-7.91-.876-12.981-1.706-3.76-2.317-4.277-4.728-4-2.732.314-2.764.398-2.447 6.514.442 8.545-2.185 14.428-7.697 17.24-5.18 2.643-9.374 2.613-14.202-.1C347.232 51.2 345 46.818 345 40.243c0-4.123.588-5.725 3.5-9.54 3.979-5.21 4.244-6.332 1.689-7.143-.996-.316-3.297-2.108-5.113-3.982-3.837-3.958-5.04-10.126-3.115-15.96L343.155 0h52.98l-.672 2.25c-1.292 4.329-3.667 6.953-8.047 8.89-4.73 2.093-5.714 4.703-3.113 8.26 3.683 5.037 19.91-6.627 21.298-15.308.48-2.999 1.127-4.092 2.421-4.092 1.479 0 1.647.53 1.028 3.25-1.133 4.981-4.519 10.915-8.212 14.392-4.076 3.837-10.89 7.358-14.24 7.358-3.566 0-3.962 1.387-2.045 7.16 2.128 6.406 1.541 15.792-1.335 21.37-5.371 10.411-15.397 15.907-29.968 16.426-1.833.065-1.525 2.85.656 5.912 3.131 4.398 5.314 13.448 4.548 18.86-1.882 13.297-8.164 19.461-26.308 25.815-.796.279-1.091 1.158-.716 2.135 4.593 11.97 1.758 24.402-7.463 32.733-6.147 5.553-10.17 6.94-18.195 6.27-3.7-.308-6.932-.23-7.182.173-.25.404.978 3.627 2.728 7.164 2.9 5.861 3.168 7.198 3.024 15.134l-.157 8.705 3.928 1.571c4.74 1.897 7.294 1.992 8.677.322.917-1.106 9.693-16.915 36.225-65.25 4.227-7.7 9.102-16.382 10.835-19.294 1.732-2.912 3.15-5.473 3.15-5.692 0-.22 2.839-5.262 6.308-11.206 3.47-5.945 8.716-15.308 11.66-20.808 2.943-5.5 8.059-14.725 11.369-20.5C405.347 36.28 424 1.775 424 .828 424 .373 444.25 0 469 0s45 .148 45 .33c0 .18-1.993 3.826-4.43 8.101-2.436 4.275-4.175 8.434-3.865 9.242.33.862-.89 2.986-2.96 5.148-3.99 4.166-6.745 9.11-6.745 12.106 0 1.115-1.056 2.719-2.346 3.564-2.605 1.707-4.654 5.518-4.654 8.655 0 1.128-1.405 3.364-3.122 4.968-2.49 2.325-3.01 3.478-2.568 5.687.46 2.302.1 2.976-2.128 3.98-1.557.703-3.88 3.413-5.541 6.465-1.572 2.89-5.231 9.304-8.13 14.254-2.9 4.95-9.762 16.875-15.25 26.5a8917.58 8917.58 0 0 1-17.476 30.5C424.14 157.962 420 166.01 420 168.25c0 1.07-1.35 3.209-3 4.75-2.017 1.884-3 3.765-3 5.74 0 2.086-.66 3.24-2.273 3.975-2.71 1.234-7.727 10.682-7.727 14.55 0 1.782-.53 2.735-1.522 2.735-2.349 0-9.478 11.724-9.478 15.588 0 2.397-.536 3.447-1.997 3.911-2.56.812-7.406 9.008-6.588 11.14.34.888.111 2.227-.51 2.975-3.002 3.617-.188 4.821 30.095 12.88 7.425 1.975 15.75 4.02 18.5 4.543 2.75.524 7.25 1.41 10 1.97s6.125 1.24 7.5 1.513c5.814 1.152 35.143 3.331 38.186 2.837 4.554-.739 11.061.754 26.314 6.037 24.81 8.593 45.558 8.292 59.039-.856 4.15-2.816 7.031-2.645 9.333.555.755 1.049 1.791 1.907 2.303 1.907s4.337 2.588 8.5 5.75c4.161 3.163 9.65 7.247 12.196 9.078 2.546 1.83 5.754 4.339 7.129 5.575 1.375 1.236 4.828 3.701 7.673 5.477 2.845 1.777 5.752 3.927 6.46 4.78.707.853 4.005 3.39 7.327 5.64 3.322 2.249 9.499 7.376 13.727 11.394 4.227 4.018 8.314 7.306 9.08 7.306.768 0 1.952 1.012 2.633 2.25.681 1.237 5.932 5.802 11.67 10.144 10.246 7.754 11.96 9.606 8.887 9.606-2.38 0-11.256 7.012-18.51 14.624-11.563 12.133-18.123 29.46-16.417 43.366.37 3.02 1.811 9.32 3.201 14 3.79 12.761 5.313 22.267 4.208 26.27-1.376 4.983-5.169 8.06-10.725 8.698-4.14.476-4.75.853-5.011 3.094-.353 3.023 2.225 5.676 5.797 5.966 6.038.49 7.88-.136 11.917-4.054 2.287-2.22 4.52-3.812 4.962-3.539.442.274 1.611 3.926 2.598 8.117 3.667 15.571.645 29.357-8.36 38.124-5.47 5.326-14.258 5.713-19.495.86-2.142-1.985-2.616-3.31-2.587-7.228.02-2.639.679-5.923 1.465-7.298 1.932-3.38 1.86-6.924-.156-7.698-2.441-.937-6.948 4.626-8.8 10.861-2.67 8.99.063 16.561 7.48 20.73 3.585 2.015 5.063 2.25 11.3 1.791 3.947-.29 8.314-.82 9.704-1.18l2.528-.652-.028 7.824c-.021 5.934.427 8.576 1.858 10.938 3.753 6.2 12.44 8.852 18.614 5.683 5.057-2.596 4.563-4.675-1.27-5.345-3.058-.352-5.572-1.35-7-2.778-2.01-2.009-2.225-3.192-2.18-11.952.044-8.417.491-10.93 3.332-18.722 6.758-18.538 5.517-31.298-6.321-64.977-1.93-5.487-3.164-10.32-2.744-10.74.42-.42 2.318-.318 4.217.227 7.789 2.234 14.113.037 17.998-6.25 2.754-4.46 2.334-10.137-.782-10.58-1.237-.175-2.25.115-2.25.645s-1.305 2.361-2.901 4.07c-5.198 5.563-14.212 3.512-19.064-4.338-1.917-3.101-2.188-4.657-1.805-10.353.675-10.07 3.777-16.888 11.452-25.178 3.627-3.917 9.457-9.165 12.956-11.662 3.5-2.497 6.362-5.228 6.362-6.068 0-1.168.649-1.367 2.75-.84 8.005 2.004 7.468 2.84 9.59-14.956 1.048-8.8 2.076-16.188 2.283-16.417 1.037-1.146 1.135 1.111.352 8.09a764.558 764.558 0 0 0-1.466 14.5c-.766 8.632-1.336 13.349-2.486 20.587-1.028 6.473.01 14.968 2.391 19.575 2.33 4.504 8.353 8.95 13.673 10.09 9.955 2.135 19.097-3.366 21.832-13.137 1.29-4.604.498-22.681-1.895-43.288-.511-4.4-1.428-12.725-2.038-18.5-.61-5.775-1.948-15.9-2.973-22.5s-2.357-16.5-2.96-22c-3.507-31.954-7.637-63.418-8.43-64.21-1.95-1.95-3.516 5.443-5.127 24.21-.33 3.85-1.04 7.44-1.576 7.978-1.042 1.044-.453-9.132 1.153-19.948 1.112-7.485.402-8.34-5.593-6.736-9.185 2.457-14.878 1.087-19.8-4.763-3.187-3.788-4.4-10.817-2.638-15.295 1.965-4.993 6.675-9.397 11.496-10.747 3.625-1.015 5.11-.956 8.952.353 4.032 1.374 4.677 1.386 5.172.098.31-.81-2.56-7.202-6.38-14.206s-7.242-13.547-7.604-14.54c-.825-2.265.967-6.591 6.587-15.899 2.423-4.012 6.79-11.795 9.703-17.295 2.915-5.5 5.67-10.408 6.123-10.908 1.674-1.843 3.358.529 13.433 18.908 1.206 2.2 3.614 6.395 5.351 9.323 5.112 8.614 6.277 12.017 4.97 14.518-.62 1.187-4.948 7.948-9.617 15.024-4.669 7.076-8.542 13.6-8.608 14.5-.126 1.722.73 1.773 9.103.548 16.518-2.417 24.215 21.679 9.65 30.214-3.571 2.093-5.321 2.484-9.62 2.15-2.889-.225-6.006-.752-6.926-1.17-2.675-1.218-3.748 2.072-2.739 8.393.484 3.025 1.566 11.35 2.405 18.5.84 7.15 2.877 23.125 4.527 35.5 1.651 12.375 4.126 32.175 5.5 44 1.374 11.825 2.945 23.945 3.49 26.934 1.273 6.983 1.286 30.159.018 33.492-.534 1.406-.742 3.123-.462 3.815.508 1.254 18.777 15.103 23.14 17.541l2.294 1.282v205.968c0 124.162-.364 205.968-.917 205.968-.504 0-1.066-.399-1.25-.887-.29-.77-14.616-7.933-49.575-24.786-5.083-2.45-10.033-4.34-11-4.2-.967.141-2.883-.083-4.258-.497-4.484-1.35-16.457-6.883-18.256-8.435-2.855-2.465-3.156-.7-1.402 8.226.912 4.641 1.658 10.2 1.658 12.352 0 3.334.74 4.686 4.98 9.11 6.004 6.261 9.682 12.326 11.98 19.755 1.89 6.106 10.02 16.362 12.972 16.362.945 0 5.025-1.125 9.068-2.5 12.145-4.13 12.375-3.92 9 8.257-2.183 7.878-2.505 11.243-1.077 11.243 2.533 0 7.142 5.531 8.683 10.42 2.34 7.425 1.333 11.661-4.173 17.548-2.438 2.607-4.433 5.287-4.433 5.956 0 .67 1.604 6.131 3.564 12.138 4.892 14.988 4.392 15.446-9.228 8.438-4.81-2.475-9.547-4.5-10.528-4.5-.995 0-2.908 1.783-4.33 4.036-5.304 8.401-15.463 10.66-23.078 5.133-2.145-1.557-4.539-4.032-5.319-5.5-1.134-2.132-2.14-2.669-5.007-2.669-1.973 0-5.16.487-7.08 1.083-8.65 2.681-9.988 2.797-10.977.95-.663-1.24-.214-4.117 1.504-9.65 1.347-4.335 2.439-8.558 2.426-9.383-.013-.825-1.781-2.716-3.93-4.201-5.282-3.653-7.054-6.659-7.643-12.972-.638-6.845 1.487-11.115 7.876-15.823 5.513-4.063 5.699-5.103 2.702-15.164-1.126-3.782-1.774-7.318-1.44-7.858.978-1.584 5.27-1.134 9.724 1.018 5.317 2.569 7.285 2.521 9.207-.223 2.218-3.165 1.935-6.275-1.028-11.333-4.061-6.929-12.884-13.06-20.915-14.534-9.427-1.73-19.665-6.54-29.33-13.78-8.333-6.244-8.732-6.126-9.647 2.861-.308 3.03-1.046 6.859-1.639 8.509-3.881 10.8-5.127 15.954-5.612 23.205-.456 6.83-.93 8.565-2.828 10.348-3.005 2.822-7.37 1.913-12.33-2.57-6.68-6.034-13.123-24.345-13.117-37.277.004-9.003 1.97-17.475 7.333-31.583 3.544-9.326 4.572-11.085 7.21-12.343 2.76-1.317 3.48-1.288 7.018.282 2.93 1.3 7.534 1.862 17.942 2.19 11.767.37 15.249.12 21.831-1.574 8.715-2.243 10.426-3.447 15.165-10.678 7.827-11.942 12.815-26.252 14.149-40.597.908-9.756-2.01-24.758-6.592-33.903-2.143-4.277-1.34-8.047 2.587-12.146 2.966-3.096 5.515-3.487 11.347-1.74 3.596 1.078 4.28.824 20.616-7.645A7752.258 7752.258 0 0 1 726 634.803c7.425-3.799 14.079-7.478 14.787-8.177 1.82-1.798.587-4.204-3.114-6.076-1.745-.883-3.848-2.025-4.673-2.539-.825-.513-5.1-3.056-9.5-5.65-18.51-10.912-61.88-41.008-66-45.8C655.443 564.17 638.82 552 637.609 552c-1.8 0-4.303 3.08-12.175 14.982-25.663 38.795-60.596 79.958-92.07 108.489-9.195 8.335-13.174 11.498-27.364 21.75-16.761 12.11-28.201 28.226-33.206 46.779-2.737 10.149-2.923 30.313-.378 41 3.64 15.284 16.529 37.238 24.584 41.876 1.925 1.108 7.173 5.527 11.663 9.82 4.49 4.292 14.375 13.654 21.968 20.804C547.22 873.124 552 878.049 552 879.523c0 .61-3.815 4.602-8.477 8.869-38.79 35.501-84.874 86.935-109.074 121.739-9.332 13.42-10.263 16.623-5.226 17.96 1.498.397 3.922 1.665 5.388 2.818 1.465 1.152 4.91 2.762 7.655 3.577 2.745.816 5.496 1.856 6.113 2.312 4.54 3.356 39.077 13.732 52.856 15.88 6.99 1.088 6.95.295 1.267 24.822-1.956 8.445-4.914 26.4-6.566 39.856-.811 6.61-1.021 17.806-.637 34 .548 23.158 1.023 28.309 4.254 46.144.797 4.4 1.448 9.66 1.448 11.691 0 2.03.386 3.93.86 4.223.473.292 1.134 2.456 1.47 4.809.335 2.352 1.748 7.827 3.14 12.166 3.502 10.923 3.4 12.611-.765 12.611-3.197 0-3.33-.169-4.551-5.75-10.731-49.052-11.58-55.706-11.58-90.75 0-25.006.312-31.066 2.259-44 2.293-15.237 5.358-31.238 7.19-37.53.88-3.024.736-3.695-1.118-5.22-1.17-.963-2.865-1.754-3.767-1.76-2.01-.01-19.411-4.405-24.81-6.265-5.59-1.925-6.329-1.366-6.329 4.793 0 6.614 1.148 9.736 5.558 15.118 3.93 4.795 4.407 8.575 1.355 10.713-1.542 1.08-2.912 1.225-5.244.556-1.735-.498-5.57-.905-8.522-.905-6.644 0-15.54 4.403-18.926 9.366-2.907 4.263-4.53 13.773-3.196 18.728 2.32 8.617 7.076 7.012 6.201-2.093-.402-4.186-.062-5.65 2.057-8.852 4.576-6.915 12.013-8.633 19.844-4.583 4.967 2.568 6.873 6.097 6.873 12.725 0 4.88-.473 6.64-2.5 9.298-3.25 4.261-3.166 4.867.943 6.817 8.718 4.137 11.494 14.656 6.057 22.954-3.986 6.083-13.245 7.537-19.768 3.104-2.053-1.395-3.732-2.885-3.732-3.311 0-1.521-4.138-5.186-5.15-4.56-.589.364-.762 2.062-.404 3.969.786 4.19-1.196 8.994-5.3 12.854-4.042 3.8-11.972 4.71-17.635 2.022-4.007-1.901-7.467-7.665-7.467-12.438 0-7.065 6.939-14.988 13.135-14.996 2.91 0 6.138-2.552 5.534-4.366-.601-1.803-7.294-2.424-11.296-1.048-7.95 2.733-15.417 13.697-15.417 22.64 0 5.46 3.778 14.046 6.92 15.728 5.114 2.736 5.829 6.15 2.012 9.604-1.576 1.426-2.54 1.525-6.15.63-7.777-1.927-16.572.803-22.47 6.973-4.001 4.184-5.312 7.623-5.312 13.932 0 4.941 2.17 11.917 3.699 11.888 2.806-.054 3.802-2.217 3.82-8.302.017-5.343.451-6.955 2.651-9.84 1.448-1.897 4.48-4.283 6.74-5.302 3.542-1.598 4.662-1.686 8.142-.643 5.967 1.787 9.984 5.83 10.929 10.997 1.197 6.547-.393 10.99-5.642 15.762-4.97 4.518-4.958 5.64.08 7.745 6.683 2.792 10.578 13.363 7.586 20.586l-1.248 3.012H364l.022-2.25c.034-3.445 3.483-10.29 6.12-12.142 1.297-.911 4.084-1.935 6.194-2.274 4.421-.711 5.166-1.883 3.681-5.789-.96-2.523-1.414-2.742-4.616-2.223-9.144 1.484-17.776 10.485-19.015 19.827-.385 2.904-1.151 4.851-1.908 4.851-2.034 0-2.58-2.905-1.383-7.357 3.103-11.534 10.078-18.458 21.76-21.604 3.837-1.033 4.26-1.425 3.622-3.354-.397-1.202-.93-5.785-1.182-10.185-.37-6.432-.08-8.883 1.483-12.507 4.682-10.86 11.292-15.127 24.472-15.794 4.813-.244 8.75-.661 8.75-.927s-1.288-2.124-2.863-4.128c-6.724-8.558-8.388-16.057-5.605-25.25 3.06-10.106 11.902-18.099 21.468-19.405 10.212-1.395 10.464-1.7 7-8.489-3.001-5.883-2.747-15.286.584-21.601 5.849-11.09 11.917-14.755 24.916-15.053 5.272-.12 8.909-.613 8.78-1.189-.122-.54-1.36-2.658-2.75-4.707-3.285-4.842-4.682-10.224-4.409-16.987.122-3-.102-5.777-.496-6.171-1.232-1.232-10.017-4.29-12.326-4.291-1.681 0-3.084 1.593-5.943 6.749-10.795 19.47-42.122 74.956-73.823 130.75-20.108 35.392-30.238 53.455-32.524 58l-1.509 3-42.75.26c-25.79.158-42.75-.106-42.75-.666zm151.545-17.549c4.049-4.048 2.919-9.282-2.487-11.521-5.848-2.422-12.058.973-12.058 6.592 0 6.995 9.321 10.154 14.545 4.93zm51-93c4.459-4.458 2.761-11.022-3.137-12.128-4.425-.83-7.868.864-9.433 4.643-1.502 3.627-.5 6.588 2.844 8.404 3.934 2.136 6.957 1.85 9.726-.918zM47.686 1121.25c5.6-8.098 15.09-24.307 16.354-27.935.975-2.796.354-4.467-7.466-20.11-4.69-9.382-9.017-17.361-9.615-17.73-.597-.369-1.988.147-3.092 1.146-1.733 1.568-9.662 14.233-14.995 23.952a200.488 200.488 0 0 1-3.775 6.5c-1.15 1.885-2.091 4.256-2.093 5.27-.005 2.568 18.07 34.657 19.523 34.657.65 0 2.972-2.587 5.16-5.75zm-11.597-17.44c-2.781-5.12-5.065-10.483-5.073-11.917-.022-3.599 11.565-21.122 13.691-20.706.879.172 3.78 4.12 6.446 8.772 6.414 11.194 6.377 13.193-.445 24.09-7.288 11.638-8.174 11.623-14.619-.24zm30.142-46.857c5.35-1.486 8.769-6.326 8.769-12.415 0-4.211-.457-5.23-3.882-8.656-3.518-3.517-4.373-3.882-9.1-3.882-4.6 0-5.62.402-8.618 3.4-2.934 2.934-3.4 4.065-3.396 8.25.004 5.977 2.799 10.926 7.266 12.867 3.944 1.715 4.294 1.732 8.96.436zm-27.497-3.487c3.445-3.445 3.517-3.676 2.864-9.23-.81-6.892-2.655-9.944-7.144-11.82-9.197-3.843-18.454 1.81-18.454 11.269 0 8.843 4.552 13.205 13.85 13.275 4.816.036 5.703-.313 8.884-3.494zm12.234-48.532c1.614-13.989 3.646-31.059 4.514-37.934.868-6.875 3.158-27.125 5.089-45 1.93-17.875 4.006-36.325 4.613-41 1.478-11.387.013-18.67-4.838-24.039-8.08-8.943-23.154-8.92-30.7.048-5.275 6.269-5.314 7.75-1.173 44.727 2.08 18.57 3.881 34.439 4.003 35.264 1.102 7.493 2.636 19.66 4.476 35.5 2.97 25.572 6.204 51.285 6.73 53.5.97 4.08 2.412 6.306 3.427 5.291.508-.508 2.244-12.369 3.859-26.357zm-8.35-18.684c-.285-.963-1.253-8.275-2.152-16.25-.898-7.975-2.293-19.225-3.1-25-.806-5.775-1.871-15-2.366-20.5-.496-5.5-1.375-12.925-1.953-16.5-1.34-8.27-2.556-37.837-1.698-41.256 1.516-6.04 9.735-12.32 14.493-11.075 3.267.854 2.65 2.398-2.935 7.331-4.124 3.644-5.257 5.356-5.955 9-1.036 5.407.868 32.195 4.976 70 3.859 35.507 4.455 46 2.613 46-.774 0-1.64-.787-1.924-1.75zm346.889 4.735c2.24-4.967 2.357-4.858-8.996-8.393-26.142-8.14-51.566-14.158-70.011-16.573-4.95-.648-11.925-1.618-15.5-2.156-7.86-1.182-64.661-2.416-68.369-1.485-4.7 1.18-2.814 2.416 7.119 4.669 5.362 1.215 13.125 3.439 17.25 4.94 6.299 2.293 9.822 2.842 22 3.427 26.847 1.292 32.066 1.85 53.3 5.705 13.567 2.463 39.682 9.124 50.2 12.804 4.952 1.733 8.598 2.494 9.57 1.999.865-.44 2.41-2.662 3.437-4.937zm5.936-11.208c2.677-3.821 1.95-5.68-3.065-7.83-4.984-2.136-5.202-3.042-2.466-10.223 1.477-3.876 3.526-4.33 9.851-2.18l5.487 1.866 1.922-2.374c3.926-4.849 2.521-6.132-12.172-11.112-35.288-11.96-66.473-18.658-109-23.412-15.76-1.762-56.902-2.036-73.5-.49-28.685 2.672-33.992 3.344-48 6.085-18.637 3.647-25.5 5.587-25.5 7.207 0 .693 2.297 2.974 5.105 5.07 5.417 4.045 5.193 4.021 15.243 1.587 2.667-.646 5.192-.791 5.612-.323.42.469 1.231 2.777 1.803 5.13.823 3.39.748 4.568-.362 5.678-2.246 2.246-1.641 4.232 1.967 6.462 4.05 2.504 9.12 2.647 23.708.668 27.423-3.718 67-4.4 98.588-1.697 25.422 2.175 62.165 9.784 88.836 18.395 13.2 4.263 13.954 4.333 15.943 1.493zm-28.404-15.719c-6.907-2.25-7.729-3.523-6.08-9.413 1.841-6.574 2.53-6.865 10.58-4.465 9.768 2.91 10.2 3.46 7.853 10.005-2.232 6.228-3.707 6.69-12.353 3.873zm-27.539-6.56c-.55-.214-2.97-.897-5.38-1.517l-4.378-1.128.666-5.676c.943-8.029 1.561-8.412 10.592-6.564 10.025 2.05 10.556 2.656 8.296 9.47-1.693 5.106-1.997 5.428-5.296 5.612-1.925.107-3.95.019-4.5-.196zm-160.25-5.635c-1.854-1.874-1.64-11.776.27-12.509.836-.32 4.746-.644 8.688-.719l7.169-.135.852 4c1.052 4.935.32 8.21-1.981 8.861-4.946 1.4-13.815 1.697-14.998.502zM306 951.63c-8.755-1.523-9.278-1.954-8.498-6.984 1.293-8.327.882-7.993 8.982-7.308 3.994.338 8.501 1.085 10.015 1.66 2.656 1.01 2.728 1.23 2.062 6.25-1.095 8.254-1.278 8.347-12.561 6.382zm-97.333-3.298c-.367-.366-.667-3.058-.667-5.98 0-4.954.187-5.365 2.75-6.046 1.512-.402 5.45-.748 8.75-.769l6-.038.305 5.907c.208 4.05-.106 6.168-1 6.735-1.555.986-15.182 1.148-16.138.191zm61.583-.019c-2.052-.413-2.25-1.017-2.25-6.864 0-7.576.561-7.918 11-6.705l6.5.755v13l-6.5.134c-3.575.074-7.513-.07-8.75-.32zm-31.821-1.64c-.299-.776-.405-3.834-.236-6.793l.307-5.381 7.094-.29c8.592-.353 9.308.304 8.5 7.79l-.594 5.5-7.264.294c-5.54.224-7.394-.041-7.807-1.12zm-49.956 23.127c5.16-2.507 5.769-3.806 1.777-3.79-5.33.021-10.25 1.255-10.25 2.57 0 1.03 2.392 3.207 3.723 3.389.123.016 2.26-.96 4.75-2.17zm234.032-32.75c-.652-6.495-.54-7.1 1.707-9.25 1.323-1.266 3.125-2.751 4.003-3.301 2.622-1.64 3.034-4.97.937-7.56-2.703-3.34-8.337-3.21-11.818.271-4.824 4.825-4.152 17.286 1.281 23.744 3.937 4.678 4.677 3.935 3.89-3.904zM395 941.177c0-.452-3.712-4.39-8.25-8.75-7.888-7.581-12.218-11.519-27.408-24.927-3.739-3.3-10.636-9.6-15.327-14-4.691-4.4-17.073-15.65-27.515-25-10.443-9.35-21.914-19.71-25.493-23.024A1081.107 1081.107 0 0 0 279 834.545c-3.025-2.7-8.65-7.864-12.5-11.476-3.85-3.613-11.313-10.394-16.585-15.069-5.272-4.675-14.96-13.45-21.528-19.5-20.618-18.992-23.472-21.5-24.464-21.5-1.427 0-2.438 2.891-6.993 20C188.311 819.374 163 921.773 163 924.27c0 2.289-1.596 2.357 26.5-1.138 31.65-3.937 40.247-4.438 66.5-3.873 47.118 1.015 78.455 5.825 124.5 19.111 13.043 3.764 14.5 4.046 14.5 2.807zm-55.5-23.83c-12.948-2.624-25.889-4.308-45-5.855l-28-2.265c-11.186-.904-54.873.23-67.568 1.754-19.603 2.353-21.84 2.423-22.5.703-.661-1.724 1.767-11.705 17.559-72.184 1.005-3.85 4.156-16 7.002-27 5.334-20.613 6.695-24.589 8.64-25.22.622-.203 6.022 4.28 12 9.962 12.738 12.108 40.598 37.722 50.177 46.132 3.68 3.23 11.865 10.673 18.19 16.538 6.325 5.866 15.55 14.227 20.5 18.58 4.95 4.354 10.129 9.062 11.508 10.462 1.38 1.4 8.917 8.34 16.75 15.423 7.833 7.082 14.242 13.27 14.242 13.75 0 1.205-5.187.906-13.5-.78zm-1.5-6.808c0-.804-1.012-2.423-2.25-3.598-4.092-3.885-27.931-25.412-49.25-44.473-11.55-10.326-21.9-19.762-23-20.97-1.1-1.206-8.214-7.774-15.809-14.596a6121.275 6121.275 0 0 1-24.5-22.133c-5.88-5.353-11.238-9.74-11.906-9.75-1.91-.03-2.67 2.171-8.28 23.981-2.902 11.275-8.08 31.3-11.507 44.5-11.362 43.76-11.045 42.353-9.813 43.585.849.849 4.033.858 12.477.038 6.236-.605 25.513-1.379 42.838-1.718 33.31-.653 55.344.517 85 4.514 7.425 1.001 14.063 1.879 14.75 1.95.688.072 1.25-.526 1.25-1.33zm-64-17.34c-22.146-1.27-30.76-1.327-52.43-.341-27.673 1.258-28.295 1.178-26.542-3.433.47-1.233 3.388-12.295 6.487-24.583 3.1-12.288 6.91-27.067 8.47-32.842a4949.01 4949.01 0 0 0 3.964-14.75c.778-2.929 1.66-4.24 2.84-4.22.94.015 5.761 3.886 10.711 8.6 4.95 4.714 13.725 12.865 19.5 18.114 5.775 5.248 14.55 13.234 19.5 17.747 4.95 4.512 14.4 13.038 21 18.946 6.6 5.908 13.25 12.073 14.78 13.7 2.878 3.066 2.842 4.966-.089 4.723-.93-.077-13.616-.824-28.191-1.66zM225 881.5c4.5-3.575 8.539-6.5 8.973-6.5 1 0 10.694 3.71 23.362 8.94 7.705 3.18 11.116 4.06 15.75 4.06 3.253 0 5.915-.383 5.915-.851 0-1.12-45.155-19.149-47.96-19.149-1.852 0-15.38 11.517-19.758 16.82-1.674 2.028-.701 3.18 2.685 3.18 2.001 0 5.286-1.936 11.033-6.5zm23.698 4.912c.42-1.267-11.154-6.42-14.413-6.415-2.557.003-9.561 5.747-8.703 7.136.818 1.323 22.664.642 23.116-.72zm-40.198-5.024c11.48-10.518 20.003-17.476 22.028-17.984 1.273-.32 5.813.956 11.065 3.11 7.474 3.063 22.852 9.068 38.407 14.997 4.042 1.54 6.036.45 3.908-2.137-1.719-2.09-8.646-5.273-33.717-15.499-10.62-4.331-20.422-7.875-21.781-7.875-3.712 0-24.77 18.942-26.857 24.158-2.905 7.261-.166 7.746 6.947 1.23zm8.517-22.872c5.278-4.657 9.355-7.49 10.792-7.5 1.27-.01 9.226 2.914 17.68 6.495 16.051 6.8 21.511 8.495 21.511 6.681 0-2.21-8.862-8.185-15.912-10.728-4.04-1.457-10.926-4.183-15.305-6.057-4.378-1.874-8.847-3.407-9.931-3.407-2.506 0-18.58 13.463-19.307 16.171-.3 1.118-.802 2.887-1.113 3.93-1.17 3.92 3.201 1.812 11.585-5.585zM218 843.5c5.245-5.344 6.746-5.502 15.805-1.662 10.486 4.446 13.728 4.902 11.43 1.61-2.372-3.4-18.236-11.448-22.564-11.448-2.623 0-9.63 6.44-11.156 10.254-2.855 7.136.14 7.711 6.485 1.246zm.5-14.5c.34-.55 1.73-1 3.09-1 3.515 0 4.29-2.869 1.407-5.203-3.425-2.774-6.084-1.943-7.57 2.368-.695 2.016-1 3.928-.679 4.25.922.922 3.073.683 3.752-.415zm221.106 108.523c3.094-2.028 3.052-5.046-.099-7.11-4.922-3.225-11.503 1.483-10.067 7.202.596 2.378 1.001 2.575 4.216 2.053 1.955-.317 4.633-1.283 5.95-2.145zm-27.886-10.3c-.224-8.953-.15-9.202 4.7-15.745 1.31-1.767-1.05-6.943-3.85-8.44-1.886-1.01-2.857-.94-5.417.383-5.907 3.054-7.507 9.656-4.663 19.234 1.522 5.125 6.75 13.345 8.487 13.345.562 0 .872-3.658.743-8.777zm-275.793 4.364c1.532-1.846-.9-7.967-3.777-9.507-2.859-1.53-6.69-1.338-8.14.407-2.26 2.725-.398 5.974 4.71 8.216 5.944 2.609 5.792 2.59 7.207.884zm7.877-9.933c-.54-6.526-4.402-14.654-7.861-16.548-2.193-1.2-2.976-1.2-5.5.006-5.284 2.525-4.267 8.109 1.716 9.423 1.92.421 3.461 1.63 4.229 3.314 4.731 10.384 8.106 12.116 7.416 3.805zm255.176-.904c-.011-.688-.437-4.13-.946-7.651-1.66-11.491 1.34-20.43 7.527-22.416 6.49-2.084 8.155-6.232 4.413-10.989-2.636-3.351-5.015-4.031-9.675-2.765-2.888.785-4.558 2.176-6.965 5.802-3.735 5.626-4.46 8.629-4.5 18.612-.03 7.555 1.284 11.903 5.412 17.907 1.943 2.827 4.77 3.722 4.734 1.5zm103.783-3.629c15.41-7.862 14.639-34.704-1.082-37.653-4.472-.839-11.386 1.112-12.71 3.587-1.603 2.994-.364 3.945 5.136 3.945 4.077 0 5.425.471 7.379 2.579 5.96 6.432 2.859 17.722-5.423 19.738-8.27 2.014-17-3.286-22.12-13.43-3.253-6.443-9.294-29.592-10.41-39.887-1.973-18.202-11.426-44.81-20.095-56.569-3.104-4.208-15.317-10.168-24.302-11.857-7.916-1.489-9.036-1.38-34.636 3.36-13.293 2.46-29.01 2.697-36.253.547-7.382-2.192-14.46-8.173-17.833-15.068-7.087-14.485-.638-29.907 13.385-32.01 5.767-.865 10.814 1.64 13.505 6.703 2.27 4.27 1.59 11.314-1.402 14.498-2.714 2.889-2.145 5.807 1.207 6.198 1.928.225 3.387-.602 5.692-3.229 7.031-8.007 5.003-21.043-4.387-28.207-3.039-2.318-5.077-2.965-10.657-3.381-7.987-.597-13.349.703-18.218 4.418-1.873 1.428-3.612 2.597-3.865 2.597-.93 0-1.71-3.425-3.62-15.888-1.074-7.01-2.696-14.933-3.604-17.607-3.408-10.039-11.39-19.777-19.95-24.337-4.375-2.332-6.125-2.66-14-2.624-7.946.037-10.354.524-20.562 4.16-16.841 5.998-21.099 6.084-27.039.543-5.144-4.798-6.248-10.277-2.922-14.497 3.05-3.87 7.125-3.713 10.342.399 2.95 3.768 5.697 3.346 5.65-.868-.114-9.92-16.537-11.312-23.381-1.98-1.522 2.074-2.055 4.325-2.055 8.675 0 4.949.483 6.554 3.07 10.199 5.318 7.497 15.17 10.746 25.781 8.505 3.523-.745 3.813-.652 3.12 1-2.727 6.49-1.183 19.873 3.053 26.474 2.55 3.975 11.327 8.846 15.938 8.846 5.423 0 11.53-2.226 13.372-4.874 2.938-4.223 4.325-9.19 3.01-10.774-1.81-2.182-3.575-1.577-5.77 1.976-2.332 3.773-5.776 5.672-10.286 5.672-2.308 0-4.183-1.099-7.453-4.368-4.008-4.009-4.368-4.787-4.368-9.435 0-6.399 1.29-9.817 5.311-14.07 8.966-9.48 22.234-9.597 30.957-.272 9.392 10.041 12.887 21.721 17.248 57.645 1.728 14.236 2.823 19.146 5.532 24.791 3.863 8.054 10.227 13.295 20.722 17.067 11.581 4.163 19.287 4.667 36.73 2.402 2.437-.317 2.428 1.768-.034 8.24-3.57 9.387-2.086 19.579 4.07 27.942 5.364 7.286 11.503 10.693 28.031 15.557 12.423 3.655 18.557 6.804 23.83 12.234 5.11 5.26 6.388 8.862 4.312 12.154-4.907 7.783-4.622 10.354 1.213 10.932 4.476.443 7.795-2.054 9.081-6.832 1.9-7.054-2.4-16.817-10.198-23.155-4.72-3.837-14.293-10.073-17.055-11.111-2.544-.957-2.153-2.96 1.205-6.178 4.154-3.98 6.33-10.774 5.013-15.66-1.12-4.163-3.564-7.184-5.334-6.595-.624.207-1.463 2.986-1.864 6.174-1.63 12.935-13.213 19.153-25.384 13.626-6.02-2.734-10.88-11.445-10.709-19.195.146-6.588 1.753-10.05 6.99-15.058 6.743-6.447 11.633-8.343 21.344-8.277 11.365.077 17.272 3.108 24.067 12.35 6.054 8.236 11.873 25.363 14.81 43.592.62 3.85 1.818 11.272 2.662 16.492 2.116 13.1 5.313 25.75 7.694 30.457 3.877 7.658 9.093 14.596 12.605 16.767 8.09 5 18.367 5.755 25.914 1.905zM148.8 912.207c.56-9.55-6.3-26.711-12.086-30.24C130.835 878.383 125 880.392 125 886c0 3.436 2.557 5.731 7.539 6.767 5.73 1.19 8.593 6.024 12.462 21.048 1.475 5.729 3.418 4.907 3.8-1.608zm550.47-2.06c3.1-3.056 3.883-4.65 4.39-8.925.537-4.542.278-5.716-2.037-9.214-1.886-2.85-3.355-4.008-5.081-4.008-3.093 0-5.543 3.451-5.543 7.806 0 4.322-2.193 3.794-3.123-.751-.37-1.813-1.643-4.254-2.829-5.426l-2.155-2.129-3.446 3.735c-2.984 3.234-3.447 4.416-3.447 8.8 0 5.736 1.99 10.354 5.202 12.073 7.184 3.845 12.803 3.235 18.07-1.96zM385 909.658c0-.19-.916-3.002-2.036-6.25-3.068-8.9-2.895-11.964.872-15.404 3.855-3.521 4.013-6.19.53-8.93-4.279-3.366-8.55-2.37-11.203 2.611-2.856 5.363-.072 17.726 5.443 24.169 1.952 2.28 4.19 4.147 4.972 4.147s1.422-.155 1.422-.343zM151.775 890.03c-.507-8.368-3.82-17.448-6.982-19.141-2.895-1.55-6.793 1.34-6.793 5.035 0 2.2.783 3.34 3.322 4.838 2.805 1.655 3.752 3.263 6.092 10.344 1.524 4.612 3.057 8.837 3.405 9.39 1.056 1.672 1.438-2.515.956-10.466zM369 886.106c0-7.379.153-7.912 3-10.448 3.361-2.995 3.733-5.167 1.443-8.435-1.15-1.644-2.561-2.223-5.41-2.223-8.229 0-11.706 10.508-6.949 21 2.295 5.063 5.774 9.206 7.061 8.41.47-.29.855-4.027.855-8.304zm173.48-.652c2.36-2.16 3.555-4.073 3.346-5.35-.18-1.094-12.926-14.013-28.326-28.708-15.4-14.696-29.828-29.067-32.062-31.936-18.685-23.996-23.218-58.892-11.38-87.6 6.496-15.754 17.649-28.172 37.998-42.312 13.084-9.09 27.68-22.89 48.814-46.148 19.602-21.572 22.225-24.695 40.228-47.9 14.81-19.087 17.251-22.517 26.696-37.5 5.948-9.435 7.16-11 8.517-11 .67 0 4.136 2.362 7.702 5.25 6.56 5.312 17.085 13.393 33.487 25.711 22.8 17.123 64.301 43.068 68.799 43.01 3.207-.04 14.201-6.212 14.201-7.971 0-.825-3.6-3.606-8-6.18-38.021-22.246-75.827-48.25-105.505-72.57-6.208-5.088-12.052-9.25-12.985-9.25-1.07 0-6.254 6.563-14.021 17.75-15.229 21.933-24.277 34.305-29.489 40.32-2.2 2.54-6.68 8.353-9.954 12.92-17.584 24.521-61.608 69.42-78.655 80.219-1.435.909-4.66 3.371-7.165 5.472-2.505 2.1-6.396 5.31-8.648 7.132-9.174 7.425-21.498 26.434-27.532 42.469-5.22 13.87-7.321 38.304-4.62 53.718 1.863 10.628 8.596 28.018 14.085 36.379 2.572 3.916 8.01 10.775 12.083 15.242 7.73 8.476 46.033 45.992 51.63 50.569 3.853 3.152 5.755 2.845 10.756-1.736zm126.558-1.704c3.448-1.739 4.534-2.88 4.78-5.024.288-2.496-.238-3.03-5.26-5.328-5.767-2.64-6.455-4.398-1.721-4.398 3.243 0 7.163-2.52 7.163-4.604 0-.82-1.19-2.595-2.646-3.944-2.13-1.974-3.7-2.452-8.05-2.452-9.829 0-15.308 4.794-15.297 13.385.008 6.044 2.339 10.183 7.193 12.772 4.483 2.39 8.528 2.27 13.838-.407zm28.408-4.364c4.155-3.638 7.554-6.913 7.554-7.278 0-2.65-10.735-14.108-13.218-14.108-2.267 0-16.782 11.673-16.782 13.496 0 2.76 10.64 14.504 13.142 14.504.963 0 5.15-2.977 9.304-6.614zm27.76 4.007c8.464-4.376 8.825-18.355.604-23.367-4.376-2.668-10.299-2.565-15.31.267-7.09 4.007-5.329 8.343 3.919 9.652 5.542.785 5.585 2.646.077 3.4-8.256 1.132-10.31 3.62-6.951 8.416 2.929 4.181 11.245 4.95 17.661 1.632zm-568.474-2.643c-.613-4.09-6.22-19.428-7.796-21.328-1.442-1.737-4.118-1.84-5.736-.222-2.17 2.17-1.343 5.562 1.923 7.888 1.946 1.385 4.439 4.994 6.611 9.568 3.694 7.777 5.81 9.51 4.998 4.094zm199.888 0c-.333-1.788-.86-7.75-1.171-13.25-.668-11.838.177-14.136 6.213-16.875 6.72-3.05 8.065-8.052 3.415-12.702-6.092-6.092-14.217-2.664-17.367 7.327-3.331 10.569-1.138 27.063 4.806 36.134 2.519 3.844 4.872 3.48 4.104-.634zM344 873.537c0-.255-.856-2.634-1.901-5.287-1.046-2.653-2.213-7.311-2.592-10.35-.633-5.067-.464-5.797 2.026-8.757 4.791-5.694 3.08-11.143-3.5-11.143-5.905 0-7.547 2.608-7.468 11.86.076 8.81 2.579 15.616 7.682 20.89 2.708 2.798 5.753 4.273 5.753 2.787zm-184-4.853c0-19.268-11.384-35.83-21.066-30.649-1.32.707-1.934 2.097-1.934 4.378 0 3.938 1.195 5.091 6.209 5.994 2.457.443 4.39 1.627 5.731 3.51 1.68 2.36 5.853 11.97 8.393 19.333 1.125 3.258 2.667 1.774 2.667-2.566zM488.056 870c.491 0 1.578-1.325 2.415-2.944 1.964-3.797.609-7.695-3.175-9.133-5.52-2.1-10.866 3.336-8.465 8.606 1.215 2.667 4.759 4.645 7 3.908.733-.24 1.734-.437 2.225-.437zm-323.663-13.582c1.114-2.903.544-6.848-2.228-15.418-2.186-6.756-3.285-8.758-5.358-9.757-6.653-3.206-9.35 4.25-2.867 7.928 2.43 1.378 3.415 3.174 5.62 10.25 2.664 8.54 3.677 10.009 4.833 6.997zM327 848.894c0-8.253.234-9.383 2.5-12.076 3.077-3.657 3.164-6.121.311-8.779-2.819-2.627-6.99-2.605-9.391.05-2.311 2.553-3.184 14.36-1.52 20.543 1.099 4.077 5.081 9.368 7.052 9.368.654 0 1.048-3.425 1.048-9.106zM687 855c1.333-1.333 2-3.333 2-6 0-5.234 1.318-5.075 3.413.412 2.577 6.747 5.818 6.91 9.153.46 5.52-10.675-5.164-22.212-17.496-18.89-4.51 1.214-8.53 6.064-9.644 11.637-1.042 5.213 4.884 14.381 9.297 14.381.702 0 2.177-.9 3.277-2zm-371.673-21.02c.233-14.31.993-16.252 7.119-18.206 2.513-.801 4.563-2.294 5.525-4.024 1.37-2.465 1.371-3.032.005-5.475-3.849-6.88-12.63-6.497-17.901.78l-2.872 3.965-1.037-2.975c-.666-1.91-1.956-3.205-3.602-3.618-9.033-2.267-12.69 6.487-8.61 20.608 1.666 5.764 6.715 12.965 9.091 12.965 1.714 0 1.96-.404 1.368-2.25-1.623-5.058-2.366-9.519-2.389-14.326-.02-4.12.44-5.511 2.443-7.393l2.467-2.317-.614 10.08c-.426 6.982-.212 11.52.695 14.76 1.353 4.83 5.52 10.768 7.17 10.218.516-.172 1.03-5.929 1.142-12.792zm-260.668 8.243c4.827-2.302 9.592-10.129 10.097-16.587 1.282-16.373-20.05-27.22-32.328-16.438-5.17 4.539-6.791 8.297-6.817 15.802-.034 10.277 4.687 16.802 13.82 19.098 4.01 1.008 10.981.15 15.228-1.875zm-19.458-8.26c-3.84-3.69-4.201-4.469-4.201-9.05 0-5.713 1.789-9.815 5.581-12.798 3.352-2.637 8.884-3.68 11.996-2.262 4.261 1.942 2.543 5.147-2.759 5.147-1.11 0-3.548 1.53-5.418 3.4-4.814 4.814-4.65 8.585.6 13.835 4.736 4.736 4.95 5.765 1.201 5.765-1.908 0-4.134-1.284-7-4.037zm132.782 8.787c-.066-4.726-3.245-19.516-4.75-22.104-1.424-2.447-2.617-3.213-5.367-3.447-4.553-.386-6.607 1.792-5.271 5.59.516 1.467 1.895 3.146 3.065 3.729 3.834 1.911 5.212 3.575 6.883 8.31 2.837 8.039 3.385 9.172 4.436 9.172.561 0 1.013-.563 1.004-1.25zM600 828.498c0-4.692.735-8.029 2.896-13.143 3.95-9.35 5.262-16.552 5.412-29.7.202-17.725-3.154-25.655-10.856-25.655-3.906 0-6.657 2.856-9.343 9.702-8.175 20.829-8.254 40.172-.23 56.055 2.908 5.755 5.316 8.562 8.121 9.465 3.178 1.024 4-.358 4-6.724zm-427.64-2.102c.943-6.885-.15-12-4.534-21.225-3.307-6.956-4.527-8.566-7.401-9.767-8.31-3.472-16.216 3.805-10.425 9.596 1.1 1.1 3.237 2.007 4.75 2.015 1.512.008 3.256.346 3.875.75 2.45 1.6 7.266 10.652 8.922 16.771.962 3.555 2.297 6.464 2.966 6.464.686 0 1.49-2.003 1.846-4.604zm512.975-1.028c3.249-.446 4.787-1.178 5.199-2.475.841-2.65-6.455-14.644-12.043-19.795-4.494-4.142-7.434-5.705-21.737-11.559-12.381-5.067-25.067-14.714-29.419-22.372-3.483-6.128-4.908-7.167-9.835-7.167-8.5 0-9.734 4.128-4.375 14.63 6.218 12.187 11.84 16.024 41.65 28.427 10.176 4.233 16.911 9.175 19.688 14.443 3.91 7.417 3.03 6.943 10.872 5.868zM289 814.648c0-7.915.157-8.515 3-11.49 3.488-3.65 3.786-6.137 1.033-8.628-2.583-2.338-6.579-2.258-9.877.197-2.292 1.707-2.697 2.816-2.953 8.094-.163 3.364.186 7.91.776 10.102 1.07 3.971 5.377 10.077 7.11 10.077.501 0 .911-3.758.911-8.352zM368 821c3.534-3.534 1.836-9.01-2.785-8.985-4.01.023-5.536 1.415-5.435 4.96.167 5.867 4.336 7.909 8.22 4.025zm-191.733-15.54c-.434-12.749-4.325-21.042-9.267-19.75-5.762 1.507-6.194 8.663-.68 11.29 2.642 1.26 3.503 2.624 5.363 8.5 1.219 3.85 2.239 7.15 2.267 7.333.027.184.613.136 1.3-.105.867-.304 1.179-2.529 1.017-7.267zm100.357-2.71c-.545-12.029.677-16.113 5.876-19.63 7.29-4.935 8.07-10.735 1.977-14.727-3.829-2.509-8.94-.94-12.88 3.953l-3.097 3.847.036 12.653c.033 11.293.29 13.138 2.385 17.154 2.26 4.331 3.709 5.952 5.35 5.985.425.008.583-4.148.353-9.235zm481.19-1.022c.418-2.17-10.551-23.311-18.02-34.728-3.058-4.675-7.862-11.18-10.677-14.457-2.814-3.276-5.117-6.345-5.117-6.82 0-.474 5.625-6.346 12.5-13.049 6.875-6.702 12.5-12.706 12.5-13.34 0-3.07-19.261-22.878-26.563-27.316-3.357-2.04-3.064-3.722 1.656-9.518 8.073-9.912 19.591-28.267 26.184-41.725 6.843-13.97 7.952-17.775 5.18-17.775-2.483 0-31.457 15.124-32.36 16.891-.453.885-1.112 3.503-1.465 5.817-1.202 7.874-7.643 25.76-13.305 36.946l-5.647 11.154 3.363 4.346c1.85 2.39 5.437 6.821 7.973 9.846 6.113 7.292 8.984 11.507 8.984 13.189 0 1.782-8.885 10.371-16.25 15.708-3.163 2.291-5.75 4.67-5.75 5.285 0 .615 2.191 4.538 4.87 8.718 5.876 9.172 13.042 23.32 16.14 31.867l2.27 6.267 15.11 7.428c8.31 4.085 15.78 7.335 16.599 7.222.818-.114 1.64-.994 1.825-1.956zm-491.278-.478c-1.562-4.028-3.536-12.897-3.536-15.883 0-1.969.968-4.365 2.5-6.185 3.119-3.706 3.23-7.557.277-9.625-4.674-3.274-10.117-.887-11.206 4.915-1.724 9.19 5.862 28.528 11.191 28.528.975 0 1.229-.575.774-1.75zM52 795.38c3.542-1.898 5.27-3.447 7.683-6.89 3.665-5.226 4.374-10.004 3.27-22.024-.554-6.031-1.428-19.291-1.942-29.466-1.59-31.483-5.6-72.799-7.258-74.797-1.678-2.023-6.768-4.411-8.215-3.856-1.37.526-2.608 11.052-4.544 38.653-.598 8.525-1.516 20.225-2.04 26-1.427 15.74-1.822 21.982-2.48 39.216-.656 17.16.087 20.72 5.153 24.705 4.545 3.576 2.278 6.077-3.166 3.494-2.235-1.061-4.38-3.22-5.76-5.803-1.976-3.692-2.19-5.49-2.09-17.612.062-7.425.86-21.15 1.774-30.5 1.772-18.13 3.973-41.051 5.665-59 .57-6.05 1.242-12.8 1.492-15 .416-3.663-.758-7.618-1.917-6.458-.944.943-10.087 81.874-11.01 97.458-.229 3.85-.988 10.711-1.688 15.247-1.456 9.437-.394 16.489 3.295 21.871 2.934 4.282 5.418 5.698 11.278 6.427 5.658.704 8.88.275 12.5-1.665zm128.992-4.63c-.186-9.755-.187-9.75 1.391-9.75 3.09 0 3.492-10.144.72-18.2-4.7-13.659-12.64-19.745-20.419-15.65-2.856 1.503-3.65 2.79-3.669 5.945-.023 3.986 3.167 6.29 7.71 5.569 2.076-.33 4.265-.277 4.865.118 2.621 1.727 7.317 9.664 8.408 14.208 1.621 6.76.762 8.377-1.798 3.383-2.973-5.801-8.153-7.292-11.704-3.369-1.512 1.672-1.62 2.427-.652 4.553.639 1.402 2.524 3.024 4.19 3.604 3.417 1.192 5.108 3.981 7.023 11.589.793 3.15 1.872 5.25 2.697 5.25 1.055 0 1.344-1.695 1.238-7.25zm70.618-10.66c-.1-8.98.101-10.134 2.14-12.314 3.921-4.191 2.719-7.867-3.046-9.314-3.498-.878-6.424 1.526-7.256 5.962-1.028 5.479 4.753 25.576 7.356 25.576.504 0 .867-4.46.806-9.91zm420.194 5.758c.657-7.869-4.907-15.524-13.581-18.686-3.216-1.173-6.91-3.264-8.209-4.647-1.424-1.515-3.466-2.515-5.14-2.515-5.094 0-13.001 2.167-13.6 3.728-.882 2.3 2.644 8.073 7.193 11.778 8.635 7.032 25.08 14.686 30.533 14.211 2.106-.183 2.548-.792 2.804-3.869zM241 779.062c0-.516-.712-4.003-1.582-7.75-1.575-6.783-1.319-14.812.637-19.956.475-1.25 2.675-3.198 4.889-4.327 5.593-2.854 6.76-9.181 2.483-13.46-3.328-3.327-11.217-.81-13.936 4.448-1.837 3.553-2.192 3.613-5.12.861-2.972-2.791-8.647-1.913-11.017 1.705-3.208 4.895.06 18.757 5.933 25.167 1.656 1.807 4.755 3.125 4.701 2-.007-.137-.676-2.725-1.488-5.75-1.797-6.697-1.853-9.75-.235-12.921 2.446-4.794 3.413-3.397 4.071 5.88.655 9.228 3.859 19.389 7.318 23.211 1.791 1.98 3.346 2.394 3.346.892zm146.365-3.135c3.088-2.428 3.338-4.837.825-7.941-3.436-4.243-11.19-1.7-11.19 3.669 0 2.81 3.268 6.345 5.865 6.345 1.026 0 3.051-.933 4.5-2.073zM702 775.638c0-2.567-6.186-15.004-10.978-22.07-5.395-7.957-9.397-12.072-10.86-11.168-1.182.73-10.162 17.152-10.162 18.584 0 1.045 28.56 15.871 30.75 15.963.688.03 1.25-.56 1.25-1.309zm-255.571-9.21c1.895-1.895 2.037-4.796.305-6.233-.775-.644-6.7-.982-15.305-.873-11.093.14-14.48-.137-16.142-1.322-1.156-.825-10.091-8.925-19.857-18-9.765-9.075-23.194-21.41-29.842-27.41-15.3-13.81-32.97-30.183-46.796-43.362-5.927-5.65-11.934-10.712-13.35-11.25-3.622-1.377-7.736-1.215-9.933.392-1.743 1.274-1.114 2.098 9.059 11.862 6.013 5.77 14.524 13.591 18.915 17.38 4.39 3.788 11.14 9.848 15 13.465 3.86 3.617 11.292 10.388 16.517 15.048 5.225 4.659 11.075 9.898 13 11.642 1.925 1.744 7.775 6.882 13 11.418s13.325 11.805 18 16.153c12.328 11.465 11.452 11.077 26.451 11.73 7.177.313 14.48.65 16.228.75 1.774.102 3.873-.512 4.75-1.39zm219.469-9.05c5.504-6.253 13.661-23.17 15.624-32.403 3.798-17.868 3.59-36.403-.563-50.394-2.844-9.58-6.173-13.728-11.13-13.869-7.038-.2-8.463 3.846-4.802 13.632 8.889 23.756 5.492 52.387-8.72 73.507-4.915 7.305-3.88 14.149 2.143 14.149 2.766 0 4.12-.84 7.448-4.621zm-367.47-1.95c1.866-1.864 2.055-5.545.372-7.228-.66-.66-2.595-1.2-4.3-1.2-4.805 0-6.804 3.439-4.893 8.418.8 2.084 6.741 2.09 8.822.01zm-95.672-6.404c6.926-3.143 10.793-6.7 14.167-13.03 4.426-8.306 6.077-15.527 6.077-26.587 0-11.988-2.156-20.792-7.415-30.274-4.636-8.362-9.046-12.004-17.61-14.548-4.418-1.312-6.456-1.42-10.597-.56-16.44 3.413-24.804 17.923-24.772 42.975.016 12.597 1.606 19.87 6.199 28.355 6.967 12.874 22.196 19.005 33.951 13.67zM185.5 739.06c-5.222-3.366-7.237-5.447-9.32-9.619-6.116-12.253-6.936-31.74-1.807-42.943 3.258-7.118 4.944-9.106 9.837-11.603 5.59-2.853 9.897-2.453 14.962 1.39 9.951 7.549 13.306 17.047 12.662 35.848-.331 9.674-.782 12.214-3.025 17.049-4.865 10.489-15.421 14.962-23.309 9.878zm14.045-9.514c3.162-3.161 3.11-6.571-.193-12.64-4.803-8.824-10.083-7.053-11.04 3.705-.447 5.022-.204 6.295 1.654 8.64 2.734 3.45 6.315 3.56 9.58.295zm-12.768-16.102c4.13-2.892 2.18-9.443-2.812-9.443-2.891 0-6.965 2.951-6.965 5.045 0 1.5 4.663 5.955 6.232 5.955.728 0 2.323-.7 3.545-1.557zm20.706-4.068c.986-.987 1.506-2.854 1.321-4.75-.293-3.014-.488-3.136-5.492-3.425-4.326-.25-5.364.028-6.246 1.677-1.058 1.977-.61 4.518 1.212 6.873 1.381 1.786 7.284 1.545 9.205-.375zm-11.526-12.284c3.76-8.025 1.324-15.091-5.2-15.091-6.872 0-8.522 5.668-4.293 14.75 1.943 4.174 2.93 5.25 4.82 5.25 1.864 0 2.868-1.054 4.673-4.91zM451.054 742.5c1.028-5.391.77-5.5-13.02-5.5H425.28l-4.015-3.25c-2.209-1.788-12.314-10.9-22.456-20.25a11271.23 11271.23 0 0 0-39.842-36.5l-21.402-19.5h-6.533c-5.277 0-6.533.303-6.533 1.574 0 1.424 10.12 10.954 53 49.917 31.012 28.178 34.856 31.617 38.319 34.283l3.603 2.775 15.53-.275 15.53-.274.572-3zm3.592-13.194c2.315-5.541.653-6.306-13.702-6.306-13.424 0-12.252.55-25.462-11.927-4.41-4.165-15.418-14.323-24.462-22.573-9.045-8.25-20.363-18.712-25.15-23.25-8.166-7.739-8.974-8.25-13.038-8.235-2.383.008-5.007.46-5.832 1.002-1.776 1.168.754 3.708 29.38 29.483 10.385 9.35 25.685 23.168 34 30.706 8.862 8.033 16.155 13.869 17.62 14.1 1.375.217 7.585.462 13.801.544l11.301.15 1.544-3.694zm240.344-3.8c7.111-4.558 7.917-5.908 5.864-9.822-2.004-3.817-8.989-11.684-10.375-11.684-.88 0-1.567 1.962-2.016 5.75-.374 3.163-1.3 8.45-2.057 11.75-.757 3.3-1.383 6.563-1.391 7.25-.027 2.256 2.858 1.318 9.975-3.243zM465.476 707.81c1.087-2.03 1.648-4.018 1.247-4.42-.402-.401-6.805-.824-14.23-.94-9.556-.148-14.053-.61-15.396-1.58-2.831-2.045-23.284-20.312-36.14-32.278-9.857-9.173-11.868-10.605-15.706-11.18-7.288-1.094-7.44.653-.677 7.815 3.26 3.45 11.376 11.224 18.037 17.274 6.661 6.05 16.678 15.175 22.26 20.277l10.149 9.278 14.24-.278 14.24-.277 1.976-3.69zm7.18-12.32c1.29-.844 2.344-1.96 2.344-2.479 0-1.362 6.912-8.165 10.678-10.51 1.766-1.1 5.923-4.025 9.237-6.5 3.314-2.475 8.339-6.075 11.167-8 4.629-3.152 13.783-10.43 24.2-19.238 7.977-6.747 21.544-6.21-170.729-6.762-165.17-.475-174.032-.411-176.165 1.266-3.606 2.837-6.842 8.68-5.532 9.99.802.802 29.991 1.05 105.178.891 57.237-.12 105.63.074 107.539.433 2.682.503 6.248 3.38 15.699 12.666 6.725 6.609 13.915 13.088 15.978 14.397 2.062 1.31 3.75 2.742 3.75 3.181 0 .44 2.953 3.246 6.562 6.238 6.213 5.148 6.919 5.465 13.25 5.938 11.702.875 24.285.167 26.845-1.51zm218.538-10.739c1.56-2.465 10.562-22.634 13.234-29.649.944-2.48 1.297-4.776.808-5.265-.988-.988-22.085 9.476-23.947 11.878-.734.946-.883 2.198-.378 3.174 1.01 1.953 4.39 12.02 5.999 17.862 1.324 4.808 2.237 5.234 4.284 2zM23.099 605.317c11.382-5.905 15.03-8.278 15.762-10.25 8.11-21.878 14.121-35.456 20.432-46.154L62 544.326l-5.098-6.413c-2.805-3.527-6.549-7.988-8.321-9.913-3.947-4.286-6.58-8.443-6.58-10.388 0-2.493 4.824-7.35 13.076-13.166 4.358-3.07 7.924-5.964 7.924-6.428 0-.464-3.015-7.071-6.7-14.681-3.684-7.61-8.31-18.112-10.279-23.337l-3.58-9.5-7.47-3.84c-13.329-6.85-26.935-12.8-27.903-12.202-3.375 2.086 14.64 36.47 26.047 49.713 2.687 3.12 4.885 5.887 4.885 6.15 0 .263-2.963 3.336-6.585 6.829C22.66 505.593 14 516.268 14 518.616c0 1.95 13.725 15.981 22.25 22.748 2.668 2.117 4.75 4.6 4.75 5.664 0 1.042-2.053 4.415-4.563 7.496-6.34 7.783-15.72 23.374-24.234 40.276C4.822 609.455 3.74 613 6.644 613c.905 0 8.31-3.458 16.455-7.683zm552.596-9.608c1.207-.671 3.855-3.16 5.884-5.53 2.687-3.14 3.39-4.61 2.587-5.413-.79-.79-31.293-1.06-108.007-.951l-106.905.15-2.679-2.483c-1.473-1.365-3.008-2.482-3.411-2.482-.404 0-2.968-2.267-5.699-5.038-2.73-2.77-6.222-5.717-7.758-6.548-1.537-.83-3.257-2.501-3.824-3.712-.567-1.211-2.685-3.463-4.707-5.004-2.022-1.542-6.714-5.736-10.426-9.32-3.713-3.585-8.193-6.931-9.956-7.437-1.763-.506-9.866-.875-18.006-.82l-14.8.1-4.324 4.808c-2.378 2.645-6.538 6.278-9.244 8.073-2.706 1.795-6.945 4.915-9.42 6.934-2.475 2.02-5.625 4.248-7 4.953-2.815 1.443-6.337 4.533-12.254 10.75-2.219 2.332-5.92 5.345-8.225 6.696-4.162 2.44-11.521 10.413-11.521 12.483 0 1.657 346.713 1.449 349.695-.21zM70.75 580.822c5.649-3.028 9.25-5.571 9.25-6.532 0-.866-.854-4.548-1.898-8.182-1.043-3.634-2.177-7.845-2.519-9.358-1-4.425-3.215-3.22-7.579 4.126C63.65 568.206 57 583.175 57 585.646c0 2.066 2.591 1.157 13.75-4.824zm654.67 1.428c.585-1.848 3.925-36.796 5.615-58.75.55-7.15 1.428-16.6 1.952-21 1.36-11.44 2.513-29.592 2.513-39.58 0-7.905-.226-8.876-2.866-12.335-3.807-4.989-7.915-7.351-14.13-8.128-3.684-.46-6.228-.181-9.03.99-5.735 2.395-7.29 4.215-9.372 10.968-1.984 6.432-1.834 14.35.835 44.085.543 6.05 1.474 18.2 2.07 27 1.394 20.62 2.895 38.854 3.646 44.318.498 3.618 1.229 4.737 4.511 6.91 2.794 1.848 4.225 2.283 4.992 1.516 1.3-1.3 2.506-12.889 3.302-31.744.325-7.7 1.013-19.4 1.529-26 .515-6.6 1.191-18.75 1.502-27 .311-8.25.823-17.152 1.137-19.782.99-8.3-.523-18.442-3.233-21.662-2.752-3.27-3.118-6.056-.797-6.056 2.897 0 7.15 3.909 8.836 8.12 2.155 5.387 1.786 12.367-4.938 93.38-.821 9.9-1.778 21.458-2.126 25.685-.348 4.226-.362 8.389-.031 9.25.808 2.106 3.394 1.989 4.083-.185zM384.6 578.836c.42-.678-.495-2.17-2.19-3.577-1.601-1.327-5.836-5.202-9.411-8.61-3.575-3.41-11-10.221-16.5-15.139-5.5-4.917-13.406-12.19-17.569-16.16-4.163-3.972-8.663-7.447-10-7.722-4.447-.917-23.096-1.567-27.525-.96-3.564.488-4.72 1.198-6.29 3.86-2.9 4.915-1.582 5.472 12.934 5.472 14.804 0 13.652-.567 30.45 14.99 13.953 12.922 29.28 26.277 31.844 27.745 2.754 1.578 13.298 1.653 14.257.101zM418 578.17c0-1.743-14.863-15.979-45.072-43.17a3488.902 3488.902 0 0 1-22.86-20.775l-10.083-9.276-15.706.276-15.705.275-1.522 2.715c-2.337 4.166-.68 4.879 12.396 5.327l11.708.402 8.75 7.778C344.72 526 353.607 534 359.656 539.5c48.473 44.075 43.884 40.5 51.983 40.5 5.498 0 6.362-.249 6.362-1.83zm19.71.215c.334-1.017-28.067-27.58-51.64-48.296-5.263-4.627-10.02-8.96-10.57-9.63-.55-.67-8.337-7.798-17.304-15.84L341.89 490h-29.814l-1.083 4.023c-.596 2.213-.812 4.463-.48 5 .348.563 6.72.977 15.035.977h14.431l20.76 18.663c11.418 10.265 24.585 22.366 29.26 26.892 4.675 4.525 15.025 14.14 23 21.365l14.5 13.137 4.921-.278c2.707-.154 5.087-.78 5.289-1.394zm28.203.22c.935-1.126-1.01-3.39-10.097-11.75-6.19-5.695-15.093-13.986-19.785-18.423-4.692-4.438-13.706-12.72-20.031-18.406-11.379-10.228-28.094-25.644-51.666-47.653-6.69-6.247-13.357-11.812-14.815-12.366-1.457-.554-9.54-1.007-17.962-1.007-16.125 0-18.175.554-17.377 4.694.468 2.432 4.02 3.04 18.82 3.225l12.5.156 28 25.463c27.782 25.264 51.625 46.818 67 60.567 4.4 3.934 9.8 8.783 12 10.774 6.903 6.25 10.962 7.68 13.413 4.726zm-369.08-3.92c1.707-1.368 1.09-7.792-1.648-17.185-3.695-12.672-4.426-21.88-2.751-34.654 2.083-15.89 6.553-29.53 13.053-39.826 4.153-6.578 2.7-10.02-4.23-10.02-4.445 0-8.164 4.095-14.074 15.5-7.594 14.654-10.172 25.97-10.249 44.987-.055 13.765 2.169 26.762 6.212 36.304 2.666 6.293 9.083 8.588 13.688 4.895zm429.165.816c10.249-5.3 11.894-20.844 3.133-29.605-4.446-4.447-9.158-5.883-19.322-5.89-4.23-.003-7.94-.408-8.243-.9-.304-.491.12-2.502.94-4.468 2.453-5.87 1.935-14.41-1.256-20.701-4.583-9.037-13.008-13.1-23.805-11.481-8.646 1.296-16.573 11.703-11.882 15.596 1.333 1.106 2.156.687 5.587-2.848 6.378-6.572 13.44-6.91 19.029-.91C493.865 518.248 495 521.005 495 526c0 10.95-7.973 18.296-20 18.428-8.25.091-16.173-3.545-21.9-10.051-5.352-6.081-6.816-13-8.156-38.552-1.287-24.533-2.704-31.444-8.162-39.798-4.6-7.038-9.441-10.942-17.637-14.22-5.224-2.088-7.044-2.243-24.395-2.087-10.312.094-18.75-.17-18.75-.587 0-.417.875-2.568 1.945-4.782 3.627-7.507 4.478-12.933 3.155-20.114-1.542-8.367-3.88-12.862-9.266-17.807-6.624-6.083-10.425-8.035-22.354-11.48-13.825-3.991-17.626-5.94-23.648-12.123-4.226-4.338-4.832-5.489-4.832-9.171 0-2.316.718-5.236 1.595-6.488 2.177-3.109 1.097-6.956-2.184-7.78-3.781-.949-7.312 1.13-9.071 5.341-1.293 3.094-1.361 4.597-.405 8.87 2.63 11.751 10.919 19.965 25.796 25.562 2.877 1.083 5.497 2.4 5.823 2.926.325.527-1.434 3.21-3.91 5.963-2.475 2.754-5.261 7-6.192 9.436-1.622 4.248-1.61 4.586.276 8.222 1.447 2.788 2.603 3.792 4.366 3.792 2.168 0 2.466-.549 3.113-5.726 1.18-9.455 5.919-14.092 14.41-14.102 13.025-.016 21.96 14.672 16.933 27.836-2.06 5.396-9.281 12.073-14.606 13.507-10.998 2.962-20.18.18-28.522-8.643-10.288-10.879-15.923-26.384-21.396-58.872-6.342-37.65-11.25-50.038-22.177-55.985-9.735-5.3-21.42-3.322-28.583 4.835-3.843 4.377-6.677 12.647-5.848 17.066.842 4.488 5.962 11.98 9.192 13.452 9.691 4.416 21.463.533 17.476-5.763-.616-.972-2.076-1.236-4.813-.868-6.877.922-13.273-3.419-13.273-9.01 0-3.216 2.724-8.294 5.87-10.941 1.993-1.678 3.949-2.223 8.076-2.25 13.332-.088 19.23 10.667 24.105 43.964 4.473 30.549 7.342 41.86 13.955 55.011 7.805 15.524 17.057 23.829 29.506 26.485 6.255 1.334 9.94 1.313 35.129-.197 26.337-1.58 28.526-1.58 34.169-.012 13.227 3.678 20.34 10.437 22.323 21.214 1.455 7.91.088 12.83-5.248 18.893-4.94 5.612-8.506 7.607-13.585 7.602-6.794-.007-11.83-4.542-13.703-12.341-.967-4.028 2.606-10.987 6.96-13.557 3.751-2.213 4.176-3.245 2.06-5.001-2.457-2.039-10.526 1.76-14.33 6.748-2.868 3.761-3.287 5.072-3.287 10.282 0 6.854 1.627 10.71 6.797 16.106 4.517 4.716 12.43 7.26 19.614 6.307 6.174-.82 8.056-1.78 13.222-6.75 2.538-2.442 4.392-3.56 4.802-2.895.368.595 1.066 5.925 1.55 11.844 1.63 19.919 4.595 27.791 13.72 36.436 4.97 4.709 7.223 6.05 13.242 7.877 8.722 2.65 15.464 2.255 27.562-1.613 10.84-3.466 23.696-4.26 28.42-1.756 7.86 4.165 10 12.65 4.611 18.275-2.223 2.32-3.795 3.042-6.628 3.042-3.2 0-4.007-.496-5.822-3.572-2.456-4.162-5.073-4.261-6.485-.246-2.649 7.53 11.42 13.96 20.393 9.319zm56.567-5.391c18.067-8.206 24.76-34.738 14.762-58.515-7.183-17.083-16.916-24.394-31.122-23.378-8.39.6-13.534 3.679-18.595 11.13-6.702 9.863-9.194 20.816-7.685 33.776 2.221 19.087 12.043 34.003 24.964 37.915 4.783 1.448 13.447.993 17.676-.928zm-17.129-8.523c-3.688-1.606-9.677-8.388-12.431-14.077-4.578-9.457-5.175-27.488-1.211-36.598 4.372-10.05 13.928-15.333 22.355-12.36 8.816 3.111 14.803 11.798 17.368 25.198 2.735 14.294 1.144 25.326-4.73 32.793-4.391 5.583-14.584 7.991-21.35 5.044zm13.095-7.934c2.584-3.69 1.376-10.978-2.819-16.997-1.631-2.34-2.562-2.776-5.264-2.46-2.92.34-3.344.074-3.842-2.418-1.033-5.164-8.895-5.905-11.427-1.076-2.206 4.208 3.552 9.582 7.82 7.298 2.94-1.573 3.11-1.3 2.421 3.89-.898 6.775.938 11.937 4.83 13.573 3.692 1.552 6.33.976 8.28-1.81zm6.155-20.827c1.272-1.196 2.314-2.771 2.314-3.5 0-2.288-3.88-5.326-6.8-5.326-3.633 0-5.2 1.657-5.2 5.5 0 1.705.54 3.64 1.2 4.3 1.878 1.878 5.946 1.411 8.486-.974zm-12.94-7.076c1.639-2.065 3.476-11.468 2.725-13.942-1.818-5.986-8.399-8.836-11.682-5.058-2.742 3.156-2.992 7.002-.78 12.003 3.366 7.61 7.115 10.303 9.738 6.997zm-498.865-4.142c.643-5.44.932-10.129.642-10.418C72.117 509.783 61 518.243 61 520.72c0 1.484 6.235 9.953 8.458 11.488 1.721 1.19 2.21-.323 3.423-10.6zm454.723-19.292c1.856-2.025 3.656-5.187 4.001-7.025.987-5.259-.626-20.264-2.804-26.09-2.13-5.697-6.168-11.162-7.365-9.968-.404.403-.218 3.864.415 7.692.632 3.828 1.149 10.174 1.149 14.103 0 6.943-.1 7.231-3.59 10.307-4.58 4.038-5.614 6.005-4.819 9.173.667 2.654 4.557 5.383 7.774 5.452 1.026.022 3.384-1.618 5.24-3.644zm15.941-3.77c2.788-2.788 3.308-8.966 1.316-15.615-1.533-5.116-9.246-13.852-10.857-12.296-.897.867-.78 1.898.495 4.363.918 1.775 1.915 5.615 2.216 8.534.445 4.311.146 5.957-1.595 8.774-2.389 3.865-1.97 6.405 1.27 7.714 3.386 1.369 4.553 1.128 7.155-1.475zm-72.956-6.62c2.135-1.772 1.715-6.564-.778-8.887-2.715-2.53-5.893-2.603-8.857-.203-2.815 2.28-2.965 7.938-.265 9.954 2.017 1.507 7.634 1.016 9.9-.864zm130.097-1.1c5.158-4.846 1.25-12.826-6.282-12.826-2.074 0-4.05-.778-5.252-2.067-1.914-2.055-5.749-13.67-4.82-14.598.267-.267.778.436 1.136 1.564.874 2.754 5.746 6.101 8.88 6.101 1.462 0 3.175-.91 4.04-2.143 2.139-3.054.068-7.883-3.933-9.173-4.443-1.432-5.22-2.363-6.956-8.335-2.241-7.71-4.093-6.605-3.672 2.191.3 6.261.19 6.718-1.326 5.46-2.473-2.052-3.47.243-3.474 8-.008 15.697 6.906 28 15.735 28 2.33 0 4.43-.771 5.924-2.174zM82.078 490c.435-.825 2.396-4.209 4.357-7.52 1.96-3.31 3.565-6.747 3.565-7.636 0-.889-1.688-2.41-3.75-3.379-2.063-.97-7.783-3.715-12.713-6.1-5.957-2.884-9.297-4.005-9.96-3.342-1.116 1.116 2.705 9.52 10.131 22.276 4.497 7.727 6.559 9.13 8.37 5.701zm85.49-12.41c2.645-1.853 6.966-10.574 8.963-18.09 3.517-13.235 2.9-28.052-1.757-42.239-1.64-4.993-3.421-7.976-6.952-11.64-4.023-4.174-4.984-4.732-6.285-3.651-.931.772-1.537 2.912-1.537 5.428 0 2.283-1.396 9.766-3.101 16.627-3.323 13.365-4.358 25.689-3.297 39.233.827 10.56 3.9 14.96 10.925 15.642.566.055 1.934-.535 3.042-1.31zm349.207-.966c1.996-1.95 2.661-10.975 1.204-16.35-1.613-5.955-4.702-12.274-6-12.274-2.254 0-2.463.896-2.133 9.146.33 8.224-.133 10.447-3.55 17.068-.203.392.586 1.668 1.754 2.836 2.26 2.26 6.17 2.068 8.725-.426zm-392.957-1.163c4.13-1.226 5.182-1.97 5.182-3.659 0-2.62-6.81-11.793-11.294-15.213-3.713-2.831-27.234-10.984-29.35-10.172-5.241 2.011 5.64 18.349 13.471 20.224 4.568 1.093 8.545 3.425 11.872 6.96 3.7 3.93 3.359 3.868 10.12 1.86zm26.645-3.066c1.801-1.802 1.525-3.333-1.961-10.895-4.62-10.018-17.855-20.405-33.502-26.292-3.025-1.139-8.2-3.098-11.5-4.354-7.009-2.667-13.421-8.187-18.261-15.719l-3.448-5.365-5.088.675c-2.798.371-5.483.92-5.966 1.218-1.367.844.247 8.326 2.954 13.692 4.786 9.487 13.772 15.656 29.809 20.463 7.362 2.207 17.172 7.575 21.668 11.857 1.467 1.398 3.923 5.186 5.459 8.42 3.14 6.613 4.958 7.703 13.052 7.826 3.505.053 5.697-.44 6.784-1.526zm229.787-3.128c2.72-2.452 2.264-7.718-.885-10.194-1.449-1.14-3.188-2.073-3.865-2.073s-2.416.933-3.865 2.073c-2.036 1.6-2.635 2.952-2.635 5.943 0 6.493 6.173 8.826 11.25 4.251zm183.965-1.774c2.757-10.498 13.655-55.697 14.224-58.993.38-2.2 4.08-17.5 8.224-34C595.115 340.846 601 315.56 601 312.895c0-.977-.432-2.044-.96-2.37-.527-.326-6.265.293-12.75 1.375-32.367 5.402-86.21 7.344-118.79 4.284-29.25-2.747-62.051-9.232-90.257-17.845-8.39-2.562-15.584-4.331-15.984-3.931-.94.94 7.906 9.317 30.189 28.592 9.855 8.525 20.423 17.818 23.485 20.651 3.062 2.834 7.875 7.109 10.697 9.5 8.18 6.935 26.619 23.16 28.84 25.376 1.116 1.115 5.18 4.7 9.03 7.969 3.85 3.268 9.497 8.206 12.55 10.973 3.052 2.767 12.709 11.331 21.46 19.031 8.75 7.7 18.874 16.7 22.498 20 3.624 3.3 11.264 10.05 16.978 15 5.714 4.95 13.031 11.39 16.26 14.312 3.235 2.926 6.615 5.169 7.527 4.993.911-.175 2.01-1.666 2.442-3.312zM541.22 437.25A3398.159 3398.159 0 0 0 520.497 419c-5.99-5.225-13.848-12.2-17.465-15.5-6.97-6.36-22.223-19.77-37.534-33-5.093-4.4-14.521-12.725-20.952-18.5-6.431-5.775-14.247-12.69-17.37-15.366C411.479 323.176 408.144 319 413.094 319c1.151 0 6.439.877 11.75 1.948 5.311 1.072 19.107 3.19 30.657 4.705 19.762 2.594 23.241 2.756 59 2.747 29.847-.007 40.987-.378 51.924-1.73 9.247-1.143 14.26-1.387 14.92-.725.99.99-.207 7.708-4.464 25.055-1.794 7.306-14.66 62.263-19.363 82.71-1.291 5.614-2.638 10.677-2.992 11.25-1.347 2.179-3.773.774-13.306-7.71zm12.676-5c1.089-3.712 2.705-10.35 3.593-14.75.887-4.4 2.662-12.05 3.944-17 2.454-9.477 5.181-20.941 11.06-46.5 1.96-8.525 3.945-16.915 4.41-18.645 1.556-5.783 1.218-5.849-19.918-3.88-15.84 1.476-25.186 1.694-53.344 1.244-33.108-.529-50.88-1.972-70.79-5.747-11.813-2.24-12.623-.648-3.6 7.084 3.438 2.945 8.275 7.233 10.75 9.529 4.76 4.415 13.698 12.262 33.44 29.36 6.633 5.744 17.874 15.644 24.98 22C536.07 428.621 548.215 439 549.978 439c1.528 0 2.353-1.422 3.916-6.75zm-20.948-19.298c-6.296-5.547-14.874-13.18-19.064-16.962-4.189-3.783-12.289-10.93-18-15.884-19.671-17.06-37.383-33.72-37.383-35.161 0-1.058 1.07-1.382 4-1.21 19.606 1.157 76.645 1.337 86.804.274 6.492-.679 12.102-.936 12.466-.572.876.875-1.748 16.005-6.803 39.23a323416.49 323416.49 0 0 1-6.374 29.28c-1.252 5.746-2.708 10.591-3.238 10.768-.529.176-6.113-4.217-12.408-9.763zm12-1.702c.573-2.063 1.044-4.088 1.047-4.5.01-1.347-3.718-.787-4.994.75-.685.825-1.865 1.5-2.622 1.5-1.866 0-1.737 1.946.277 4.171 2.733 3.02 5.123 2.29 6.292-1.921zm-1.85-10.82c3.703-2.72 5.125-4.54 5.956-7.628 1.724-6.402.021-6.746-6.93-1.397-3.32 2.555-6.307 5.084-6.638 5.62-.895 1.448-4.924 1.183-9.43-.62-5.554-2.222-7.215-1.384-3.704 1.87 2.987 2.768 9.56 5.514 13.515 5.646 1.301.043 4.555-1.528 7.23-3.492zm-.282-13.957c7.052-5.19 9.094-7.27 9.982-10.165 1.142-3.72.866-5.308-.925-5.308-.556 0-5.536 3.375-11.067 7.5-5.531 4.125-10.64 7.5-11.354 7.5-.714 0-6.458-2.251-12.764-5.003C503.22 375.121 499 374.005 499 376.32c0 2.924 7.46 7.82 17.912 11.753 5.726 2.155 10.639 4.146 10.917 4.423.277.278 1.768.505 3.312.505 1.885 0 5.723-2.145 11.674-6.527zm-.195-14.526c6.534-4.979 12.442-9.79 13.13-10.69 1.352-1.773 1.741-9.257.481-9.257-.98 0-7.432 4.551-19.654 13.862l-9.663 7.363-16.207-6.7c-23.985-9.916-37.655-14.913-38.477-14.065-.402.414 1.645 2.89 4.547 5.5 4.323 3.89 8.303 5.978 22 11.55 22.335 9.085 28.414 11.376 30.343 11.438.891.028 6.966-4.022 13.5-9zm-7.444-10.197c4.432-3.438 8.905-6.867 9.94-7.622 3.009-2.191 2.33-4.128-1.445-4.128-3.388 0-10.622 4.078-14.152 7.979-2.555 2.823-4.679 2.534-15.519-2.113-8.082-3.464-10.844-4.148-18.5-4.575-7.549-.422-8.79-.285-7.703.85 1.332 1.39 35.657 15.64 38.012 15.78.72.044 4.935-2.733 9.367-6.171zm-7.376-7.95c2.114-2.114 1.307-2.8-3.3-2.8-3.23 0-4.5.402-4.5 1.427 0 2.314 5.832 3.34 7.8 1.373zm-40.584 112.876c5.116-4.742 6.07-7.292 6.564-17.552.348-7.233.045-11.214-1.173-15.404-1.625-5.59-5.821-11.834-7.097-10.561-.363.362-.23 5.038.295 10.39.592 6.031.602 11.013.027 13.099-.987 3.572-4.339 7.352-6.52 7.352-2.51 0-5.312 3.918-5.312 7.427 0 6.65 8.194 9.903 13.216 5.249zm16.86-1.6c2.642-2.64 2.924-3.56 2.924-9.532 0-5.13-.585-7.778-2.614-11.827-2.92-5.826-5.293-8.892-6.37-8.227-.393.243-.5 4.911-.237 10.373.39 8.107.18 10.358-1.15 12.257-2.265 3.233-2.033 6.484.594 8.323 3.002 2.103 3.48 2.008 6.854-1.366zm95.974-14.17c1.63-3.044.347-6.65-2.978-8.369-2.075-1.073-3.364-2.9-4.537-6.43-2.353-7.085-5.535-7.94-5.535-1.49 0 5.993 2.184 13.658 4.572 16.046 2.937 2.937 6.975 3.053 8.478.244zm-122.01-7.946c5.11-5.11 5.38-13.852.71-23.055-1.788-3.523-3.958-6.535-4.823-6.694-1.358-.25-1.511.878-1.124 8.264.42 7.978.273 8.808-2.177 12.343-3.301 4.764-3.3 6.507.01 9.11 3.304 2.6 4.83 2.606 7.404.032zm133.389-.531c2.11-2.111 2.007-7.732-.179-9.674-.963-.856-3.378-2.228-5.368-3.05-4.233-1.746-7.852-6.299-10.3-12.955-1.821-4.95-2.947-5.848-3.975-3.168-2.032 5.295 2.69 22.87 7.415 27.594 3.277 3.277 9.73 3.929 12.407 1.253zM451.663 431.49l4.32-4.508 2.008 2.008c2.74 2.74 6.18 2.522 9.085-.577 4.983-5.315 1.976-20.387-5.45-27.314-2.216-2.066-2.66-2.176-3.191-.791-.34.885-.054 3.315.635 5.4 1.643 4.973 1.755 14.866.186 16.435-1.877 1.877-2.58.406-3.379-7.074-.918-8.591-4.301-20.138-6.806-23.227-2.677-3.303-3.295-1.987-1.97 4.194 1.282 5.977.745 16.142-1.058 20.022-.654 1.407-3.05 3.432-5.324 4.5-6.792 3.189-7.183 10.878-.719 14.147 4.501 2.277 7.083 1.565 11.663-3.215zm274.99-2.029c5.892-3.452 8.787-9.675 8.088-17.386-.671-7.4-2.811-11.432-7.83-14.753-4.74-3.138-13.265-4.248-17.895-2.33-4.338 1.797-9.728 8.224-11.07 13.2-2.338 8.666.952 18.51 7.345 21.979 6.206 3.367 14.9 3.078 21.363-.71zM711.1 426.62c-1.125-1.355-1.044-1.683.538-2.18 7.588-2.383 10.114-4.904 11.751-11.727.777-3.238-1.705-9.268-4.544-11.042-1.014-.633-1.844-1.767-1.844-2.519 0-1.715 4.216-.801 7.616 1.65 2.745 1.98 6.384 8.846 6.384 12.047 0 3.488-2.476 8.391-5.83 11.544-3.791 3.565-11.897 4.847-14.071 2.227zm-313.124.406c1.086-1.086 2.264-3.129 2.618-4.54 1.407-5.605-6.381-8.776-10.554-4.296-2.434 2.612-2.472 3.073-.56 6.77 2.28 4.41 5.394 5.168 8.496 2.066zm211.454-8.596c.864-.865 1.571-2.215 1.571-3 0-1.878-3.594-5.429-5.494-5.429-1.54 0-7.494-7.442-7.521-9.4-.008-.605-.459-1.775-1-2.6-.876-1.333-1.094-1.333-1.97 0-2.31 3.519.39 14.8 4.64 19.383 2.779 2.997 7.335 3.485 9.774 1.046zm-168.022-9.745c3.57-3.57 4.277-11.875 1.592-18.686-1.156-2.934-3.01-6.609-4.119-8.166-2.234-3.137-5.532-3.975-4.44-1.128.36.938.9 5.1 1.201 9.25.508 7.005.362 7.793-2.047 10.99-3.023 4.014-3.133 4.842-1.037 7.833 2.027 2.894 5.904 2.853 8.85-.093zm170.723-1.588 2.352-1.905-3.88-3.66c-2.396-2.26-4.88-6.125-6.491-10.104-1.436-3.545-3.061-6.329-3.611-6.186-.55.142-.969 2.987-.93 6.32.102 8.918 4.461 16.83 9.57 17.371.35.038 1.697-.789 2.99-1.836zm-533.848-1.467c6.884-2.934 10.934-11.413 8.694-18.203-1.555-4.71-3.53-6.426-7.392-6.426-3.876 0-6.285 2.32-6.75 6.5-.507 4.556-3.11 3.817-4.094-1.162-.99-5.006-2.845-6.78-6.209-5.935-5.72 1.435-7.786 13.665-3.396 20.11 3.772 5.538 12.613 7.9 19.147 5.116zm544.495-5.186c1.649-1.154 2.223-2.56 2.223-5.443 0-4.6-2.644-7-7.708-7-2.67 0-3.708-.682-5.706-3.75-1.344-2.063-3.2-6.45-4.125-9.75-1.944-6.934-2.956-8.405-4.631-6.73-1.794 1.794 1.318 18.968 4.682 25.844 3.713 7.589 10.1 10.447 15.265 6.83zm-212.435-2.438c5.08-4.46 5.941-7.475 5.505-19.258-.347-9.37-.692-10.905-3.864-17.19-1.916-3.795-3.974-7.062-4.574-7.259-.753-.248-1.065 3.799-1.01 13.102.077 12.908-.02 13.567-2.334 16.03-1.327 1.414-2.978 2.57-3.667 2.57-1.827 0-5.403 4.921-5.366 7.385.06 3.984 4.353 7.53 9.183 7.585 1.622.018 4.089-1.176 6.127-2.965zm19.813-2.39c1.566-2.486 1.846-4.19 1.386-8.436-1.014-9.377-7.488-22.179-11.215-22.179-1.718 0-1.674 1.762.174 7 2.158 6.117 1.93 13.567-.537 17.56-1.408 2.277-1.831 4.116-1.372 5.948 1.296 5.162 8.34 5.227 11.564.107zm-373.61-17.07c1.35-1.35 2.455-2.875 2.455-3.389 0-1.956-3.882-5.606-7.123-6.697-4.28-1.442-4.346-3.679-.133-4.54 4.245-.869 6.256-2.626 6.256-5.469 0-5.888-11.773-8.715-18.701-4.49-8.769 5.346-8.769 19.734 0 25.08 2.2 1.342 5.014 1.954 8.996 1.956 4.823.003 6.208-.408 8.25-2.45zm50.549.906c8.848-4.575 9.288-20.2.716-25.425-4.597-2.803-11.526-2.69-15.912.258-5.771 3.88-4.958 8.92 1.638 10.157 4.871.914 4.305 2.954-1.286 4.633-4.005 1.202-4.75 1.815-4.75 3.904 0 2.01 1.041 2.991 5.5 5.187 6.362 3.133 9.9 3.456 14.094 1.286zm512.712-2.107c.252-2.595-.3-3.618-3.1-5.754-2.999-2.288-5.267-6.076-7.09-11.84-.954-3.017-2.616-1.908-2.616 1.746 0 4.193 3.63 15.286 5.827 17.801.928 1.064 2.61 1.676 4.12 1.5 2.055-.239 2.613-.913 2.86-3.453zM79.14 374.387c3.859-3.158 6.861-6.401 6.861-7.413C86 365.497 76.605 353 75.495 353c-.182 0-1.036-.27-1.896-.6C71.586 351.626 59 364.273 59 367.067c0 1.688 6.409 9.895 9.5 12.167 2.04 1.498 3.94.632 10.639-4.848zm204.29 3.042c1.93-1.931 2.048-7.394.213-9.905-1.63-2.23-7.137-2.497-9.065-.44-.731.779-1.62 2.663-1.977 4.187-1.278 5.462 6.884 10.103 10.829 6.158zm114.626-4.459c3.485-1.865 5.21-6.695 4.479-12.544-.803-6.43-7.8-21.426-9.998-21.426-.845 0-1.53.113-1.524.25.007.138.676 2.725 1.488 5.75 2.403 8.954 2.015 13.39-1.427 16.285-2.972 2.501-3.403 3.5-3.191 7.394.246 4.53 5.549 6.766 10.173 4.291zm224.374-7.541c.864-.865 1.571-2.777 1.571-4.25 0-2.554.238-2.679 5.08-2.679 5.708 0 7.92-1.848 7.92-6.619 0-3.195-4.053-6.881-7.567-6.881-1.379 0-3.1-1.128-4.307-2.823-2.324-3.264-7.126-15.553-7.126-18.237 0-1.928-1.728-3.545-2.724-2.55-1.29 1.29-1.92 9.97-1.116 15.383.467 3.15 2.42 8.841 4.34 12.648 1.92 3.806 3.271 7.141 3.002 7.41-1.043 1.043-4.843-3.572-7.064-8.581-2.332-5.26-4.32-6.781-4.572-3.5-.626 8.16 2.027 19.5 4.962 21.214 2.51 1.464 5.835 1.23 7.6-.535zm-256.259-5.713c4.032-2.981 5.83-9.41 5.83-20.845 0-10.22-1.716-18.988-4.725-24.14-2.048-3.507-3.868-3.37-3.572.269.698 8.577.29 16.428-1.184 22.773-1.582 6.81-1.938 7.4-5.571 9.254-7.413 3.781-8.112 10.914-1.448 14.778 2.51 1.456 7.089.56 10.67-2.09zm21.693-6.088c1.264-5.02.817-8.667-2.041-16.628-1.911-5.323-4.32-9-5.897-9-.42 0-.688 4.181-.595 9.292.135 7.37-.192 9.845-1.58 11.965-2.878 4.396-2.234 8.329 1.72 10.49 3.346 1.832 7.076-.887 8.393-6.119zM70.001 347.5c2.022-4.044 3.202-4.242 5.08-.853 1.178 2.124 2.327 2.853 4.5 2.853 2.477 0 3.27-.706 5.231-4.66 2.578-5.193 2.352-9.397-.783-14.552-3.222-5.297-12.825-8.002-18.345-5.166-9.872 5.072-11.53 15.44-3.866 24.175 2.36 2.689 6.38 1.806 8.183-1.797zm285.384-12.63c3.344-1.523 4.854-5.607 4.927-13.326.049-5.228-.49-7.51-2.876-12.16-4.322-8.428-5.436-8.134-5.436 1.438 0 7.665-.142 8.158-3.5 12.178-1.925 2.304-3.5 4.575-3.5 5.048 0 2.09 2.41 5.837 4.364 6.782 2.812 1.362 3.116 1.364 6.021.04zm277.784-4.12c3.881-3.127 2.66-7.57-3.076-11.191-2.932-1.851-4.325-3.602-5.206-6.543-1.415-4.72-4.462-5.556-5.48-1.503-1.313 5.235 2.356 17.362 5.968 19.722 1.77 1.156 6.09.887 7.794-.485zm-289.264-10.122c.773-.62 2.019-2.597 2.77-4.393 2.308-5.521-1.108-20.235-4.698-20.235-.933 0-1.397 2.084-1.054 4.74.39 3.028-2.146 9.099-4.907 11.745-3.67 3.516-3.754 4.868-.5 8.123 2.581 2.58 5.191 2.586 8.389.02zm293.481-4.157c2.145-2.145 1.159-3.892-4.486-7.948-7.318-5.257-9.248-4.341-6.425 3.05 2.372 6.213 7.358 8.451 10.911 4.898zm-80.886-5.455c23.36-2.194 28.23-2.886 47-6.67 15.98-3.223 18.187-4.54 13.149-7.84-1.97-1.291-3.532-1.374-9.63-.509-4.997.71-7.668.71-8.52.001-2.05-1.701-2.594-7.924-.917-10.484 1.402-2.139 1.296-2.44-1.767-5.017-7.135-6.003-8.077-6.136-26.09-3.68-26.178 3.568-42.303 4.493-67.725 3.887-44.888-1.07-78.284-6.607-125.26-20.772-8.444-2.545-9.686-2.23-11.206 2.838-.583 1.942-.129 2.499 3.142 3.854 6.197 2.567 6.452 2.993 4.636 7.712-2.508 6.516-3.216 6.962-8.247 5.187-6.127-2.162-7.64-1.929-10.126 1.562-1.858 2.61-1.984 3.287-.818 4.393 1.412 1.338 23.437 8.79 36.879 12.475 4.125 1.132 8.85 2.488 10.5 3.015 8.069 2.576 37.987 7.879 59 10.457 17.961 2.205 70.559 1.98 96-.41zm-47.75-8.735c-2.104-2.33-2.313-8.569-.343-10.204.873-.724 4.198-1.056 8.75-.873l7.343.296.31 4.89c.171 2.689-.054 5.253-.5 5.697-.445.445-3.735 1.106-7.31 1.47-5.667.578-6.724.415-8.25-1.276zm-29 .023c-2.977-.473-3.257-1.606-2.108-8.554l.62-3.75h5.244c2.884 0 6.67.285 8.415.634 3.156.631 3.17.66 2.875 6.25l-.296 5.616-6 .12c-3.3.067-7.237-.075-8.75-.316zm57.25-5.037c0-2.825.547-5.454 1.25-6.01 1.481-1.169 12.3-2.367 14.334-1.586 1.678.644 2.003 9.848.383 10.85-.569.35-4.394.892-8.5 1.203l-7.467.565v-5.022zm-84.2 2.705c-2.585-.435-5.172-1.084-5.75-1.44-1.34-.83-1.352-5.608-.02-9.109 1.003-2.64 1.183-2.692 7.262-2.125 9.28.867 9.708 1.159 9.708 6.609 0 7.12-1.173 7.756-11.2 6.065zm115.739-1.91c-1.324-2.142-.975-8.055.568-9.597.863-.863 4.291-1.764 8.047-2.115 6.28-.586 6.57-.515 7.182 1.77.923 3.45.805 8.675-.21 9.302-.481.298-4.018.833-7.86 1.19-4.961.461-7.201.302-7.727-.55zM421 294.837c-5.265-1.478-6.326-2.95-5.528-7.67.962-5.697 2.177-6.417 8.65-5.131 10.316 2.049 10.904 2.73 8.825 10.215-.97 3.497-1.29 3.744-4.744 3.66-2.037-.05-5.278-.533-7.203-1.074zm-30.25-7.998c-6.21-2.165-6.477-2.681-4.697-9.088.778-2.803 1.568-3.75 3.128-3.75 2.686 0 9.95 2.07 11.569 3.298 2.738 2.075.675 11.763-2.475 11.623-.976-.043-4.362-.98-7.525-2.083zm-57.689 20.1c1.15-1.148 1.924-3.03 1.75-4.25-.255-1.795-1.067-2.243-4.523-2.494-5.32-.386-8.288 1.151-8.288 4.291 0 4.533 7.352 6.163 11.061 2.454zm209.351-31.629c2.594-1.452 1.098-2.054-7.979-3.216-8.474-1.084-18.507-3.633-27.433-6.971-3.775-1.412-7.945-2.067-13.297-2.09-8.85-.036-38.717-3.211-52.203-5.548-15.671-2.716-30.809-6.388-47.142-11.434-9.135-2.823-16.267-4.535-16.85-4.044-.554.467-2.133 2.924-3.507 5.459-3.034 5.594-3.393 5.27 10.999 9.956 16.665 5.426 27.609 8.308 43.597 11.482 13.305 2.64 23.033 3.951 52.403 7.06 11.293 1.196 59.015.687 61.412-.654zm29.078-2.725c6.212-.87 8.063-1.5 8.32-2.84.207-1.071-.635-2.163-2.228-2.889-2.08-.948-3.36-.835-6.822.601-8.935 3.707-11.782 4.49-17.926 4.926-3.484.247-6.671.487-7.084.534-.412.046-.75.53-.75 1.073 0 1.114 13.655.39 26.49-1.405zm168.423-66.325c1.423-1.039 3.43-3.584 4.46-5.657 1.702-3.427 1.747-4.234.5-8.896-1.667-6.225-5.995-9.706-12.07-9.706-10.93 0-17.447 11.511-11.78 20.807 3.723 6.105 12.946 7.79 18.89 3.452zm-35.52.225c9.668-4.588 8.362-21.1-1.937-24.498-10.26-3.387-19.07 4.6-17.035 15.443.87 4.643 3.302 7.37 8.079 9.065 5.177 1.836 7.006 1.834 10.893-.01zm13.304-27.734c3.55-3.906 19.146-28.276 19.824-30.978.767-3.054.708-3.177-10.307-21.562-5.847-9.759-9.053-14.195-10.112-13.991-.852.164-3.742 4.344-6.42 9.29-2.68 4.945-7.11 12.927-9.845 17.738-3.38 5.943-4.772 9.383-4.344 10.73.71 2.236 14.985 27.69 16.665 29.713 1.495 1.801 2.175 1.66 4.539-.94zm-2.883-16.5c-3.01-3.52-8.814-14.067-8.814-16.017 0-1.103 1.718-4.644 3.818-7.87 2.1-3.224 4.615-7.146 5.59-8.714l1.771-2.852 2.94 2.817c3.242 3.106 8.881 13.632 8.881 16.578 0 3.39-2.781 8.615-7.051 13.248-2.312 2.508-4.527 4.56-4.921 4.56-.395 0-1.391-.787-2.214-1.75zm-389.887-44.885c2.775-3.527 2.613-6.916-.477-10.006-3.075-3.075-6.746-2.631-10.2 1.234-3.005 3.363-2.864 6.779.385 9.334 3.687 2.9 7.743 2.68 10.292-.562zm51.577-91.615c3.178-2.734 3.648-7.82.993-10.753C373.414 10.484 364 14.322 364 20.5c0 3.292 4.151 7.5 7.399 7.5 1.37 0 3.666-1.012 5.105-2.25zM499 808.118c0-.55.45-1.278 1-1.618.55-.34 1-.168 1 .382s-.45 1.278-1 1.618c-.55.34-1 .168-1-.382zm40.079-34.535c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.916-.32.798-.557.561-.605-.604zM524 757.06c0-.518.45-1.22 1-1.559.55-.34 1 .084 1 .941s-.45 1.559-1 1.559-1-.423-1-.941zm-10.306-14.698c-.352-.352-.396-1.035-.098-1.517.64-1.034 2.404-.142 2.404 1.215 0 1.075-1.355 1.252-2.306.302zM560 667.559c0-.857.45-1.559 1-1.559s1 .423 1 .941-.45 1.22-1 1.559c-.55.34-1-.084-1-.941zm93.079-31.976c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.917-.32.797-.557.56-.605-.605zm-38-31c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.917-.32.797-.557.56-.605-.605zm97.05-222.483c-2.276-1.44-.717-3.505 3.847-5.096 7.737-2.698 10.396-9.01 9.482-22.504-.693-10.223-3.818-41.393-6.918-69-2.619-23.321-2.801-26.22-1.694-26.905 1.76-1.088 2.944 2.518 4.084 12.442 1.703 14.832 3.77 31.763 6.527 53.463 4.618 36.348 4.45 47.652-.796 53.345-4.173 4.528-10.963 6.517-14.533 4.255zm-11.424-69.783c-.272-.45-.129-3.292.318-6.317.447-3.025 1.078-8.425 1.402-12 1.17-12.905 1.835-17.526 2.732-19 1.27-2.087.292 13.222-1.702 26.65-1.652 11.122-1.897 12.073-2.75 10.667zm4.706-44.067c.258-2.612.496-5.402.529-6.2.037-.898.403-1.088.962-.5 1.123 1.184.175 11.45-1.058 11.45-.496 0-.691-2.138-.433-4.75zm1.45-10.166c-.675-2.027 1.369-19.084 2.288-19.084.987 0-.036 16.78-1.152 18.892-.529 1.001-.848 1.055-1.136.192zM505.75 124.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zM522.5 1c-.34-.55-.141-1 .441-1S524 .45 524 1s-.198 1-.441 1-.72-.45-1.059-1zM544 1c0-1.281.708-1.281 1.5 0 .34.55.141 1-.441 1S544 1.55 544 1zm35.603.167c-.283-.459.14-.834.941-.834.8 0 1.456.375 1.456.834 0 .458-.423.833-.941.833s-1.173-.375-1.456-.833zM616 1c0-1.281.708-1.281 1.5 0 .34.55.141 1-.441 1S616 1.55 616 1z\",\n    style: {\n      fill: \"#df0000\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.159 0 0 .159 22.778 22.58)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M247 1242.083c0-.504.352-1.066.782-1.25 1.857-.792 12.385-21.085 11.9-22.939-.359-1.374.388-2.622 2.503-4.177 3.324-2.445 7.23-9.191 6.47-11.174-.267-.695 1.052-2.713 2.93-4.484 2.58-2.433 3.415-4.05 3.415-6.605 0-2.487.596-3.701 2.25-4.582 3.07-1.635 4.68-3.922 4.718-6.699.018-1.28 1.4-3.694 3.07-5.366 1.672-1.67 3.982-4.899 5.134-7.173 1.152-2.274 8.855-16.059 17.118-30.634 8.262-14.575 18.166-32.125 22.01-39 3.843-6.875 7.807-13.672 8.809-15.105 1.002-1.433 2.38-4.696 3.064-7.25.683-2.555 1.566-4.645 1.963-4.645 1.702 0 3.864-3.365 3.864-6.015 0-1.66.782-3.423 1.855-4.178 2.6-1.832 8.145-11.975 8.145-14.9 0-1.564.804-2.785 2.25-3.42 2.602-1.141 7.692-9.9 7.727-13.293.013-1.269 1.316-3.519 2.896-5 1.58-1.482 4.103-4.944 5.605-7.694 1.502-2.75 3.089-5.45 3.526-6 .437-.55.952-3.003 1.145-5.45.34-4.304.236-4.489-3.149-5.632-9.694-3.275-17.165-5.48-23.5-6.935a2337.1 2337.1 0 0 1-13.134-3.063c-22.782-5.404-42.918-8.12-65.37-8.815-11.52-.358-13.292-.684-22.5-4.146-5.498-2.066-11.571-4.144-13.496-4.616-25.432-6.243-42.952-4.696-54.327 4.798-1.554 1.297-3.197 2.359-3.65 2.359-.453 0-2.37-1.462-4.261-3.25-1.891-1.787-6.714-5.725-10.718-8.75-4.004-3.025-9.139-7.556-11.412-10.068-2.272-2.513-6.382-5.862-9.132-7.442s-8.15-5.374-12-8.432c-3.85-3.057-8.21-6.182-9.69-6.945-1.48-.763-7.045-5.488-12.366-10.5-5.322-5.012-13.02-11.63-17.106-14.705-4.085-3.076-8.077-6.518-8.869-7.649-2.298-3.28 1.155-3.978 4.444-.898 1.423 1.333 5.69 4.723 9.482 7.533 5.361 3.972 7.197 4.86 8.25 3.985.745-.618 1.353-1.856 1.35-2.751-.003-.896.683-3.653 1.524-6.128s2.833-9.9 4.426-16.5 3.637-14.7 4.54-18c.905-3.3 2.015-7.8 2.467-10 .452-2.2 3.287-13.225 6.3-24.5s8.038-30.85 11.166-43.5c3.128-12.65 6.546-25.925 7.597-29.5 2.03-6.908 7.875-29.81 8.678-34 .264-1.375 1.078-4.525 1.81-7 .732-2.475 1.628-8.985 1.99-14.467 1.142-17.265 5.053-29.216 11.885-36.317 4.08-4.241 12.858-9.216 16.26-9.216 1.23 0 1.445-.317.713-1.05-.592-.591-4.03-.918-7.895-.75l-6.846.3-4.328 5.5c-2.38 3.025-4.896 6.175-5.59 7-1.23 1.459-3.115 4.046-12.023 16.5-2.36 3.3-7.63 10.95-11.71 17-7.156 10.61-8.654 12.452-10.158 12.485-.384.008-6.511-4.598-13.616-10.235-20.991-16.656-28.87-22.575-39.566-29.722-12.737-8.512-13.885-9.1-15.644-8.013-1.215.751-1.098 4.555.821 26.68C63.833 719.18 66.3 751.41 67.331 768c.487 7.833-.83 17.13-3.029 21.383-.886 1.715-3.68 5.057-6.207 7.428l-4.595 4.31 3.456 2.69c7.134 5.55 9.705 8.92 11.392 14.932.995 3.548 1.413 7.31 1.038 9.347-.908 4.929-5.07 11.925-9.252 15.554l-3.624 3.145 5.169 5.465c6.01 6.354 7.462 10.497 7.799 22.246.126 4.4.56 8.766.964 9.702.404.936 2.72 3.329 5.147 5.317 2.426 1.988 4.411 4.26 4.411 5.048 0 2.006-.99 1.803-5.215-1.067-7.104-4.827-8.056-3.851-9.272 9.5-.325 3.575-1.483 13.7-2.572 22.5-1.09 8.8-2.67 21.85-3.51 29a2751.64 2751.64 0 0 1-2.944 24c-.778 6.05-2.113 17.975-2.968 26.5-.854 8.525-2.047 17.676-2.65 20.336-1.514 6.671-.507 7.453 6.69 5.19 4.579-1.44 6.346-1.57 9.297-.678 7.453 2.252 11.908 9.42 10.833 17.432-1.089 8.12-6.862 12.945-16.2 13.54-3.569.227-6.489.788-6.489 1.245 0 .458 2.925 6.763 6.5 14.01 3.575 7.249 6.5 14.094 6.5 15.213 0 2.432-15.628 29.313-23.583 40.562-1.613 2.282-1.713 2.297-3.434.5-.975-1.017-4.126-6.35-7.002-11.85-2.877-5.5-5.562-10.45-5.966-11-.404-.55-2.613-4.477-4.908-8.726l-4.172-7.725 1.99-3.904c1.096-2.147 4.936-8.757 8.534-14.69 3.597-5.933 6.541-11.57 6.541-12.525 0-1.467-.909-1.717-5.824-1.604-6.668.154-9.512-1.278-13.86-6.978-3.881-5.089-4.027-13.418-.316-18.043 4.165-5.189 9.415-7.642 14.846-6.937 10.628 1.38 9.66 1.871 9.61-4.868-.023-3.3-.848-12.075-1.833-19.5-.985-7.425-2.155-16.875-2.6-21-.445-4.125-1.538-13.125-2.428-20-.89-6.875-2.282-17.9-3.091-24.5-.81-6.6-2.37-18.975-3.466-27.5-4.617-35.906-5.047-40.681-4.103-45.633.51-2.677 1.233-5.66 1.608-6.63.38-.982.084-2.482-.667-3.387-1.582-1.906-18.35-14.487-21.626-16.226C.848 838.38 0 837 0 835.464c0-3.301 1.274-3.106 5.747.882C11.89 841.822 24.784 851 26.336 851c.793 0 2.505-.896 3.803-1.991l2.361-1.992-3.108-2.758c-10.725-9.518-11.227-23.298-1.282-35.2 2.69-3.219 4.89-6.295 4.89-6.837 0-.541-1.53-2.152-3.4-3.578-1.87-1.427-4.618-4.743-6.106-7.369-2.663-4.702-2.695-4.973-2.105-17.775.33-7.15 1.236-18.625 2.014-25.5.778-6.875 2.348-20.825 3.488-31 1.14-10.175 2.516-22.1 3.056-26.5 1.84-14.977 3.339-37.226 2.684-39.835-.505-2.011-3.358-4.197-12.577-9.633C13.495 637.164 7.869 634 7.55 634c-.319 0-2.142-1.013-4.053-2.25-2.82-1.827-3.476-2.88-3.486-5.604L0 622.793l3.543 3.11c1.95 1.712 6.337 4.517 9.75 6.235 8.795 4.426 41.387 24.927 52.945 33.304A2537.79 2537.79 0 0 0 85.158 679c15.045 10.65 24.885 18.02 33.07 24.77 5.366 4.426 8.412 6.276 9.959 6.052 1.558-.225 4.741-3.935 10.573-12.322 4.59-6.6 9.108-13.308 10.042-14.906 3.314-5.673 24.304-33.231 30.448-39.976 2.063-2.265 3.75-4.405 3.75-4.757 0-1.362 45.305-52.074 57.5-64.363 4.4-4.433 12.016-10.747 16.925-14.03 8.653-5.786 19.026-14.62 26.917-22.925 8.832-9.293 17.977-26.097 21.822-40.097 1.854-6.752 2.19-10.651 2.237-25.946.064-21.446-1.509-28.95-9.454-45.1-6.182-12.565-12.598-20.064-37.3-43.593C237.596 358.895 227.12 350 224.192 350c-2.922 0-10.191 5.764-10.191 8.081 0 1.676 13.747 15.035 30.399 29.539 14.195 12.364 28.591 26.107 32.524 31.045 4.968 6.24 11.268 18.81 14.201 28.335 2.027 6.58 2.305 9.523 2.27 24-.039 15.794-.17 16.864-3.078 25.01-3.748 10.496-7.55 18.093-12.004 23.984-6.255 8.274-18.715 20.113-27.983 26.587-28.858 20.16-86.223 85.283-116.399 132.14-3.063 4.757-6.27 9.09-7.125 9.63-1.2.757-3.239-.382-8.93-4.991-15.452-12.514-34.916-26.234-59.117-41.67-22.265-14.204-39.718-24.45-42.988-25.238-1.962-.474-4.566.2-9.25 2.392L0 621.894v-6.307c0-5.994.43-7.122 8.65-22.697 4.758-9.015 12.226-22.58 16.595-30.144 4.37-7.564 8.146-14.54 8.393-15.5.317-1.236-2.483-4.323-9.585-10.566-5.519-4.851-11.68-10.83-13.693-13.286-3.453-4.213-3.58-4.618-2.26-7.159.77-1.48 6.238-7.702 12.15-13.825C26.163 496.287 31 490.862 31 490.354c0-.507-2.157-4.057-4.794-7.888C18.758 471.644 10.67 457.61 4.033 444c-1.207-2.475-2.608-5.281-3.113-6.236-.506-.955-.92-3.979-.92-6.72 0-4.298.24-4.902 1.75-4.403 1.754.58 12.086 5.51 41.52 19.812 15.157 7.365 25.433 11.47 28.84 11.522.884.014 4.138 1.375 7.23 3.025 5.19 2.77 8.66 3.76 8.66 2.471 0-.29-1.4-3.3-3.11-6.689-2.594-5.139-3.01-6.894-2.504-10.58.574-4.186.366-4.685-3.962-9.497-2.511-2.794-5.259-6.419-6.105-8.055C69.825 423.828 67 414.907 67 411.856c0-2.21-.868-3.379-3.957-5.329-2.176-1.374-4.426-3.374-4.999-4.445-1.702-3.18-4.509-3.323-12.31-.63C37.302 404.361 35 404.6 35 402.562c0-1.935 3.677-17.23 4.438-18.463.333-.538-1.136-2.59-3.264-4.56-4.149-3.838-6.578-9.801-5.703-14.002l1.054-5.063c.29-1.39 2.146-4.32 4.127-6.512 4.249-4.702 4.638-1.847-4.257-31.213-.781-2.58.712-2.215 11.267 2.75 5.26 2.475 10.458 4.5 11.55 4.5 1.092 0 3.184-1.283 4.65-2.851C62.693 323.046 67.231 321 72.5 321c5.363 0 9.31 1.798 12.643 5.758 1.31 1.556 2.895 3.147 3.522 3.535.628.388 5.882-1.319 11.675-3.794 5.793-2.474 11.012-4.499 11.596-4.499 1.722 0 1.248 2.317-1.891 9.24-1.626 3.586-3.491 8.646-4.146 11.246l-1.19 4.728 4.775 4.082c10.303 8.806 10.22 20.865-.204 29.53-5.038 4.186-5.141 5.218-1.75 17.39 1.028 3.695 1.631 6.956 1.338 7.249-.292.293-4.512-1.03-9.378-2.941-9.567-3.756-10.33-3.669-12.996 1.487-1.226 2.37-1.127 3.189.921 7.608 2.44 5.266 7.372 11.072 11.737 13.815 1.458.917 6.183 2.519 10.5 3.56 13.878 3.347 31.991 12.76 35.832 18.621 2.202 3.361 3.516 2.963 3.516-1.066 0-4.063 1.31-11.009 4.152-22.002 1.13-4.374 2.404-11.775 2.83-16.447.685-7.514 1.088-8.763 3.494-10.833 2.92-2.511 5.523-2.35 8.821.549 2.852 2.506 9.843 13.197 10.85 16.59 3.096 10.44 4.727 18.002 5.306 24.594.59 6.726.294 8.763-2.87 19.738-6.316 21.9-10.455 26.603-19.806 22.505-8.618-3.777-13.295-4.51-25.506-3.995-14.889.627-23.885 3.245-27.514 8.007-9.145 12-15.918 37.588-14.298 54.022.989 10.037 4.163 21.553 7.209 26.156l2.633 3.98-2.4 4.543c-2.941 5.566-7.384 7.195-13.829 5.068-3.843-1.268-4.298-1.166-12.778 2.886-4.837 2.311-13.069 6.628-18.294 9.594-5.225 2.965-15.575 8.452-23 12.194-16.359 8.243-16.67 8.94-6.5 14.605 7.22 4.023 10.254 5.88 31.5 19.271 15.891 10.017 40.582 27.42 50.513 35.602 10.322 8.506 13.64 10.824 15.489 10.824 1.614 0 3.148-2.001 17.632-23 4.743-6.875 9.827-13.85 11.3-15.5 1.471-1.65 3.898-4.839 5.393-7.086 1.494-2.247 4.62-6.37 6.945-9.163 2.325-2.792 6.703-8.14 9.728-11.885 3.025-3.745 7.797-9.296 10.604-12.337 2.808-3.041 7.716-8.454 10.907-12.029 17.338-19.424 34.46-35.719 49.387-47 12.395-9.368 22.716-19.16 28.618-27.149 5.366-7.263 11.984-20.698 13.947-28.311 1.959-7.597 2.022-26.853.12-36.702-3.934-20.374-15.315-39.112-28.426-46.803-2.311-1.356-5.9-4.056-7.973-6-10.537-9.878-15.842-14.63-17.341-15.535-.911-.55-5.346-4.375-9.856-8.5-4.509-4.124-9.216-8.174-10.46-9-2.702-1.792-7.527-7.398-7.527-8.744 0-.526 2.813-3.369 6.25-6.318 3.438-2.949 15.925-14.85 27.75-26.445 11.825-11.596 25.005-24.42 29.29-28.496 9.348-8.895 26.116-28.08 36.896-42.215 22.498-29.501 27.075-36.153 28.199-40.982.573-2.465.214-2.884-4.116-4.8-2.61-1.153-5.678-2.976-6.82-4.048-1.143-1.073-4.748-2.436-8.013-3.028-3.265-.593-6.885-1.687-8.046-2.432-2.27-1.458-19.795-7.182-30.39-9.926-3.575-.926-7.85-2.155-9.5-2.73-1.65-.577-5.365-1.496-8.256-2.043-6.449-1.22-7.32-3.324-4.819-11.65 2.719-9.048 4.888-18.838 6.57-29.643.513-3.3 1.717-9.375 2.675-13.5 1.446-6.23 1.748-12.663 1.785-38 .028-19.222-.418-33.828-1.207-39.5-2.21-15.882-6.561-38.535-9.747-50.75C255.858.286 256.046 0 258.31 0c2.383 0 2.646.55 4.653 9.75 1.17 5.362 2.344 10.65 2.61 11.75 1.376 5.696 4.51 26.576 5.562 37.065 1.613 16.081 1.624 47.79.022 64.935-1.617 17.309-3.332 27.46-7.317 43.322-1.746 6.948-2.713 12.67-2.218 13.119.483.439 5.153 1.829 10.378 3.09 5.225 1.26 13.301 3.57 17.947 5.133 4.87 1.639 8.82 2.47 9.328 1.961 2.052-2.052 2.547-8.386 1.092-13.98-1.442-5.542-2.162-6.906-6.535-12.366-1.843-2.301-2.003-3.108-1.038-5.225 1.132-2.485 1.215-2.5 10.588-1.884 8.528.56 9.87.402 13.783-1.617 9.127-4.712 13.234-11.075 13.264-20.553.025-7.854-2.323-11.741-6.828-11.302-3.355.327-3.378.422-2.046 8.492.913 5.526.054 8.547-3.62 12.73-6.163 7.02-14.727 7.172-21.128.375-3.48-3.696-3.807-4.524-3.803-9.669.004-6.623 2.368-11.233 6.984-13.62 3.85-1.99 3.241-3.078-2.127-3.798-11.17-1.498-16.673-12.804-10.833-22.253C289.708 91.12 294.15 89 300.566 89c4.29 0 4.978.377 9.384 5.144 5.301 5.736 6.578 5.407 6.22-1.603-.136-2.683.557-5.354 2.062-7.947 3.43-5.908 6.83-7.98 13.203-8.041 4.703-.046 5.852.349 8.587 2.947 4.213 4.004 5.979 7.61 5.974 12.2-.007 6.742-5.213 12.779-12.265 14.221-3.432.702-4.337 2.528-3.3 6.658.474 1.891 1.266 2.421 3.62 2.421 7.786 0 16.694-7.029 19.955-15.747 1.097-2.93 1.994-6.13 1.994-7.109 0-4.481-3.287-12.189-6.995-16.401-4.514-5.128-4.678-5.787-2.326-9.376 1.592-2.43 1.996-2.528 7.818-1.904 9.36 1.002 14.68-.747 20.978-6.896 4.332-4.229 5.469-6.079 6.397-10.404 1.49-6.952 1.426-7.91-.876-12.981-1.706-3.76-2.317-4.277-4.728-4-2.732.314-2.764.398-2.447 6.514.442 8.545-2.185 14.428-7.697 17.24-5.18 2.643-9.374 2.613-14.202-.1C347.232 51.2 345 46.818 345 40.243c0-4.123.588-5.725 3.5-9.54 3.979-5.21 4.244-6.332 1.689-7.143-.996-.316-3.297-2.108-5.113-3.982-3.837-3.958-5.04-10.126-3.115-15.96L343.155 0h52.98l-.672 2.25c-1.292 4.329-3.667 6.953-8.047 8.89-4.73 2.093-5.714 4.703-3.113 8.26 3.683 5.037 19.91-6.627 21.298-15.308.48-2.999 1.127-4.092 2.421-4.092 1.479 0 1.647.53 1.028 3.25-1.133 4.981-4.519 10.915-8.212 14.392-4.076 3.837-10.89 7.358-14.24 7.358-3.566 0-3.962 1.387-2.045 7.16 2.128 6.406 1.541 15.792-1.335 21.37-5.371 10.411-15.397 15.907-29.968 16.426-1.833.065-1.525 2.85.656 5.912 3.131 4.398 5.314 13.448 4.548 18.86-1.882 13.297-8.164 19.461-26.308 25.815-.796.279-1.091 1.158-.716 2.135 4.593 11.97 1.758 24.402-7.463 32.733-6.147 5.553-10.17 6.94-18.195 6.27-3.7-.308-6.932-.23-7.182.173-.25.404.978 3.627 2.728 7.164 2.9 5.861 3.168 7.198 3.024 15.134l-.157 8.705 3.928 1.571c4.74 1.897 7.294 1.992 8.677.322.917-1.106 9.693-16.915 36.225-65.25 4.227-7.7 9.102-16.382 10.835-19.294 1.732-2.912 3.15-5.473 3.15-5.692 0-.22 2.839-5.262 6.308-11.206 3.47-5.945 8.716-15.308 11.66-20.808 2.943-5.5 8.059-14.725 11.369-20.5C405.347 36.28 424 1.775 424 .828c0-.455 1.125-.828 2.5-.828s2.5.5 2.5 1.111-2.157 4.774-4.794 9.25c-2.636 4.477-5.733 9.939-6.882 12.139-6.304 12.067-11.411 21.4-18.334 33.5-8.253 14.426-9.385 16.438-20.528 36.5-8.462 15.234-13.377 23.991-19.642 35-6.147 10.8-14.389 25.59-18.668 33.5-1.934 3.575-7.035 12.795-11.334 20.488-4.3 7.693-7.818 14.775-7.818 15.736 0 1.678 9.26 7.265 14.818 8.94 3.152.95 4.544-.632 11.58-13.167 3.242-5.773 8.593-15.222 11.893-20.997 11.681-20.445 13.464-23.589 18.148-32 2.603-4.675 6.543-11.65 8.754-15.5 2.212-3.85 5.456-9.7 7.21-13 1.752-3.3 8.62-15.45 15.259-27 6.64-11.55 15.332-27.075 19.318-34.5 3.986-7.425 7.87-14.21 8.633-15.079.763-.868 1.387-1.865 1.387-2.216 0-.813 15.868-29.787 17.226-31.455C456 .302 463.23 0 485.122 0 501.005 0 514 .148 514 .33c0 .18-1.993 3.826-4.43 8.101-2.436 4.275-4.175 8.434-3.865 9.242.33.862-.89 2.986-2.96 5.148-3.99 4.166-6.745 9.11-6.745 12.106 0 1.115-1.056 2.719-2.346 3.564-2.605 1.707-4.654 5.518-4.654 8.655 0 1.128-1.405 3.364-3.122 4.968-2.49 2.325-3.01 3.478-2.568 5.687.46 2.302.1 2.976-2.128 3.98-1.557.703-3.88 3.413-5.541 6.465-1.572 2.89-5.231 9.304-8.13 14.254-2.9 4.95-9.762 16.875-15.25 26.5a8917.58 8917.58 0 0 1-17.476 30.5C424.14 157.962 420 166.01 420 168.25c0 1.07-1.35 3.209-3 4.75-2.017 1.884-3 3.765-3 5.74 0 2.086-.66 3.24-2.273 3.975-2.71 1.234-7.727 10.682-7.727 14.55 0 1.782-.53 2.735-1.522 2.735-2.349 0-9.478 11.724-9.478 15.588 0 2.397-.536 3.447-1.997 3.911-2.56.812-7.406 9.008-6.588 11.14.34.888.111 2.227-.51 2.975-3.002 3.617-.188 4.821 30.095 12.88 7.425 1.975 15.75 4.02 18.5 4.543 2.75.524 7.25 1.41 10 1.97s6.125 1.24 7.5 1.513c5.814 1.152 35.143 3.331 38.186 2.837 4.554-.739 11.061.754 26.314 6.037 24.81 8.593 45.558 8.292 59.039-.856 4.15-2.816 7.031-2.645 9.333.555.755 1.049 1.791 1.907 2.303 1.907s4.337 2.588 8.5 5.75c4.161 3.163 9.65 7.247 12.196 9.078 2.546 1.83 5.754 4.339 7.129 5.575 1.375 1.236 4.828 3.701 7.673 5.477 2.845 1.777 5.752 3.927 6.46 4.78.707.853 4.005 3.39 7.327 5.64 3.322 2.249 9.499 7.376 13.727 11.394 4.227 4.018 8.314 7.306 9.08 7.306.768 0 1.952 1.012 2.633 2.25.681 1.237 5.932 5.802 11.67 10.144 5.736 4.341 10.43 8.279 10.43 8.75 0 2.68-5.927-.224-16.863-8.261-10.27-7.548-12.58-8.857-13.644-7.735-1.11 1.171-7.552 25.755-14.504 55.352-1.162 4.95-4.755 19.8-7.983 33-6.545 26.758-10.327 42.502-15.016 62.5-1.741 7.425-3.842 16.2-4.67 19.5-4.624 18.441-4.704 19.016-4.448 32.157.24 12.381-.202 16.089-3.086 25.843-2.5 8.457-9.095 15.793-17.767 19.762-5.758 2.636-7.17 2.896-12.676 2.332-8.583-.88-12.975-2.924-19.176-8.93-5.745-5.562-10.882-14.606-13.544-23.842-1.5-5.2-2.456-6.408-11.38-14.36-5.359-4.777-10.423-9.422-11.254-10.323-.831-.902-4.881-4.562-9-8.134-4.119-3.573-15.332-13.698-24.919-22.5-9.586-8.803-23.311-21.159-30.5-27.458-7.188-6.3-19.783-17.55-27.987-25A5228.566 5228.566 0 0 0 397.47 411.5c-6.158-5.5-15.87-14.243-21.583-19.43a4335.62 4335.62 0 0 0-18.847-17 3479.252 3479.252 0 0 1-19.428-17.57c-9.011-8.215-24.225-21.916-46.112-41.524-1.65-1.478-6.245-5.678-10.21-9.332-3.966-3.654-7.386-6.644-7.6-6.644-1.23 0-43.69 42.988-43.69 44.233 0 .827 7.743 8.876 17.206 17.886l29.25 27.85c6.624 6.307 14.092 14.23 16.595 17.605 9.438 12.732 15.52 27.105 18.473 43.662.909 5.095 1.998 9.939 2.42 10.764.621 1.212 4.01 1.596 17.662 2 9.292.275 17.64.95 18.552 1.5 1.649.995 13.756 11.543 16.764 14.606.868.884 6.528 6.024 12.578 11.422 6.05 5.4 16.4 14.847 23 20.996 6.6 6.149 14.475 13.354 17.5 16.012a593.394 593.394 0 0 1 10.5 9.49c27.371 25.491 32.705 30.367 39.905 36.474l5.894 5 51.6.31c28.38.17 53.5.031 55.823-.308 3.582-.523 4.794-1.37 8-5.596 2.078-2.738 5.578-7.284 7.778-10.1 5.488-7.027 8.21-10.907 20.2-28.79 5.71-8.515 11.063-15.863 11.895-16.329 1.066-.596 3.194.412 7.209 3.416 3.133 2.345 5.921 4.544 6.196 4.887 1.426 1.78 18.728 15.326 35.022 27.417 11.995 8.902 19.132 13.572 20.451 13.383 1.814-.26 2.014-.974 1.9-6.79-.15-7.65-4.943-62.143-6.421-73-.562-4.125-1.295-13.135-1.63-20.022-.727-14.943-.075-16.844 8.427-24.6l5.616-5.123-4.433-2.754c-2.437-1.515-5.433-3.935-6.656-5.378-3.103-3.66-6.276-12.412-6.276-17.31 0-5.994 4.551-14.478 9.75-18.175 2.337-1.663 4.25-3.499 4.25-4.08 0-.582-1.628-2.357-3.618-3.945-5.443-4.343-8.333-11.557-8.484-21.178-.146-9.27-1.194-12.744-4.5-14.91-3.458-2.265-3.225-4.965.352-4.07 8.005 2.005 7.468 2.841 9.59-14.955 1.048-8.8 2.076-16.187 2.283-16.417 1.036-1.146 1.135 1.111.352 8.09a764.558 764.558 0 0 0-1.466 14.5c-.766 8.632-1.336 13.349-2.486 20.587-1.028 6.473.01 14.968 2.391 19.575 2.33 4.504 8.353 8.95 13.673 10.09 9.955 2.135 19.097-3.366 21.832-13.137 1.29-4.604.498-22.681-1.895-43.288-.511-4.4-1.428-12.725-2.038-18.5-.61-5.775-1.948-15.9-2.973-22.5s-2.357-16.5-2.961-22c-3.506-31.954-7.636-63.418-8.429-64.21-1.95-1.95-3.516 5.444-5.127 24.21-.33 3.85-1.04 7.44-1.576 7.978-1.042 1.044-.453-9.132 1.153-19.948 1.112-7.485.402-8.34-5.593-6.736-9.185 2.457-14.878 1.087-19.8-4.763-3.188-3.788-4.4-10.817-2.638-15.295 1.965-4.993 6.675-9.397 11.496-10.747 3.625-1.015 5.11-.956 8.952.353 4.032 1.374 4.677 1.386 5.172.098.31-.81-2.561-7.202-6.38-14.206-3.82-7.004-7.242-13.547-7.604-14.54-.825-2.265.967-6.591 6.587-15.899 2.423-4.012 6.79-11.795 9.703-17.295 2.915-5.5 5.67-10.408 6.123-10.908 1.674-1.843 3.358.529 13.433 18.908 1.206 2.2 3.614 6.395 5.351 9.323 5.112 8.614 6.277 12.017 4.97 14.518-.62 1.187-4.948 7.948-9.617 15.024-4.669 7.076-8.542 13.6-8.608 14.5-.126 1.722.73 1.773 9.103.548 16.518-2.417 24.215 21.679 9.65 30.214-3.571 2.093-5.321 2.484-9.62 2.15-2.889-.225-6.006-.752-6.926-1.17-2.675-1.218-3.749 2.072-2.739 8.393.484 3.025 1.566 11.35 2.405 18.5.84 7.15 2.877 23.125 4.527 35.5 1.651 12.375 4.126 32.175 5.5 44 1.374 11.825 2.944 23.945 3.49 26.934 1.273 6.983 1.285 30.159.018 33.492-.535 1.406-.742 3.123-.462 3.815.508 1.254 18.777 15.103 23.14 17.541 2.466 1.378 3.262 6.218 1.022 6.218-.7 0-3.04-1.462-5.202-3.25-7.683-6.354-20.045-14.75-21.717-14.75-.934 0-2.946 1.074-4.472 2.387l-2.775 2.386 3.53 3.907c6.13 6.786 8.242 12.401 7.67 20.394-.578 8.086-2.484 11.418-9.955 17.403l-4.964 3.977 2.328 1.785c15.438 11.833 15.674 13.001 11.4 56.526-1.335 13.604-2.947 31.26-3.582 39.235-.634 7.975-1.553 19-2.042 24.5-2.152 24.224-2.264 27.413-1.014 28.92 1.415 1.704 25.403 15.997 29.399 17.516 2.604.99 2.668 1.22 2.668 9.581 0 7.465-.398 9.429-3.095 15.275-9.433 20.444-18.014 35.817-25.57 45.807-2.454 3.245-5.164 7.224-6.022 8.84l-1.56 2.94 10.97 10.56c6.033 5.809 12.453 12.68 14.265 15.271 3.272 4.679 3.282 4.73 1.5 7.5-.987 1.535-6.45 7.367-12.141 12.961-5.69 5.594-10.347 10.697-10.347 11.34 0 .641 2.87 4.99 6.377 9.663 3.507 4.673 6.978 9.696 7.714 11.161.735 1.466 2.088 3.79 3.006 5.165.918 1.375 4.246 7.45 7.395 13.5 3.149 6.05 6.126 11.428 6.617 11.95 1.178 1.256 1.155 14.55-.026 14.55-.504 0-1.066-.399-1.25-.887-.29-.77-14.616-7.933-49.575-24.786-5.083-2.45-10.033-4.34-11-4.2-.967.141-2.883-.083-4.258-.497-4.484-1.35-16.457-6.883-18.256-8.435-2.855-2.465-3.156-.7-1.402 8.226.912 4.641 1.658 10.2 1.658 12.352 0 3.334.74 4.686 4.98 9.11 6.004 6.261 9.682 12.326 11.98 19.755 1.89 6.106 10.02 16.362 12.972 16.362.945 0 5.025-1.125 9.068-2.5 12.145-4.13 12.375-3.92 9 8.257-2.183 7.878-2.505 11.243-1.077 11.243 2.533 0 7.142 5.531 8.683 10.42 2.34 7.425 1.333 11.661-4.173 17.548-2.438 2.607-4.433 5.287-4.433 5.956 0 .67 1.604 6.131 3.564 12.138 4.892 14.988 4.392 15.446-9.228 8.438-4.81-2.475-9.547-4.5-10.528-4.5-.995 0-2.908 1.783-4.33 4.036-5.304 8.401-15.463 10.66-23.078 5.133-2.145-1.557-4.539-4.032-5.319-5.5-1.134-2.132-2.14-2.669-5.007-2.669-1.973 0-5.16.487-7.08 1.083-8.65 2.681-9.988 2.797-10.977.95-.663-1.24-.214-4.117 1.504-9.65 1.347-4.335 2.439-8.558 2.426-9.383-.013-.825-1.781-2.716-3.93-4.201-5.282-3.653-7.054-6.659-7.643-12.972-.638-6.845 1.487-11.115 7.876-15.823 5.513-4.063 5.699-5.103 2.702-15.164-1.126-3.782-1.774-7.318-1.44-7.858.978-1.584 5.27-1.134 9.724 1.018 5.317 2.569 7.285 2.521 9.207-.223 2.218-3.165 1.935-6.275-1.028-11.333-4.061-6.929-12.884-13.06-20.915-14.534-9.427-1.73-19.665-6.54-29.33-13.78-8.333-6.244-8.732-6.126-9.647 2.861-.308 3.03-1.046 6.859-1.639 8.509-3.881 10.8-5.127 15.954-5.612 23.205-.456 6.83-.93 8.565-2.828 10.348-3.005 2.822-7.37 1.913-12.33-2.57-6.68-6.034-13.123-24.345-13.117-37.277.004-9.003 1.97-17.475 7.333-31.583 3.544-9.326 4.572-11.085 7.21-12.343 2.76-1.317 3.48-1.288 7.018.282 2.93 1.3 7.534 1.862 17.942 2.19 11.767.37 15.249.12 21.831-1.574 8.715-2.243 10.426-3.447 15.165-10.678 7.827-11.942 12.815-26.252 14.149-40.597.908-9.756-2.01-24.758-6.592-33.903-2.143-4.277-1.34-8.047 2.587-12.146 2.966-3.096 5.515-3.487 11.347-1.74 3.596 1.078 4.28.824 20.616-7.645A7752.258 7752.258 0 0 1 726 634.803c7.425-3.799 14.079-7.478 14.787-8.177 1.82-1.798.587-4.204-3.114-6.076-1.745-.883-3.848-2.025-4.673-2.539-.825-.513-5.1-3.056-9.5-5.65-18.51-10.912-61.88-41.008-66-45.8C655.443 564.17 638.82 552 637.609 552c-1.8 0-4.303 3.08-12.175 14.982-25.663 38.795-60.596 79.958-92.07 108.489-9.195 8.335-13.174 11.498-27.364 21.75-16.761 12.11-28.201 28.226-33.206 46.779-2.737 10.149-2.923 30.313-.378 41 3.64 15.284 16.529 37.238 24.584 41.876 1.925 1.108 7.173 5.527 11.663 9.82 4.49 4.292 14.375 13.654 21.968 20.804C547.22 873.124 552 878.049 552 879.523c0 .61-3.815 4.602-8.477 8.869-38.79 35.501-84.874 86.935-109.074 121.739-9.332 13.42-10.263 16.623-5.226 17.96 1.498.397 3.922 1.665 5.388 2.818 1.465 1.152 4.91 2.762 7.655 3.577 2.745.816 5.496 1.856 6.113 2.312 4.54 3.356 39.077 13.732 52.856 15.88 6.99 1.088 6.95.295 1.267 24.822-1.956 8.445-4.914 26.4-6.566 39.856-.811 6.61-1.021 17.806-.637 34 .548 23.158 1.023 28.309 4.254 46.144.797 4.4 1.448 9.66 1.448 11.691 0 2.03.386 3.93.86 4.223.473.292 1.134 2.456 1.47 4.809.335 2.352 1.748 7.827 3.14 12.166 3.502 10.923 3.4 12.611-.765 12.611-3.197 0-3.33-.169-4.551-5.75-10.731-49.052-11.58-55.706-11.58-90.75 0-25.006.312-31.066 2.259-44 2.293-15.237 5.358-31.238 7.19-37.53.88-3.024.736-3.695-1.118-5.22-1.17-.963-2.865-1.754-3.767-1.76-2.01-.01-19.411-4.405-24.81-6.265-5.59-1.925-6.329-1.366-6.329 4.793 0 6.614 1.148 9.736 5.558 15.118 3.93 4.795 4.407 8.575 1.355 10.713-1.542 1.08-2.912 1.225-5.244.556-1.735-.498-5.57-.905-8.522-.905-6.644 0-15.54 4.403-18.926 9.366-2.907 4.263-4.53 13.773-3.196 18.728 2.32 8.617 7.076 7.012 6.201-2.093-.402-4.186-.062-5.65 2.057-8.852 4.576-6.915 12.013-8.633 19.844-4.583 4.967 2.568 6.873 6.097 6.873 12.725 0 4.88-.473 6.64-2.5 9.298-3.25 4.261-3.166 4.867.943 6.817 8.718 4.137 11.494 14.656 6.057 22.954-3.986 6.083-13.245 7.537-19.768 3.104-2.053-1.395-3.732-2.885-3.732-3.311 0-1.521-4.138-5.186-5.15-4.56-.589.364-.762 2.062-.404 3.969.786 4.19-1.196 8.994-5.3 12.854-4.042 3.8-11.972 4.71-17.635 2.022-4.007-1.901-7.467-7.665-7.467-12.438 0-7.065 6.939-14.988 13.135-14.996 2.91 0 6.138-2.552 5.534-4.366-.601-1.803-7.294-2.424-11.296-1.048-7.95 2.733-15.417 13.697-15.417 22.64 0 5.46 3.778 14.046 6.92 15.728 5.114 2.736 5.829 6.15 2.012 9.604-1.576 1.426-2.54 1.525-6.15.63-7.777-1.927-16.572.803-22.47 6.973-4.001 4.184-5.312 7.623-5.312 13.932 0 4.941 2.17 11.917 3.699 11.888 2.806-.054 3.802-2.217 3.82-8.302.017-5.343.451-6.955 2.651-9.84 1.448-1.897 4.48-4.283 6.74-5.302 3.542-1.598 4.662-1.686 8.142-.643 5.967 1.787 9.984 5.83 10.929 10.997 1.197 6.547-.393 10.99-5.642 15.762-4.97 4.518-4.958 5.64.08 7.745 6.683 2.792 10.578 13.363 7.586 20.586l-1.248 3.012H364l.022-2.25c.034-3.445 3.483-10.29 6.12-12.142 1.297-.911 4.084-1.935 6.194-2.274 4.421-.711 5.166-1.883 3.681-5.789-.96-2.523-1.414-2.742-4.616-2.223-9.144 1.484-17.776 10.485-19.015 19.827-.385 2.904-1.151 4.851-1.908 4.851-2.034 0-2.58-2.905-1.383-7.357 3.103-11.534 10.078-18.458 21.76-21.604 3.837-1.033 4.26-1.425 3.622-3.354-.397-1.202-.93-5.785-1.182-10.185-.37-6.432-.08-8.883 1.483-12.507 4.682-10.86 11.292-15.127 24.472-15.794 4.813-.244 8.75-.661 8.75-.927s-1.288-2.124-2.863-4.128c-6.724-8.558-8.388-16.057-5.605-25.25 3.06-10.106 11.902-18.099 21.468-19.405 10.212-1.395 10.464-1.7 7-8.489-3.001-5.883-2.747-15.286.584-21.601 5.849-11.09 11.917-14.755 24.916-15.053 5.272-.12 8.909-.613 8.78-1.189-.122-.54-1.36-2.658-2.75-4.707-3.285-4.842-4.682-10.224-4.409-16.987.122-3-.102-5.777-.496-6.171-1.232-1.232-10.017-4.29-12.326-4.291-1.681 0-3.084 1.593-5.943 6.749-10.795 19.47-42.122 74.956-73.823 130.75-20.108 35.392-30.238 53.455-32.524 58-1.03 2.048-2.38 3.1-4.253 3.316l-2.744.316 4.17-7.816c2.294-4.299 5.38-9.616 6.86-11.816 1.479-2.2 3.92-6.475 5.425-9.5 1.505-3.025 6.919-12.925 12.03-22a27840.051 27840.051 0 0 0 34.529-61.5c21.62-38.635 34.313-61.152 39.364-69.837 7.738-13.307 10.013-18.17 9.33-19.952-.583-1.518-13.201-8.711-15.282-8.711-1.74 0-3.9 2.83-8.396 11-2.27 4.125-4.53 8.175-5.022 9-4.142 6.945-23.592 41.16-27.003 47.5-2.367 4.4-8.354 14.975-13.303 23.5-15.421 26.56-16.714 28.834-16.714 29.407 0 .307-1.688 3.399-3.75 6.872-4.48 7.542-5.322 9.026-13.183 23.221-3.351 6.05-7.932 14.15-10.18 18-4.107 7.03-7.132 12.45-13.678 24.5-1.942 3.575-5.098 9.088-7.012 12.25l-3.481 5.75h-27.358c-15.914 0-27.358-.383-27.358-.917zm151.545-17.538c4.049-4.048 2.919-9.282-2.487-11.521-5.848-2.422-12.058.973-12.058 6.592 0 6.995 9.321 10.154 14.545 4.93zm51-93c4.459-4.458 2.761-11.022-3.137-12.128-4.425-.83-7.868.864-9.433 4.643-1.502 3.627-.5 6.588 2.844 8.404 3.934 2.136 6.957 1.85 9.726-.918zM47.686 1121.25c5.6-8.098 15.09-24.307 16.354-27.935.975-2.796.354-4.467-7.466-20.11-4.69-9.382-9.017-17.361-9.615-17.73-.597-.369-1.988.147-3.092 1.146-1.733 1.568-9.662 14.233-14.995 23.952a200.488 200.488 0 0 1-3.775 6.5c-1.15 1.885-2.091 4.256-2.093 5.27-.005 2.568 18.07 34.657 19.523 34.657.65 0 2.972-2.587 5.16-5.75zm-11.597-17.44c-2.781-5.12-5.065-10.483-5.073-11.917-.022-3.599 11.565-21.122 13.691-20.706.879.172 3.78 4.12 6.446 8.772 6.414 11.194 6.377 13.193-.445 24.09-7.288 11.638-8.174 11.623-14.619-.24zm11.807-4.647c1.707-2.661 3.104-6.11 3.104-7.663 0-3.927-4.696-11.705-6.82-11.296-2.16.416-8.18 9.61-8.18 12.494 0 3.137 5.157 11.302 7.138 11.302.91 0 3.05-2.177 4.758-4.838zm18.335-42.21c5.35-1.486 8.769-6.326 8.769-12.415 0-4.211-.457-5.23-3.882-8.656-3.518-3.517-4.373-3.882-9.1-3.882-4.6 0-5.62.402-8.618 3.4-2.934 2.934-3.4 4.065-3.396 8.25.004 5.977 2.799 10.926 7.266 12.867 3.944 1.715 4.294 1.732 8.96.436zm-27.497-3.487c3.445-3.445 3.517-3.676 2.864-9.23-.81-6.892-2.655-9.944-7.144-11.82-9.197-3.843-18.454 1.81-18.454 11.269 0 8.843 4.552 13.205 13.85 13.275 4.816.036 5.703-.313 8.884-3.494zm12.234-48.532c1.614-13.989 3.646-31.059 4.514-37.934.868-6.875 3.158-27.125 5.089-45 1.93-17.875 4.006-36.325 4.613-41 1.478-11.387.013-18.67-4.838-24.039-8.08-8.943-23.154-8.92-30.7.048-5.275 6.269-5.314 7.75-1.173 44.727 2.08 18.57 3.881 34.439 4.003 35.264 1.102 7.493 2.636 19.66 4.476 35.5 2.97 25.572 6.204 51.285 6.73 53.5.97 4.08 2.412 6.306 3.427 5.291.508-.508 2.244-12.369 3.859-26.357zm-8.35-18.684c-.285-.963-1.253-8.275-2.152-16.25-.898-7.975-2.293-19.225-3.1-25-.806-5.775-1.871-15-2.366-20.5-.496-5.5-1.375-12.925-1.953-16.5-1.34-8.27-2.556-37.837-1.698-41.256 1.516-6.04 9.735-12.32 14.493-11.075 3.267.854 2.65 2.398-2.935 7.331-4.124 3.644-5.257 5.356-5.955 9-1.036 5.407.868 32.195 4.976 70 3.859 35.507 4.455 46 2.613 46-.774 0-1.64-.787-1.924-1.75zm346.889 4.735c2.24-4.967 2.357-4.858-8.996-8.393-26.142-8.14-51.566-14.158-70.011-16.573-4.95-.648-11.925-1.618-15.5-2.156-7.86-1.182-64.661-2.416-68.369-1.485-4.7 1.18-2.814 2.416 7.119 4.669 5.362 1.215 13.125 3.439 17.25 4.94 6.299 2.293 9.822 2.842 22 3.427 26.847 1.292 32.066 1.85 53.3 5.705 13.567 2.463 39.682 9.124 50.2 12.804 4.952 1.733 8.598 2.494 9.57 1.999.865-.44 2.41-2.662 3.437-4.937zm5.936-11.208c2.677-3.821 1.95-5.68-3.065-7.83-4.984-2.136-5.202-3.042-2.466-10.223 1.477-3.876 3.526-4.33 9.851-2.18l5.487 1.866 1.922-2.374c3.926-4.849 2.521-6.132-12.172-11.112-35.288-11.96-66.473-18.658-109-23.412-15.76-1.762-56.902-2.036-73.5-.49-28.685 2.672-33.992 3.344-48 6.085-18.637 3.647-25.5 5.587-25.5 7.207 0 .693 2.297 2.974 5.105 5.07 5.417 4.045 5.193 4.021 15.243 1.587 2.667-.646 5.192-.791 5.612-.323.42.469 1.231 2.777 1.803 5.13.823 3.39.748 4.568-.362 5.678-2.246 2.246-1.641 4.232 1.967 6.462 4.05 2.504 9.12 2.647 23.708.668 27.423-3.718 67-4.4 98.588-1.697 25.422 2.175 62.165 9.784 88.836 18.395 13.2 4.263 13.954 4.333 15.943 1.493zm-28.404-15.719c-6.907-2.25-7.729-3.523-6.08-9.413 1.841-6.574 2.53-6.865 10.58-4.465 9.768 2.91 10.2 3.46 7.853 10.005-2.232 6.228-3.707 6.69-12.353 3.873zm-27.539-6.56c-.55-.214-2.97-.897-5.38-1.517l-4.378-1.128.666-5.676c.943-8.029 1.561-8.412 10.592-6.564 10.025 2.05 10.556 2.656 8.296 9.47-1.693 5.106-1.997 5.428-5.296 5.612-1.925.107-3.95.019-4.5-.196zm-160.25-5.635c-1.854-1.874-1.64-11.776.27-12.509.836-.32 4.746-.644 8.688-.719l7.169-.135.852 4c1.052 4.935.32 8.21-1.981 8.861-4.946 1.4-13.815 1.697-14.998.502zM306 951.63c-8.755-1.523-9.278-1.954-8.498-6.984 1.293-8.327.882-7.993 8.982-7.308 3.994.338 8.501 1.085 10.015 1.66 2.656 1.01 2.728 1.23 2.062 6.25-1.095 8.254-1.278 8.347-12.561 6.382zm-97.333-3.298c-.367-.366-.667-3.058-.667-5.98 0-4.954.187-5.365 2.75-6.046 1.512-.402 5.45-.748 8.75-.769l6-.038.305 5.907c.208 4.05-.106 6.168-1 6.735-1.555.986-15.182 1.148-16.138.191zm61.583-.019c-2.052-.413-2.25-1.017-2.25-6.864 0-7.576.561-7.918 11-6.705l6.5.755v13l-6.5.134c-3.575.074-7.513-.07-8.75-.32zm-31.821-1.64c-.299-.776-.405-3.834-.236-6.793l.307-5.381 7.094-.29c8.592-.353 9.308.304 8.5 7.79l-.594 5.5-7.264.294c-5.54.224-7.394-.041-7.807-1.12zm-49.956 23.127c5.16-2.507 5.769-3.806 1.777-3.79-5.33.021-10.25 1.255-10.25 2.57 0 1.03 2.392 3.207 3.723 3.389.123.016 2.26-.96 4.75-2.17zm234.032-32.75c-.652-6.495-.54-7.1 1.707-9.25 1.323-1.266 3.125-2.751 4.003-3.301 2.622-1.64 3.034-4.97.937-7.56-2.703-3.34-8.337-3.21-11.818.271-4.824 4.825-4.152 17.286 1.281 23.744 3.937 4.678 4.677 3.935 3.89-3.904zM395 941.177c0-.452-3.712-4.39-8.25-8.75-7.888-7.581-12.218-11.519-27.408-24.927-3.739-3.3-10.636-9.6-15.327-14-4.691-4.4-17.073-15.65-27.515-25-10.443-9.35-21.914-19.71-25.493-23.024A1081.107 1081.107 0 0 0 279 834.545c-3.025-2.7-8.65-7.864-12.5-11.476-3.85-3.613-11.313-10.394-16.585-15.069-5.272-4.675-14.96-13.45-21.528-19.5-20.618-18.992-23.472-21.5-24.464-21.5-1.427 0-2.438 2.891-6.993 20C188.311 819.374 163 921.773 163 924.27c0 2.289-1.596 2.357 26.5-1.138 31.65-3.937 40.247-4.438 66.5-3.873 47.118 1.015 78.455 5.825 124.5 19.111 13.043 3.764 14.5 4.046 14.5 2.807zm-55.5-23.83c-12.948-2.624-25.889-4.308-45-5.855l-28-2.265c-11.186-.904-54.873.23-67.568 1.754-19.603 2.353-21.84 2.423-22.5.703-.661-1.724 1.767-11.705 17.559-72.184 1.005-3.85 4.156-16 7.002-27 5.334-20.613 6.695-24.589 8.64-25.22.622-.203 6.022 4.28 12 9.962 12.738 12.108 40.598 37.722 50.177 46.132 3.68 3.23 11.865 10.673 18.19 16.538 6.325 5.866 15.55 14.227 20.5 18.58 4.95 4.354 10.129 9.062 11.508 10.462 1.38 1.4 8.917 8.34 16.75 15.423 7.833 7.082 14.242 13.27 14.242 13.75 0 1.205-5.187.906-13.5-.78zm-1.5-6.808c0-.804-1.012-2.423-2.25-3.598-4.092-3.885-27.931-25.412-49.25-44.473-11.55-10.326-21.9-19.762-23-20.97-1.1-1.206-8.214-7.774-15.809-14.596a6121.275 6121.275 0 0 1-24.5-22.133c-5.88-5.353-11.238-9.74-11.906-9.75-1.91-.03-2.67 2.171-8.28 23.981-2.902 11.275-8.08 31.3-11.507 44.5-11.362 43.76-11.045 42.353-9.813 43.585.849.849 4.033.858 12.477.038 6.236-.605 25.513-1.379 42.838-1.718 33.31-.653 55.344.517 85 4.514 7.425 1.001 14.063 1.879 14.75 1.95.688.072 1.25-.526 1.25-1.33zm-64-17.34c-22.146-1.27-30.76-1.327-52.43-.341-27.673 1.258-28.295 1.178-26.542-3.433.47-1.233 3.388-12.295 6.487-24.583 3.1-12.288 6.91-27.067 8.47-32.842a4949.01 4949.01 0 0 0 3.964-14.75c.778-2.929 1.66-4.24 2.84-4.22.94.015 5.761 3.886 10.711 8.6 4.95 4.714 13.725 12.865 19.5 18.114 5.775 5.248 14.55 13.234 19.5 17.747 4.95 4.512 14.4 13.038 21 18.946 6.6 5.908 13.25 12.073 14.78 13.7 2.878 3.066 2.842 4.966-.089 4.723-.93-.077-13.616-.824-28.191-1.66zM225 881.5c4.5-3.575 8.539-6.5 8.973-6.5 1 0 10.694 3.71 23.362 8.94 7.705 3.18 11.116 4.06 15.75 4.06 3.253 0 5.915-.383 5.915-.851 0-1.12-45.155-19.149-47.96-19.149-1.852 0-15.38 11.517-19.758 16.82-1.674 2.028-.701 3.18 2.685 3.18 2.001 0 5.286-1.936 11.033-6.5zm23.698 4.912c.42-1.267-11.154-6.42-14.413-6.415-2.557.003-9.561 5.747-8.703 7.136.818 1.323 22.664.642 23.116-.72zm-40.198-5.024c11.48-10.518 20.003-17.476 22.028-17.984 1.273-.32 5.813.956 11.065 3.11 7.474 3.063 22.852 9.068 38.407 14.997 4.042 1.54 6.036.45 3.908-2.137-1.719-2.09-8.646-5.273-33.717-15.499-10.62-4.331-20.422-7.875-21.781-7.875-3.712 0-24.77 18.942-26.857 24.158-2.905 7.261-.166 7.746 6.947 1.23zm8.517-22.872c5.278-4.657 9.355-7.49 10.792-7.5 1.27-.01 9.226 2.914 17.68 6.495 16.051 6.8 21.511 8.495 21.511 6.681 0-2.21-8.862-8.185-15.912-10.728-4.04-1.457-10.926-4.183-15.305-6.057-4.378-1.874-8.847-3.407-9.931-3.407-2.506 0-18.58 13.463-19.307 16.171-.3 1.118-.802 2.887-1.113 3.93-1.17 3.92 3.201 1.812 11.585-5.585zM218 843.5c5.245-5.344 6.746-5.502 15.805-1.662 10.486 4.446 13.728 4.902 11.43 1.61-2.372-3.4-18.236-11.448-22.564-11.448-2.623 0-9.63 6.44-11.156 10.254-2.855 7.136.14 7.711 6.485 1.246zm.5-14.5c.34-.55 1.73-1 3.09-1 3.515 0 4.29-2.869 1.407-5.203-3.425-2.774-6.084-1.943-7.57 2.368-.695 2.016-1 3.928-.679 4.25.922.922 3.073.683 3.752-.415zm221.106 108.523c3.094-2.028 3.052-5.046-.099-7.11-4.922-3.225-11.503 1.483-10.067 7.202.596 2.378 1.001 2.575 4.216 2.053 1.955-.317 4.633-1.283 5.95-2.145zm71.383-21.88C522.545 904.172 532 894.472 532 894.087c0-1.743-5.489-7.595-17.54-18.7-16.29-15.01-37.506-36.16-43.531-43.397-4.193-5.035-5.654-7.25-11.046-16.736-3.113-5.478-8.866-23.983-9.974-32.081-.577-4.22-1.684-8.323-2.46-9.117-1.096-1.124-5.177-1.504-18.406-1.712-17.924-.283-20.504-.849-24.545-5.378-1.1-1.232-6.048-5.846-10.998-10.255-4.95-4.409-11.475-10.322-14.5-13.142-3.025-2.819-12.203-11.188-20.396-18.597-17.465-15.796-29.008-26.335-45.42-41.472-6.56-6.05-13.001-11.9-14.314-13-1.313-1.1-4.975-4.362-8.139-7.25l-5.752-5.25h-44.43c-28.542 0-44.652.358-45.049 1-.34.55.046 1 .858 1 3.033 0 10.298 3.89 14.93 7.994 5.286 4.684 12.712 18.26 12.712 23.24 0 6.804 4.07 11.19 38 40.935 1.925 1.688 7.775 6.997 13 11.8 25.786 23.699 36.377 33.356 46 41.944 12.645 11.284 30.291 27.455 34.468 31.584 1.668 1.649 4.607 4.274 6.532 5.834 1.925 1.56 8.661 7.636 14.97 13.503 23.836 22.168 67.18 61.74 72.53 66.22 2.2 1.841 7.613 6.745 12.028 10.897 7.09 6.667 11 10.145 22.972 20.437 1.65 1.418 3.558 2.474 4.239 2.345.681-.128 10.694-9.619 22.25-21.09zm-99.269 11.58c-.224-8.953-.15-9.202 4.7-15.745 1.31-1.767-1.05-6.943-3.85-8.44-1.886-1.01-2.857-.94-5.417.383-5.907 3.054-7.507 9.656-4.663 19.234 1.522 5.125 6.75 13.345 8.487 13.345.562 0 .872-3.658.743-8.777zm-275.793 4.364c1.532-1.846-.9-7.967-3.777-9.507-2.859-1.53-6.69-1.338-8.14.407-2.26 2.725-.398 5.974 4.71 8.216 5.944 2.609 5.792 2.59 7.207.884zm7.877-9.933c-.54-6.526-4.402-14.654-7.861-16.548-2.193-1.2-2.976-1.2-5.5.006-5.284 2.525-4.267 8.109 1.716 9.423 1.92.421 3.461 1.63 4.229 3.314 4.731 10.384 8.106 12.116 7.416 3.805zm255.176-.904c-.011-.688-.437-4.13-.946-7.651-1.66-11.491 1.34-20.43 7.527-22.416 6.49-2.084 8.155-6.232 4.413-10.989-2.636-3.351-5.015-4.031-9.675-2.765-2.888.785-4.558 2.176-6.965 5.802-3.735 5.626-4.46 8.629-4.5 18.612-.03 7.555 1.284 11.903 5.412 17.907 1.943 2.827 4.77 3.722 4.734 1.5zM148.8 912.207c.56-9.55-6.3-26.711-12.086-30.24C130.835 878.383 125 880.392 125 886c0 3.436 2.557 5.731 7.539 6.767 5.73 1.19 8.593 6.024 12.462 21.048 1.475 5.729 3.418 4.907 3.8-1.608zm550.47-2.06c3.1-3.056 3.883-4.65 4.39-8.925.537-4.542.278-5.716-2.037-9.214-1.886-2.85-3.355-4.008-5.081-4.008-3.093 0-5.543 3.451-5.543 7.806 0 4.322-2.193 3.794-3.123-.751-.37-1.813-1.643-4.254-2.829-5.426l-2.155-2.129-3.446 3.735c-2.984 3.234-3.447 4.416-3.447 8.8 0 5.736 1.99 10.354 5.202 12.073 7.184 3.845 12.803 3.235 18.07-1.96zM385 909.658c0-.19-.916-3.002-2.036-6.25-3.068-8.9-2.895-11.964.872-15.404 3.855-3.521 4.013-6.19.53-8.93-4.279-3.366-8.55-2.37-11.203 2.611-2.856 5.363-.072 17.726 5.443 24.169 1.952 2.28 4.19 4.147 4.972 4.147s1.422-.155 1.422-.343zm340.69-5.525c-.797-4.184-3.244-10.12-4.78-11.596-.775-.746-3.885-2.007-6.91-2.802-3.025-.795-6.287-1.784-7.25-2.197-2.294-.984-2.191.456.56 7.857 2.174 5.851 2.245 5.918 9.662 9.172 4.11 1.802 7.866 3.034 8.346 2.737.481-.297.648-1.724.373-3.171zm-59.748-.725c2.416-.967 4.217-2.442 4.578-3.75.328-1.187 1.32-3.86 2.205-5.94 2.22-5.223.845-6.533-4.945-4.71-2.354.742-5.04 1.989-5.97 2.772-1.64 1.38-4.81 9.223-4.81 11.9 0 1.793 4.09 1.669 8.942-.272zM151.775 890.03c-.507-8.368-3.82-17.448-6.982-19.141-2.895-1.55-6.793 1.34-6.793 5.035 0 2.2.783 3.34 3.322 4.838 2.805 1.655 3.752 3.263 6.092 10.344 1.524 4.612 3.057 8.837 3.405 9.39 1.056 1.672 1.438-2.515.956-10.466zM369 886.106c0-7.379.153-7.912 3-10.448 3.361-2.995 3.733-5.167 1.443-8.435-1.15-1.644-2.561-2.223-5.41-2.223-8.229 0-11.706 10.508-6.949 21 2.295 5.063 5.774 9.206 7.061 8.41.47-.29.855-4.027.855-8.304zm173.48-.652c2.36-2.16 3.555-4.073 3.346-5.35-.18-1.094-12.926-14.013-28.326-28.708-15.4-14.696-29.828-29.067-32.062-31.936-18.685-23.996-23.218-58.892-11.38-87.6 6.496-15.754 17.649-28.172 37.998-42.312 13.084-9.09 27.68-22.89 48.814-46.148 19.602-21.572 22.225-24.695 40.228-47.9 14.81-19.087 17.251-22.517 26.696-37.5 5.948-9.435 7.16-11 8.517-11 .67 0 4.136 2.362 7.702 5.25 6.56 5.312 17.085 13.393 33.487 25.711 22.8 17.123 64.301 43.068 68.799 43.01 3.207-.04 14.201-6.212 14.201-7.971 0-.825-3.6-3.606-8-6.18-18.233-10.668-36.73-22.31-52-32.728-16.923-11.546-41.177-29.717-49.5-37.084-15.323-13.563-17.272-14.313-21.47-8.258-1.43 2.062-7.421 10.595-13.315 18.962a7374.276 7374.276 0 0 0-15.693 22.354c-2.737 3.929-7.012 9.506-9.5 12.394-2.487 2.888-7.201 8.982-10.476 13.542-17.65 24.578-61.624 69.418-78.655 80.207-1.435.909-4.66 3.371-7.165 5.472-2.505 2.1-6.396 5.31-8.648 7.132-9.174 7.425-21.498 26.434-27.532 42.469-5.22 13.87-7.321 38.304-4.62 53.718 1.863 10.628 8.596 28.018 14.085 36.379 2.572 3.916 8.01 10.775 12.083 15.242 7.73 8.476 46.033 45.992 51.63 50.569 3.853 3.152 5.755 2.845 10.756-1.736zm126.558-1.704c3.448-1.739 4.534-2.88 4.78-5.024.288-2.496-.238-3.03-5.26-5.328-5.767-2.64-6.455-4.398-1.721-4.398 3.243 0 7.163-2.52 7.163-4.604 0-.82-1.19-2.595-2.646-3.944-2.13-1.974-3.7-2.452-8.05-2.452-9.829 0-15.308 4.794-15.297 13.385.008 6.044 2.339 10.183 7.193 12.772 4.483 2.39 8.528 2.27 13.838-.407zm28.408-4.364c4.155-3.638 7.554-6.913 7.554-7.278 0-2.65-10.735-14.108-13.218-14.108-2.267 0-16.782 11.673-16.782 13.496 0 2.76 10.64 14.504 13.142 14.504.963 0 5.15-2.977 9.304-6.614zm27.76 4.007c8.464-4.376 8.825-18.355.604-23.367-4.376-2.668-10.299-2.565-15.31.267-7.09 4.007-5.329 8.343 3.919 9.652 5.542.785 5.585 2.646.077 3.4-8.256 1.132-10.31 3.62-6.951 8.416 2.929 4.181 11.245 4.95 17.661 1.632zm-568.474-2.643c-.613-4.09-6.22-19.428-7.796-21.328-1.442-1.737-4.118-1.84-5.736-.222-2.17 2.17-1.343 5.562 1.923 7.888 1.946 1.385 4.439 4.994 6.611 9.568 3.694 7.777 5.81 9.51 4.998 4.094zm199.888 0c-.333-1.788-.86-7.75-1.171-13.25-.668-11.838.177-14.136 6.213-16.875 6.72-3.05 8.065-8.052 3.415-12.702-6.092-6.092-14.217-2.664-17.367 7.327-3.331 10.569-1.138 27.063 4.806 36.134 2.519 3.844 4.872 3.48 4.104-.634zM344 873.537c0-.255-.856-2.634-1.901-5.287-1.046-2.653-2.213-7.311-2.592-10.35-.633-5.067-.464-5.797 2.026-8.757 4.791-5.694 3.08-11.143-3.5-11.143-5.905 0-7.547 2.608-7.468 11.86.076 8.81 2.579 15.616 7.682 20.89 2.708 2.798 5.753 4.273 5.753 2.787zm-184-4.853c0-19.268-11.384-35.83-21.066-30.649-1.32.707-1.934 2.097-1.934 4.378 0 3.938 1.195 5.091 6.209 5.994 2.457.443 4.39 1.627 5.731 3.51 1.68 2.36 5.853 11.97 8.393 19.333 1.125 3.258 2.667 1.774 2.667-2.566zm4.393-12.266c1.114-2.903.544-6.848-2.228-15.418-2.186-6.756-3.285-8.758-5.358-9.757-6.653-3.206-9.35 4.25-2.867 7.928 2.43 1.378 3.415 3.174 5.62 10.25 2.664 8.54 3.677 10.009 4.833 6.997zM327 848.894c0-8.253.234-9.383 2.5-12.076 3.077-3.657 3.164-6.121.311-8.779-2.819-2.627-6.99-2.605-9.391.05-2.311 2.553-3.184 14.36-1.52 20.543 1.099 4.077 5.081 9.368 7.052 9.368.654 0 1.048-3.425 1.048-9.106zM687 855c1.333-1.333 2-3.333 2-6 0-5.234 1.318-5.075 3.413.412 2.577 6.747 5.818 6.91 9.153.46 5.52-10.675-5.164-22.212-17.496-18.89-4.51 1.214-8.53 6.064-9.644 11.637-1.042 5.213 4.884 14.381 9.297 14.381.702 0 2.177-.9 3.277-2zm26.21-.87c5.74-2.576 6.518-3.278 7.593-6.866 2.357-7.867 1.034-8.79-8.124-5.67-4.432 1.51-4.761 1.88-6.265 7.053-1.39 4.78-1.406 8.353-.039 8.353.241 0 3.317-1.291 6.834-2.87zm-43.03-4.735c-.472-5.742-2.221-8.476-6.497-10.16-4.88-1.921-5.85-.922-4.58 4.726 1.188 5.291 2.38 6.904 6.397 8.65 4.202 1.83 5.047 1.248 4.68-3.216zM315.327 833.98c.233-14.31.993-16.252 7.119-18.206 2.513-.801 4.563-2.294 5.525-4.024 1.37-2.465 1.371-3.032.005-5.475-3.849-6.88-12.63-6.497-17.901.78l-2.872 3.965-1.037-2.975c-.666-1.91-1.956-3.205-3.602-3.618-9.033-2.267-12.69 6.487-8.61 20.608 1.666 5.764 6.715 12.965 9.091 12.965 1.714 0 1.96-.404 1.368-2.25-1.623-5.058-2.366-9.519-2.389-14.326-.02-4.12.44-5.511 2.443-7.393l2.467-2.317-.614 10.08c-.426 6.982-.212 11.52.695 14.76 1.353 4.83 5.52 10.768 7.17 10.218.516-.172 1.03-5.929 1.142-12.792zm-260.668 8.243c4.827-2.302 9.592-10.129 10.097-16.587.804-10.267-7.41-19.528-18.109-20.415-7.18-.596-11.76 1.056-16.027 5.778-8.376 9.272-6.97 24.819 2.765 30.57 6.231 3.68 14.4 3.931 21.274.654zm-19.458-8.26c-3.84-3.69-4.201-4.469-4.201-9.05 0-5.713 1.789-9.815 5.581-12.798 3.352-2.637 8.884-3.68 11.996-2.262 4.261 1.942 2.543 5.147-2.759 5.147-1.11 0-3.548 1.53-5.418 3.4-4.814 4.814-4.65 8.585.6 13.835 4.736 4.736 4.95 5.765 1.201 5.765-1.908 0-4.134-1.284-7-4.037zm132.782 8.787c-.066-4.726-3.245-19.516-4.75-22.104-1.424-2.447-2.617-3.213-5.367-3.447-4.553-.386-6.607 1.792-5.271 5.59.516 1.467 1.895 3.146 3.065 3.729 3.834 1.911 5.212 3.575 6.883 8.31 2.837 8.039 3.385 9.172 4.436 9.172.561 0 1.013-.563 1.004-1.25zM600 828.498c0-4.692.735-8.029 2.896-13.143 3.95-9.35 5.262-16.552 5.412-29.7.202-17.725-3.154-25.655-10.856-25.655-3.906 0-6.657 2.856-9.343 9.702-8.175 20.829-8.254 40.172-.23 56.055 2.908 5.755 5.316 8.562 8.121 9.465 3.178 1.024 4-.358 4-6.724zm-427.64-2.102c.943-6.885-.15-12-4.534-21.225-3.307-6.956-4.527-8.566-7.401-9.767-8.31-3.472-16.216 3.805-10.425 9.596 1.1 1.1 3.237 2.007 4.75 2.015 1.512.008 3.256.346 3.875.75 2.45 1.6 7.266 10.652 8.922 16.771.962 3.555 2.297 6.464 2.966 6.464.686 0 1.49-2.003 1.846-4.604zm512.975-1.028c3.249-.446 4.787-1.178 5.199-2.475.841-2.65-6.455-14.644-12.043-19.795-4.494-4.142-7.434-5.705-21.737-11.559-12.381-5.067-25.067-14.714-29.419-22.372-3.483-6.128-4.908-7.167-9.835-7.167-8.5 0-9.734 4.128-4.375 14.63 6.218 12.187 11.84 16.024 41.65 28.427 10.176 4.233 16.911 9.175 19.688 14.443 3.91 7.417 3.03 6.943 10.872 5.868zM289 814.648c0-7.915.157-8.515 3-11.49 3.488-3.65 3.786-6.137 1.033-8.628-2.583-2.338-6.579-2.258-9.877.197-2.292 1.707-2.697 2.816-2.953 8.094-.163 3.364.186 7.91.776 10.102 1.07 3.971 5.377 10.077 7.11 10.077.501 0 .911-3.758.911-8.352zm-112.733-9.187c-.434-12.75-4.325-21.043-9.267-19.75-5.762 1.506-6.194 8.662-.68 11.289 2.642 1.26 3.503 2.624 5.363 8.5 1.219 3.85 2.239 7.15 2.267 7.333.027.184.613.136 1.3-.105.867-.304 1.179-2.529 1.017-7.267zm100.357-2.711c-.545-12.029.677-16.113 5.876-19.63 7.29-4.935 8.07-10.735 1.977-14.727-3.829-2.509-8.94-.94-12.88 3.953l-3.097 3.847.036 12.653c.033 11.293.29 13.138 2.385 17.154 2.26 4.331 3.709 5.952 5.35 5.985.425.008.583-4.148.353-9.235zm481.19-1.022c.418-2.17-10.551-23.311-18.02-34.728-3.058-4.675-7.862-11.18-10.677-14.457-2.814-3.276-5.117-6.345-5.117-6.82 0-.474 5.625-6.346 12.5-13.049 6.875-6.702 12.5-12.706 12.5-13.34 0-3.07-19.261-22.878-26.563-27.316-3.357-2.04-3.064-3.722 1.656-9.518 8.073-9.912 19.591-28.267 26.184-41.725 6.843-13.97 7.952-17.775 5.18-17.775-2.483 0-31.457 15.124-32.36 16.891-.453.885-1.112 3.503-1.465 5.817-1.202 7.874-7.643 25.76-13.305 36.946l-5.647 11.154 3.363 4.346c1.85 2.39 5.437 6.821 7.973 9.846 6.113 7.292 8.984 11.507 8.984 13.189 0 1.782-8.885 10.371-16.25 15.708-3.163 2.291-5.75 4.67-5.75 5.285 0 .615 2.191 4.538 4.87 8.718 5.876 9.172 13.042 23.32 16.14 31.867l2.27 6.267 15.11 7.428c8.31 4.085 15.78 7.335 16.599 7.222.818-.114 1.64-.994 1.825-1.956zm-491.278-.478c-1.562-4.028-3.536-12.897-3.536-15.883 0-1.969.968-4.365 2.5-6.185 3.119-3.706 3.23-7.557.277-9.625-4.674-3.274-10.117-.887-11.206 4.915-1.724 9.19 5.862 28.528 11.191 28.528.975 0 1.229-.575.774-1.75zM52 795.38c3.542-1.898 5.27-3.447 7.683-6.89 3.665-5.226 4.374-10.004 3.27-22.024-.554-6.031-1.428-19.291-1.942-29.466-1.59-31.483-5.6-72.799-7.258-74.797-1.678-2.023-6.768-4.411-8.215-3.856-1.37.526-2.608 11.052-4.544 38.653-.598 8.525-1.516 20.225-2.04 26-1.427 15.74-1.822 21.982-2.48 39.216-.656 17.16.087 20.72 5.153 24.705 4.545 3.576 2.278 6.077-3.166 3.494-2.235-1.061-4.38-3.22-5.76-5.803-1.976-3.692-2.19-5.49-2.09-17.612.062-7.425.86-21.15 1.774-30.5 1.772-18.13 3.973-41.051 5.665-59 .57-6.05 1.242-12.8 1.492-15 .413-3.638-.757-7.625-1.9-6.471-.664.67-3.28 20.71-5.15 39.471-.879 8.8-2.66 25.675-3.961 37.5-4.933 44.86-4.945 45.063-3.197 51.075 1.687 5.806 6.387 11.614 10.049 12.42 6.896 1.516 12.393 1.148 16.617-1.115zm128.992-4.63c-.186-9.755-.187-9.75 1.391-9.75 3.09 0 3.492-10.144.72-18.2-4.7-13.659-12.64-19.745-20.419-15.65-2.856 1.503-3.65 2.79-3.669 5.945-.023 3.986 3.167 6.29 7.71 5.569 2.076-.33 4.265-.277 4.865.118 2.621 1.727 7.317 9.664 8.408 14.208 1.621 6.76.762 8.377-1.798 3.383-2.973-5.801-8.153-7.292-11.704-3.369-1.512 1.672-1.62 2.427-.652 4.553.639 1.402 2.524 3.024 4.19 3.604 3.417 1.192 5.108 3.981 7.023 11.589.793 3.15 1.872 5.25 2.697 5.25 1.055 0 1.344-1.695 1.238-7.25zm70.618-10.66c-.1-8.98.101-10.134 2.14-12.314 3.921-4.191 2.719-7.867-3.046-9.314-3.498-.878-6.424 1.526-7.256 5.962-1.028 5.479 4.753 25.576 7.356 25.576.504 0 .867-4.46.806-9.91zm420.194 5.758c.657-7.869-4.907-15.524-13.581-18.686-3.216-1.173-6.91-3.264-8.209-4.647-1.424-1.515-3.466-2.515-5.14-2.515-5.094 0-13.001 2.167-13.6 3.728-.882 2.3 2.644 8.073 7.193 11.778 8.635 7.032 25.08 14.686 30.533 14.211 2.106-.183 2.548-.792 2.804-3.869zM241 779.062c0-.516-.712-4.003-1.582-7.75-1.575-6.783-1.319-14.812.637-19.956.475-1.25 2.675-3.198 4.889-4.327 5.593-2.854 6.76-9.181 2.483-13.46-3.328-3.327-11.217-.81-13.936 4.448-1.837 3.553-2.192 3.613-5.12.861-2.972-2.791-8.647-1.913-11.017 1.705-3.208 4.895.06 18.757 5.933 25.167 1.656 1.807 4.755 3.125 4.701 2-.007-.137-.676-2.725-1.488-5.75-1.797-6.697-1.853-9.75-.235-12.921 2.446-4.794 3.413-3.397 4.071 5.88.655 9.228 3.859 19.389 7.318 23.211 1.791 1.98 3.346 2.394 3.346.892zm461-3.424c0-2.567-6.186-15.004-10.978-22.07-5.395-7.957-9.397-12.072-10.86-11.168-1.182.73-10.162 17.152-10.162 18.584 0 1.045 28.56 15.871 30.75 15.963.688.03 1.25-.56 1.25-1.309zm-255.571-9.21c1.895-1.895 2.037-4.796.305-6.233-.775-.644-6.7-.982-15.305-.873-11.093.14-14.48-.137-16.142-1.322-1.156-.825-10.091-8.925-19.857-18-9.765-9.075-23.194-21.41-29.842-27.41-15.3-13.81-32.97-30.183-46.796-43.362-5.927-5.65-11.934-10.712-13.35-11.25-3.622-1.377-7.736-1.215-9.933.392-1.743 1.274-1.114 2.098 9.059 11.862 6.013 5.77 14.524 13.591 18.915 17.38 4.39 3.788 11.14 9.848 15 13.465 3.86 3.617 11.292 10.388 16.517 15.048 5.225 4.659 11.075 9.898 13 11.642 1.925 1.744 7.775 6.882 13 11.418s13.325 11.805 18 16.153c12.328 11.465 11.452 11.077 26.451 11.73 7.177.313 14.48.65 16.228.75 1.774.102 3.873-.512 4.75-1.39zm219.469-9.05c5.504-6.253 13.661-23.17 15.624-32.403 3.798-17.868 3.59-36.403-.563-50.394-2.844-9.58-6.173-13.728-11.13-13.869-7.038-.2-8.463 3.846-4.802 13.632 8.889 23.756 5.492 52.387-8.72 73.507-4.915 7.305-3.88 14.149 2.143 14.149 2.766 0 4.12-.84 7.448-4.621zm-463.142-8.354c6.926-3.143 10.793-6.7 14.167-13.03 4.426-8.306 6.077-15.527 6.077-26.587 0-11.988-2.156-20.792-7.415-30.274-4.636-8.362-9.046-12.004-17.61-14.548-6.775-2.012-13.523-.892-20.219 3.355-5.706 3.619-9.247 8.267-11.677 15.33-6.053 17.595-4.695 39.471 3.298 53.11 7.157 12.213 21.969 17.824 33.38 12.644zM185.5 739.06c-5.222-3.366-7.237-5.447-9.32-9.619-6.116-12.253-6.936-31.74-1.807-42.943 3.258-7.118 4.944-9.106 9.837-11.603 5.59-2.853 9.897-2.453 14.962 1.39 9.951 7.549 13.306 17.047 12.662 35.848-.331 9.674-.782 12.214-3.025 17.049-4.865 10.489-15.421 14.962-23.309 9.878zm14.045-9.514c3.162-3.161 3.11-6.571-.193-12.64-4.803-8.824-10.083-7.053-11.04 3.705-.447 5.022-.204 6.295 1.654 8.64 2.734 3.45 6.315 3.56 9.58.295zm-12.768-16.102c4.13-2.892 2.18-9.443-2.812-9.443-2.891 0-6.965 2.951-6.965 5.045 0 1.5 4.663 5.955 6.232 5.955.728 0 2.323-.7 3.545-1.557zm20.706-4.068c.986-.987 1.506-2.854 1.321-4.75-.293-3.014-.488-3.136-5.492-3.425-4.326-.25-5.364.028-6.246 1.677-1.058 1.977-.61 4.518 1.212 6.873 1.381 1.786 7.284 1.545 9.205-.375zm-11.526-12.284c3.76-8.025 1.324-15.091-5.2-15.091-6.872 0-8.522 5.668-4.293 14.75 1.943 4.174 2.93 5.25 4.82 5.25 1.864 0 2.868-1.054 4.673-4.91zM451.054 742.5c1.028-5.391.77-5.5-13.02-5.5H425.28l-4.015-3.25c-2.209-1.788-12.314-10.9-22.456-20.25a11271.23 11271.23 0 0 0-39.842-36.5l-21.402-19.5h-6.533c-5.277 0-6.533.303-6.533 1.574 0 1.424 10.12 10.954 53 49.917 31.012 28.178 34.856 31.617 38.319 34.283l3.603 2.775 15.53-.275 15.53-.274.572-3zm3.592-13.194c2.315-5.541.653-6.306-13.702-6.306-13.424 0-12.252.55-25.462-11.927-4.41-4.165-15.418-14.323-24.462-22.573-9.045-8.25-20.363-18.712-25.15-23.25-8.166-7.739-8.974-8.25-13.038-8.235-2.383.008-5.007.46-5.832 1.002-1.776 1.168.754 3.708 29.38 29.483 10.385 9.35 25.685 23.168 34 30.706 8.862 8.033 16.155 13.869 17.62 14.1 1.375.217 7.585.462 13.801.544l11.301.15 1.544-3.694zm240.344-3.8c7.111-4.558 7.917-5.908 5.864-9.822-2.004-3.817-8.989-11.684-10.375-11.684-.88 0-1.567 1.962-2.016 5.75-.374 3.163-1.3 8.45-2.057 11.75-.757 3.3-1.383 6.563-1.391 7.25-.027 2.256 2.858 1.318 9.975-3.243zM465.476 707.81c1.087-2.03 1.648-4.018 1.247-4.42-.402-.401-6.805-.824-14.23-.94-9.556-.148-14.053-.61-15.396-1.58-2.831-2.045-23.284-20.312-36.14-32.278-9.857-9.173-11.868-10.605-15.706-11.18-7.288-1.094-7.44.653-.677 7.815 3.26 3.45 11.376 11.224 18.037 17.274 6.661 6.05 16.678 15.175 22.26 20.277l10.149 9.278 14.24-.278 14.24-.277 1.976-3.69zm7.18-12.32c1.29-.844 2.344-1.96 2.344-2.479 0-1.362 6.912-8.165 10.678-10.51 1.766-1.1 5.923-4.025 9.237-6.5 3.314-2.475 8.339-6.075 11.167-8 4.629-3.152 13.783-10.43 24.2-19.238 7.977-6.747 21.544-6.21-170.729-6.762-165.17-.475-174.032-.411-176.165 1.266-3.606 2.837-6.842 8.68-5.532 9.99.802.802 29.991 1.05 105.178.891 57.237-.12 105.63.074 107.539.433 2.682.503 6.248 3.38 15.699 12.666 6.725 6.609 13.915 13.088 15.978 14.397 2.062 1.31 3.75 2.742 3.75 3.181 0 .44 2.953 3.246 6.562 6.238 6.213 5.148 6.919 5.465 13.25 5.938 11.702.875 24.285.167 26.845-1.51zm218.538-10.739c1.56-2.465 10.562-22.634 13.234-29.649.944-2.48 1.297-4.776.808-5.265-.988-.988-22.085 9.476-23.947 11.878-.734.946-.883 2.198-.378 3.174 1.01 1.953 4.39 12.02 5.999 17.862 1.324 4.808 2.237 5.234 4.284 2zM23.099 605.317c11.382-5.905 15.03-8.278 15.762-10.25 8.11-21.878 14.121-35.456 20.432-46.154L62 544.326l-5.098-6.413c-2.805-3.527-6.549-7.988-8.321-9.913-3.947-4.286-6.58-8.443-6.58-10.388 0-2.493 4.824-7.35 13.076-13.166 4.358-3.07 7.924-5.964 7.924-6.428 0-.464-3.015-7.071-6.7-14.681-3.684-7.61-8.31-18.112-10.279-23.337l-3.58-9.5-7.47-3.84c-13.329-6.85-26.935-12.8-27.903-12.202-3.375 2.086 14.64 36.47 26.047 49.713 2.687 3.12 4.885 5.887 4.885 6.15 0 .263-2.963 3.336-6.585 6.829C22.66 505.593 14 516.268 14 518.616c0 1.95 13.725 15.981 22.25 22.748 2.668 2.117 4.75 4.6 4.75 5.664 0 1.042-2.053 4.415-4.563 7.496-6.34 7.783-15.72 23.374-24.234 40.276C4.822 609.455 3.74 613 6.644 613c.905 0 8.31-3.458 16.455-7.683zm552.596-9.608c1.207-.671 3.855-3.16 5.884-5.53 2.687-3.14 3.39-4.61 2.587-5.413-.79-.79-31.293-1.06-108.007-.951l-106.905.15-2.679-2.483c-1.473-1.365-3.008-2.482-3.411-2.482-.404 0-2.968-2.267-5.699-5.038-2.73-2.77-6.222-5.717-7.758-6.548-1.537-.83-3.257-2.501-3.824-3.712-.567-1.211-2.685-3.463-4.707-5.004-2.022-1.542-6.714-5.736-10.426-9.32-3.713-3.585-8.193-6.931-9.956-7.437-1.763-.506-9.866-.875-18.006-.82l-14.8.1-4.324 4.808c-2.378 2.645-6.538 6.278-9.244 8.073-2.706 1.795-6.945 4.915-9.42 6.934-2.475 2.02-5.625 4.248-7 4.953-2.815 1.443-6.337 4.533-12.254 10.75-2.219 2.332-5.92 5.345-8.225 6.696-4.162 2.44-11.521 10.413-11.521 12.483 0 1.657 346.713 1.449 349.695-.21zM70.75 580.822c5.649-3.028 9.25-5.571 9.25-6.532 0-.866-.854-4.548-1.898-8.182-1.043-3.634-2.177-7.845-2.519-9.358-1-4.425-3.215-3.22-7.579 4.126C63.65 568.206 57 583.175 57 585.646c0 2.066 2.591 1.157 13.75-4.824zm654.67 1.428c.585-1.848 3.925-36.796 5.615-58.75.55-7.15 1.428-16.6 1.952-21 1.36-11.44 2.513-29.592 2.513-39.58 0-7.905-.226-8.876-2.866-12.335-3.807-4.989-7.915-7.351-14.13-8.128-8.434-1.054-17.14 3.882-19.51 11.06-1.044 3.165-.267 21.051 1.955 44.983.51 5.5 1.423 17.425 2.029 26.5 1.37 20.542 2.896 39.154 3.675 44.818.498 3.618 1.229 4.737 4.511 6.91 2.794 1.848 4.225 2.283 4.992 1.516 1.3-1.3 2.506-12.889 3.302-31.744.325-7.7 1.013-19.4 1.529-26 .515-6.6 1.191-18.75 1.502-27 .311-8.25.823-17.152 1.137-19.782.99-8.3-.523-18.442-3.233-21.662-2.752-3.27-3.118-6.056-.797-6.056 2.897 0 7.15 3.909 8.836 8.12 2.155 5.387 1.786 12.367-4.938 93.38-.821 9.9-1.778 21.458-2.126 25.685-.348 4.226-.362 8.389-.031 9.25.808 2.106 3.394 1.989 4.083-.185zM384.6 578.836c.42-.678-.495-2.17-2.19-3.577-1.601-1.327-5.836-5.202-9.411-8.61-3.575-3.41-11-10.221-16.5-15.139-5.5-4.917-13.406-12.19-17.569-16.16-4.163-3.972-8.663-7.447-10-7.722-4.447-.917-23.096-1.567-27.525-.96-3.564.488-4.72 1.198-6.29 3.86-2.9 4.915-1.582 5.472 12.934 5.472 14.804 0 13.652-.567 30.45 14.99 13.953 12.922 29.28 26.277 31.844 27.745 2.754 1.578 13.298 1.653 14.257.101zM418 578.17c0-1.743-14.863-15.979-45.072-43.17a3488.902 3488.902 0 0 1-22.86-20.775l-10.083-9.276-15.706.276-15.705.275-1.522 2.715c-2.337 4.166-.68 4.879 12.396 5.327l11.708.402 8.75 7.778C344.72 526 353.607 534 359.656 539.5c48.473 44.075 43.884 40.5 51.983 40.5 5.498 0 6.362-.249 6.362-1.83zm19.71.215c.334-1.017-28.067-27.58-51.64-48.296-5.263-4.627-10.02-8.96-10.57-9.63-.55-.67-8.337-7.798-17.304-15.84L341.89 490h-29.814l-1.083 4.023c-.596 2.213-.812 4.463-.48 5 .348.563 6.72.977 15.035.977h14.431l20.76 18.663c11.418 10.265 24.585 22.366 29.26 26.892 4.675 4.525 15.025 14.14 23 21.365l14.5 13.137 4.921-.278c2.707-.154 5.087-.78 5.289-1.394zm28.203.22c.935-1.126-1.01-3.39-10.097-11.75-6.19-5.695-15.093-13.986-19.785-18.423-4.692-4.438-13.706-12.72-20.031-18.406-11.379-10.228-28.094-25.644-51.666-47.653-6.69-6.247-13.357-11.812-14.815-12.366-1.457-.554-9.54-1.007-17.962-1.007-16.125 0-18.175.554-17.377 4.694.468 2.432 4.02 3.04 18.82 3.225l12.5.156 28 25.463c27.782 25.264 51.625 46.818 67 60.567 4.4 3.934 9.8 8.783 12 10.774 6.903 6.25 10.962 7.68 13.413 4.726zm-369.08-3.92c1.707-1.368 1.09-7.792-1.648-17.185-3.695-12.672-4.426-21.88-2.751-34.654 2.083-15.89 6.553-29.53 13.053-39.826 4.153-6.578 2.7-10.02-4.23-10.02-4.445 0-8.164 4.095-14.074 15.5-7.594 14.654-10.172 25.97-10.249 44.987-.055 13.765 2.169 26.762 6.212 36.304 2.666 6.293 9.083 8.588 13.688 4.895zm485.732-4.575c18.067-8.206 24.76-34.738 14.762-58.515-7.183-17.083-16.916-24.394-31.122-23.378-8.39.6-13.534 3.679-18.595 11.13-4.127 6.073-6.02 10.911-7.545 19.276-2.106 11.558 1.636 29.65 8.303 40.142 3.114 4.901 4.966 6.472 11.984 10.16 7.076 3.718 15.63 4.175 22.213 1.185zm-17.129-8.523c-3.688-1.606-9.677-8.388-12.431-14.077-4.578-9.457-5.175-27.488-1.211-36.598 4.372-10.05 13.928-15.333 22.355-12.36 8.816 3.111 14.803 11.798 17.368 25.198 2.735 14.294 1.144 25.326-4.73 32.793-4.391 5.583-14.584 7.991-21.35 5.044zm13.095-7.934c2.584-3.69 1.376-10.978-2.819-16.997-1.631-2.34-2.562-2.776-5.264-2.46-2.92.34-3.344.074-3.842-2.418-1.033-5.164-8.895-5.905-11.427-1.076-2.206 4.208 3.552 9.582 7.82 7.298 2.94-1.573 3.11-1.3 2.421 3.89-.898 6.775.938 11.937 4.83 13.573 3.692 1.552 6.33.976 8.28-1.81zm6.155-20.827c1.272-1.196 2.314-2.771 2.314-3.5 0-2.288-3.88-5.326-6.8-5.326-3.633 0-5.2 1.657-5.2 5.5 0 1.705.54 3.64 1.2 4.3 1.878 1.878 5.946 1.411 8.486-.974zm-12.94-7.076c1.639-2.065 3.476-11.468 2.725-13.942-1.818-5.986-8.399-8.836-11.682-5.058-2.742 3.156-2.992 7.002-.78 12.003 3.366 7.61 7.115 10.303 9.738 6.997zm-498.865-4.142c.643-5.44.932-10.129.642-10.418C72.117 509.783 61 518.243 61 520.72c0 1.484 6.235 9.953 8.458 11.488 1.721 1.19 2.21-.323 3.423-10.6zm454.723-19.292c1.856-2.025 3.656-5.187 4.001-7.025.987-5.259-.626-20.264-2.804-26.09-2.13-5.697-6.168-11.162-7.365-9.968-.404.403-.218 3.864.415 7.692.632 3.828 1.149 10.174 1.149 14.103 0 6.943-.1 7.231-3.59 10.307-4.58 4.038-5.614 6.005-4.819 9.173.667 2.654 4.557 5.383 7.774 5.452 1.026.022 3.384-1.618 5.24-3.644zm15.941-3.77c2.788-2.788 3.308-8.966 1.316-15.615-1.533-5.116-9.246-13.852-10.857-12.296-.897.867-.78 1.898.495 4.363.918 1.775 1.915 5.615 2.216 8.534.445 4.311.146 5.957-1.595 8.774-2.389 3.865-1.97 6.405 1.27 7.714 3.386 1.369 4.553 1.128 7.155-1.475zm57.14-7.72c5.159-4.846 1.25-12.826-6.28-12.826-4.097 0-6.678-2.568-8.319-8.277-.667-2.323-1.461-5.077-1.764-6.12-.372-1.283.632-.715 3.097 1.75 4.302 4.301 8.597 4.89 10.969 1.504 2.139-3.054.068-7.883-3.933-9.173-4.443-1.432-5.22-2.363-6.956-8.335-2.094-7.204-3.999-6.61-3.999 1.248 0 4.553-.322 5.834-1.408 5.6-2.25-.483-3.061 1.846-3.065 8.803-.008 15.697 6.906 28 15.735 28 2.33 0 4.43-.771 5.924-2.174zM82.079 490c.435-.825 2.396-4.209 4.357-7.52 1.96-3.31 3.565-6.747 3.565-7.636 0-.889-1.688-2.41-3.75-3.379-2.063-.97-7.783-3.715-12.713-6.1-5.957-2.884-9.297-4.005-9.96-3.342-1.116 1.116 2.705 9.52 10.131 22.276 4.497 7.727 6.559 9.13 8.37 5.701zm85.49-12.41c2.645-1.853 6.966-10.574 8.963-18.09 3.517-13.235 2.9-28.052-1.757-42.239-1.64-4.993-3.421-7.976-6.952-11.64-4.023-4.174-4.984-4.732-6.285-3.651-.931.772-1.537 2.912-1.537 5.428 0 2.283-1.396 9.766-3.101 16.627-3.323 13.365-4.358 25.689-3.297 39.233.827 10.56 3.9 14.96 10.925 15.642.566.055 1.934-.535 3.042-1.31zm349.207-.966c1.996-1.95 2.661-10.975 1.204-16.35-1.613-5.955-4.702-12.274-6-12.274-2.254 0-2.463.896-2.133 9.146.33 8.224-.133 10.447-3.55 17.068-.203.392.586 1.668 1.754 2.836 2.26 2.26 6.17 2.068 8.725-.426zm-392.957-1.163c4.13-1.226 5.182-1.97 5.182-3.659 0-2.62-6.81-11.793-11.294-15.213-3.713-2.831-27.234-10.984-29.35-10.172-5.241 2.011 5.64 18.349 13.471 20.224 4.568 1.093 8.545 3.425 11.872 6.96 3.7 3.93 3.359 3.868 10.12 1.86zm26.645-3.066c1.801-1.802 1.525-3.333-1.961-10.895-4.62-10.018-17.855-20.405-33.502-26.292-3.025-1.139-8.2-3.098-11.5-4.354-7.009-2.667-13.421-8.187-18.261-15.719l-3.448-5.365-5.088.675c-2.798.371-5.483.92-5.966 1.218-1.367.844.247 8.326 2.954 13.692 4.786 9.487 13.772 15.656 29.809 20.463 7.362 2.207 17.172 7.575 21.668 11.857 1.467 1.398 3.923 5.186 5.459 8.42 3.14 6.613 4.958 7.703 13.052 7.826 3.505.053 5.697-.44 6.784-1.526zm413.752-4.902c2.757-10.498 13.655-55.697 14.224-58.993.38-2.2 4.08-17.5 8.224-34C595.115 340.846 601 315.56 601 312.895c0-.977-.432-2.044-.96-2.37-.527-.326-6.265.293-12.75 1.375-32.367 5.402-86.21 7.344-118.79 4.284-29.25-2.747-62.051-9.232-90.257-17.845-8.39-2.562-15.584-4.331-15.984-3.931-.94.94 7.906 9.317 30.189 28.592 9.855 8.525 20.423 17.818 23.485 20.651 3.062 2.834 7.875 7.109 10.697 9.5 8.18 6.935 26.619 23.16 28.84 25.376 1.116 1.115 5.18 4.7 9.03 7.969 3.85 3.268 9.497 8.206 12.55 10.973 3.052 2.767 12.709 11.331 21.46 19.031 8.75 7.7 18.874 16.7 22.498 20 3.624 3.3 11.264 10.05 16.978 15 5.714 4.95 13.031 11.39 16.26 14.312 3.235 2.926 6.615 5.169 7.527 4.993.911-.175 2.01-1.666 2.442-3.312zM541.22 437.25A3398.159 3398.159 0 0 0 520.497 419c-5.99-5.225-13.848-12.2-17.465-15.5-6.97-6.36-22.223-19.77-37.534-33-5.093-4.4-14.521-12.725-20.952-18.5-6.431-5.775-14.247-12.69-17.37-15.366C411.479 323.176 408.144 319 413.094 319c1.151 0 6.439.877 11.75 1.948 5.311 1.072 19.107 3.19 30.657 4.705 19.762 2.594 23.241 2.756 59 2.747 29.847-.007 40.987-.378 51.924-1.73 9.247-1.143 14.26-1.387 14.92-.725.99.99-.207 7.708-4.464 25.055-1.794 7.306-14.66 62.263-19.363 82.71-1.291 5.614-2.638 10.677-2.992 11.25-1.347 2.179-3.773.774-13.306-7.71zm12.676-5c1.089-3.712 2.705-10.35 3.593-14.75.887-4.4 2.662-12.05 3.944-17 2.454-9.477 5.181-20.941 11.06-46.5 1.96-8.525 3.945-16.915 4.41-18.645 1.556-5.783 1.218-5.849-19.918-3.88-15.84 1.476-25.186 1.694-53.344 1.244-33.108-.529-50.88-1.972-70.79-5.747-11.813-2.24-12.623-.648-3.6 7.084 3.438 2.945 8.275 7.233 10.75 9.529 4.76 4.415 13.698 12.262 33.44 29.36 6.633 5.744 17.874 15.644 24.98 22C536.07 428.621 548.215 439 549.978 439c1.528 0 2.353-1.422 3.916-6.75zm-20.948-19.298c-6.296-5.547-14.874-13.18-19.064-16.962-4.189-3.783-12.289-10.93-18-15.884-19.671-17.06-37.383-33.72-37.383-35.161 0-1.058 1.07-1.382 4-1.21 19.606 1.157 76.645 1.337 86.804.274 6.492-.679 12.102-.936 12.466-.572.876.875-1.748 16.005-6.803 39.23a323416.49 323416.49 0 0 1-6.374 29.28c-1.252 5.746-2.708 10.591-3.238 10.768-.529.176-6.113-4.217-12.408-9.763zm12-1.702c.573-2.063 1.044-4.088 1.047-4.5.01-1.347-3.718-.787-4.994.75-.685.825-1.865 1.5-2.622 1.5-1.866 0-1.737 1.946.277 4.171 2.733 3.02 5.123 2.29 6.292-1.921zm-1.85-10.82c3.703-2.72 5.125-4.54 5.956-7.628 1.724-6.402.021-6.746-6.93-1.397-3.32 2.555-6.307 5.084-6.638 5.62-.895 1.448-4.924 1.183-9.43-.62-5.554-2.222-7.215-1.384-3.704 1.87 2.987 2.768 9.56 5.514 13.515 5.646 1.301.043 4.555-1.528 7.23-3.492zm-.282-13.957c7.052-5.19 9.094-7.27 9.982-10.165 1.142-3.72.866-5.308-.925-5.308-.556 0-5.536 3.375-11.067 7.5-5.531 4.125-10.64 7.5-11.354 7.5-.714 0-6.458-2.251-12.764-5.003C503.22 375.121 499 374.005 499 376.32c0 2.924 7.46 7.82 17.912 11.753 5.726 2.155 10.639 4.146 10.917 4.423.277.278 1.768.505 3.312.505 1.885 0 5.723-2.145 11.674-6.527zm-.195-14.526c6.534-4.979 12.442-9.79 13.13-10.69 1.352-1.773 1.741-9.257.481-9.257-.98 0-7.432 4.551-19.654 13.862l-9.663 7.363-16.207-6.7c-23.985-9.916-37.655-14.913-38.477-14.065-.402.414 1.645 2.89 4.547 5.5 4.323 3.89 8.303 5.978 22 11.55 22.335 9.085 28.414 11.376 30.343 11.438.891.028 6.966-4.022 13.5-9zm-7.444-10.197c4.432-3.438 8.905-6.867 9.94-7.622 3.009-2.191 2.33-4.128-1.445-4.128-3.388 0-10.622 4.078-14.152 7.979-2.555 2.823-4.679 2.534-15.519-2.113-8.082-3.464-10.844-4.148-18.5-4.575-7.549-.422-8.79-.285-7.703.85 1.332 1.39 35.657 15.64 38.012 15.78.72.044 4.935-2.733 9.367-6.171zm-7.376-7.95c2.114-2.114 1.307-2.8-3.3-2.8-3.23 0-4.5.402-4.5 1.427 0 2.314 5.832 3.34 7.8 1.373zm-40.584 112.876c5.116-4.742 6.07-7.292 6.564-17.552.348-7.233.045-11.214-1.173-15.404-1.625-5.59-5.821-11.834-7.097-10.561-.363.362-.23 5.038.295 10.39.592 6.031.602 11.013.027 13.099-.987 3.572-4.339 7.352-6.52 7.352-2.51 0-5.312 3.918-5.312 7.427 0 6.65 8.194 9.903 13.216 5.249zm16.86-1.6c2.642-2.64 2.924-3.56 2.924-9.532 0-5.13-.585-7.778-2.614-11.827-2.92-5.826-5.293-8.892-6.37-8.227-.393.243-.5 4.911-.237 10.373.39 8.107.18 10.358-1.15 12.257-2.265 3.233-2.033 6.484.594 8.323 3.002 2.103 3.48 2.008 6.854-1.366zm95.974-14.17c1.63-3.044.347-6.65-2.978-8.369-2.075-1.073-3.364-2.9-4.537-6.43-2.353-7.085-5.535-7.94-5.535-1.49 0 5.993 2.184 13.658 4.572 16.046 2.937 2.937 6.975 3.053 8.478.244zm-122.01-7.946c5.11-5.11 5.38-13.852.71-23.055-1.788-3.523-3.958-6.535-4.823-6.694-1.358-.25-1.511.878-1.124 8.264.42 7.978.273 8.808-2.177 12.343-3.301 4.764-3.3 6.507.01 9.11 3.304 2.6 4.83 2.606 7.404.032zm133.389-.531c2.11-2.111 2.007-7.732-.179-9.674-.963-.856-3.378-2.228-5.368-3.05-4.233-1.746-7.852-6.299-10.3-12.955-1.821-4.95-2.947-5.848-3.975-3.168-2.032 5.295 2.69 22.87 7.415 27.594 3.277 3.277 9.73 3.929 12.407 1.253zM451.663 431.49l4.32-4.508 2.008 2.008c2.74 2.74 6.18 2.522 9.085-.577 4.983-5.315 1.976-20.387-5.45-27.314-2.216-2.066-2.66-2.176-3.191-.791-.34.885-.054 3.315.635 5.4 1.643 4.973 1.755 14.866.186 16.435-1.877 1.877-2.58.406-3.379-7.074-.918-8.591-4.301-20.138-6.806-23.227-2.677-3.303-3.295-1.987-1.97 4.194 1.282 5.977.745 16.142-1.058 20.022-.654 1.407-3.05 3.432-5.324 4.5-6.792 3.189-7.183 10.878-.719 14.147 4.501 2.277 7.083 1.565 11.663-3.215zm274.99-2.029c5.892-3.452 8.787-9.675 8.088-17.386-.672-7.411-2.812-11.433-7.86-14.773-6.13-4.057-14.325-4.405-20.365-.865-8.795 5.154-12.524 15.017-9.082 24.027 1.817 4.76 7.19 10.205 10.834 10.982 1.228.261 3.132.685 4.232.94 3.638.848 9.94-.455 14.154-2.925zM711.1 426.62c-1.125-1.355-1.044-1.683.538-2.18 7.588-2.383 10.114-4.904 11.751-11.727.777-3.238-1.705-9.268-4.544-11.042-1.014-.633-1.844-1.767-1.844-2.519 0-1.715 4.216-.801 7.616 1.65 2.745 1.98 6.384 8.846 6.384 12.047 0 3.488-2.476 8.391-5.83 11.544-3.791 3.565-11.897 4.847-14.071 2.227zm-101.67-8.19c.864-.865 1.571-2.215 1.571-3 0-1.878-3.594-5.429-5.494-5.429-1.54 0-7.494-7.442-7.521-9.4-.008-.605-.459-1.775-1-2.6-.876-1.333-1.094-1.333-1.97 0-2.31 3.519.39 14.8 4.64 19.383 2.779 2.997 7.335 3.485 9.774 1.046zm-168.022-9.745c3.57-3.57 4.277-11.875 1.592-18.686-1.156-2.934-3.01-6.609-4.119-8.166-2.234-3.137-5.532-3.975-4.44-1.128.36.938.9 5.1 1.201 9.25.508 7.005.362 7.793-2.047 10.99-3.023 4.014-3.133 4.842-1.037 7.833 2.027 2.894 5.904 2.853 8.85-.093zm170.723-1.588 2.352-1.905-3.88-3.66c-2.396-2.26-4.88-6.125-6.491-10.104-1.436-3.545-3.061-6.329-3.611-6.186-.55.142-.969 2.987-.93 6.32.102 8.918 4.461 16.83 9.57 17.371.35.038 1.697-.789 2.99-1.836zm-533.848-1.467c6.884-2.934 10.934-11.413 8.694-18.203-1.555-4.71-3.53-6.426-7.392-6.426-3.876 0-6.285 2.32-6.75 6.5-.507 4.556-3.11 3.817-4.094-1.162-.99-5.006-2.845-6.78-6.209-5.935-5.72 1.435-7.786 13.665-3.396 20.11 3.772 5.538 12.613 7.9 19.147 5.116zm544.495-5.186c1.649-1.154 2.223-2.56 2.223-5.443 0-4.6-2.644-7-7.708-7-2.67 0-3.708-.682-5.706-3.75-1.344-2.063-3.2-6.45-4.125-9.75-1.944-6.934-2.956-8.405-4.631-6.73-1.794 1.794 1.318 18.968 4.682 25.844 3.713 7.589 10.1 10.447 15.265 6.83zm-212.435-2.438c5.08-4.46 5.941-7.475 5.505-19.258-.347-9.37-.692-10.905-3.864-17.19-1.916-3.795-3.974-7.062-4.574-7.259-.753-.248-1.065 3.799-1.01 13.102.077 12.908-.02 13.567-2.334 16.03-1.327 1.414-2.978 2.57-3.667 2.57-1.827 0-5.403 4.921-5.366 7.385.06 3.984 4.353 7.53 9.183 7.585 1.622.018 4.089-1.176 6.127-2.965zm-365.9.463c1.067-.807 2.685-1.468 3.594-1.468 2.888 0 5.143-3.43 4.359-6.632-.888-3.622-1.977-4.334-6.666-4.353-2.999-.012-3.947.446-4.628 2.235-1.436 3.777-2.843 10.675-2.29 11.228.96.96 3.669.474 5.63-1.01zm59.192.044c.793-2.068-1.514-11.167-3.183-12.552-.755-.627-3.19-1.384-5.412-1.682-3.943-.529-4.039-.47-4.039 2.465 0 6.629 1.153 9.286 4.884 11.258 4.396 2.323 6.989 2.494 7.75.51zm326.521-2.897c1.566-2.486 1.846-4.19 1.386-8.436-1.014-9.377-7.488-22.179-11.215-22.179-1.718 0-1.674 1.762.174 7 2.158 6.117 1.93 13.567-.537 17.56-1.408 2.277-1.831 4.116-1.372 5.948 1.296 5.162 8.34 5.227 11.564.107zm-373.61-17.07c1.35-1.35 2.455-2.875 2.455-3.389 0-1.956-3.882-5.606-7.123-6.697-4.28-1.442-4.346-3.679-.133-4.54 4.245-.869 6.256-2.626 6.256-5.469 0-5.888-11.773-8.715-18.701-4.49-8.769 5.346-8.769 19.734 0 25.08 2.2 1.342 5.014 1.954 8.996 1.956 4.823.003 6.208-.408 8.25-2.45zm50.549.906c8.848-4.575 9.288-20.2.716-25.425-4.597-2.803-11.526-2.69-15.912.258-5.771 3.88-4.958 8.92 1.638 10.157 4.871.914 4.305 2.954-1.285 4.633-5.576 1.674-6.523 3.943-3.147 7.537 3.97 4.225 12.659 5.597 17.99 2.84zm512.712-2.107c.252-2.595-.3-3.618-3.1-5.754-2.999-2.288-5.267-6.076-7.09-11.84-.954-3.017-2.616-1.908-2.616 1.746 0 4.193 3.63 15.286 5.827 17.801.928 1.064 2.61 1.676 4.12 1.5 2.055-.239 2.613-.913 2.86-3.453zM79.14 374.387c3.859-3.158 6.861-6.401 6.861-7.413C86 365.497 76.605 353 75.495 353c-.182 0-1.036-.27-1.896-.6C71.586 351.626 59 364.273 59 367.067c0 1.688 6.409 9.895 9.5 12.167 2.04 1.498 3.94.632 10.639-4.848zm318.916-1.417c3.485-1.865 5.21-6.695 4.479-12.544-.803-6.43-7.8-21.426-9.998-21.426-.845 0-1.53.113-1.524.25.007.138.676 2.725 1.488 5.75 2.403 8.954 2.015 13.39-1.427 16.285-2.972 2.501-3.403 3.5-3.191 7.394.246 4.53 5.549 6.766 10.173 4.291zm224.374-7.541c.864-.865 1.571-2.777 1.571-4.25 0-2.554.238-2.679 5.08-2.679 5.708 0 7.92-1.848 7.92-6.619 0-3.195-4.053-6.881-7.567-6.881-1.379 0-3.1-1.128-4.307-2.823-2.324-3.264-7.126-15.553-7.126-18.237 0-1.928-1.728-3.545-2.724-2.55-1.29 1.29-1.92 9.97-1.116 15.383.467 3.15 2.42 8.841 4.34 12.648 1.92 3.806 3.271 7.141 3.002 7.41-1.043 1.043-4.843-3.572-7.064-8.581-2.332-5.26-4.32-6.781-4.572-3.5-.626 8.16 2.027 19.5 4.962 21.214 2.51 1.464 5.835 1.23 7.6-.535zm-256.259-5.713c4.032-2.981 5.83-9.41 5.83-20.845 0-10.22-1.716-18.988-4.725-24.14-2.048-3.507-3.868-3.37-3.572.269.698 8.577.29 16.428-1.184 22.773-1.582 6.81-1.938 7.4-5.571 9.254-7.413 3.781-8.112 10.914-1.448 14.778 2.51 1.456 7.089.56 10.67-2.09zm21.693-6.088c1.264-5.02.817-8.667-2.041-16.628-1.911-5.323-4.32-9-5.897-9-.42 0-.688 4.181-.595 9.292.135 7.37-.192 9.845-1.58 11.965-2.878 4.396-2.234 8.329 1.72 10.49 3.346 1.832 7.076-.887 8.393-6.119zM70.001 347.5c2.022-4.044 3.202-4.242 5.08-.853 1.178 2.124 2.327 2.853 4.5 2.853 2.477 0 3.27-.706 5.231-4.66 7.668-15.45-12.74-28.543-24.447-15.685-5.13 5.634-4.745 13.362.977 19.64 2.886 3.167 6.713 2.594 8.659-1.295zm25.383.331c2.264-.642 4.501-1.5 4.972-1.906 1.54-1.327 5.863-15.108 4.992-15.917-.466-.434-3.64.558-7.055 2.204-6.547 3.159-7.279 4.248-8.754 13.038-.71 4.23-.416 4.359 5.845 2.581zm-41.832-6.071c-.388-3.432-1.15-6.776-1.693-7.43-.543-.654-3.748-2.122-7.122-3.261-7.884-2.663-8.766-1.877-6.237 5.562 3.141 9.242 4.598 10.419 13.88 11.209 1.722.147 1.82-.358 1.172-6.08zm301.833-6.89c3.344-1.523 4.854-5.607 4.927-13.326.049-5.228-.49-7.51-2.876-12.16-4.322-8.428-5.436-8.134-5.436 1.438 0 7.665-.142 8.158-3.5 12.178-1.925 2.304-3.5 4.575-3.5 5.048 0 2.09 2.41 5.837 4.364 6.782 2.812 1.362 3.116 1.364 6.021.04zm277.784-4.12c3.881-3.127 2.66-7.57-3.076-11.191-2.932-1.851-4.325-3.602-5.206-6.543-1.415-4.72-4.462-5.556-5.48-1.503-1.313 5.235 2.356 17.362 5.968 19.722 1.77 1.156 6.09.887 7.794-.485zm-289.264-10.122c.773-.62 2.019-2.597 2.77-4.393 2.308-5.521-1.108-20.235-4.698-20.235-.933 0-1.397 2.084-1.054 4.74.39 3.028-2.146 9.099-4.907 11.745-3.67 3.516-3.754 4.868-.5 8.123 2.581 2.58 5.191 2.586 8.389.02zm293.481-4.157c2.145-2.145 1.159-3.892-4.486-7.948-7.318-5.257-9.248-4.341-6.425 3.05 2.372 6.213 7.358 8.451 10.911 4.898zm-80.886-5.455c23.36-2.194 28.23-2.886 47-6.67 15.98-3.223 18.187-4.54 13.149-7.84-1.97-1.291-3.532-1.374-9.63-.509-4.997.71-7.668.71-8.52.001-2.05-1.701-2.594-7.924-.917-10.484 1.402-2.139 1.296-2.44-1.767-5.017-7.135-6.003-8.077-6.136-26.09-3.68-26.178 3.568-42.303 4.493-67.725 3.887-44.888-1.07-78.284-6.607-125.26-20.772-8.444-2.545-9.686-2.23-11.206 2.838-.583 1.942-.129 2.499 3.142 3.854 6.197 2.567 6.452 2.993 4.636 7.712-2.508 6.516-3.216 6.962-8.247 5.187-6.127-2.162-7.64-1.929-10.126 1.562-1.858 2.61-1.984 3.287-.818 4.393 1.412 1.338 23.437 8.79 36.879 12.475 4.125 1.132 8.85 2.488 10.5 3.015 8.069 2.576 37.987 7.879 59 10.457 17.961 2.205 70.559 1.98 96-.41zm-47.75-8.735c-2.104-2.33-2.313-8.569-.343-10.204.873-.724 4.198-1.056 8.75-.873l7.343.296.31 4.89c.171 2.689-.054 5.253-.5 5.697-.445.445-3.735 1.106-7.31 1.47-5.667.578-6.724.415-8.25-1.276zm-29 .023c-2.977-.473-3.257-1.606-2.108-8.554l.62-3.75h5.244c2.884 0 6.67.285 8.415.634 3.156.631 3.17.66 2.875 6.25l-.296 5.616-6 .12c-3.3.067-7.237-.075-8.75-.316zm57.25-5.037c0-2.825.547-5.454 1.25-6.01 1.481-1.169 12.3-2.367 14.334-1.586 1.678.644 2.003 9.848.383 10.85-.569.35-4.394.892-8.5 1.203l-7.467.565v-5.022zm-84.2 2.705c-2.585-.435-5.172-1.084-5.75-1.44-1.34-.83-1.352-5.608-.02-9.109 1.003-2.64 1.183-2.692 7.262-2.125 9.28.867 9.708 1.159 9.708 6.609 0 7.12-1.173 7.756-11.2 6.065zm115.739-1.91c-1.324-2.142-.975-8.055.568-9.597.863-.863 4.291-1.764 8.047-2.115 6.28-.586 6.57-.515 7.182 1.77.923 3.45.805 8.675-.21 9.302-.481.298-4.018.833-7.86 1.19-4.961.461-7.201.302-7.727-.55zM421 294.837c-5.265-1.478-6.326-2.95-5.528-7.67.962-5.697 2.177-6.417 8.65-5.131 10.316 2.049 10.904 2.73 8.825 10.215-.97 3.497-1.29 3.744-4.744 3.66-2.037-.05-5.278-.533-7.203-1.074zm-30.25-7.998c-6.21-2.165-6.477-2.681-4.697-9.088.778-2.803 1.568-3.75 3.128-3.75 2.686 0 9.95 2.07 11.569 3.298 2.738 2.075.675 11.763-2.475 11.623-.976-.043-4.362-.98-7.525-2.083zm-57.689 20.1c1.15-1.148 1.924-3.03 1.75-4.25-.255-1.795-1.067-2.243-4.523-2.494-5.32-.386-8.288 1.151-8.288 4.291 0 4.533 7.352 6.163 11.061 2.454zm209.351-31.629c2.594-1.452 1.098-2.054-7.979-3.216-8.474-1.084-18.507-3.633-27.433-6.971-3.775-1.412-7.945-2.067-13.297-2.09-8.85-.036-38.717-3.211-52.203-5.548-15.671-2.716-30.809-6.388-47.142-11.434-9.135-2.823-16.267-4.535-16.85-4.044-.554.467-2.133 2.924-3.507 5.459-3.034 5.594-3.393 5.27 10.999 9.956 16.665 5.426 27.609 8.308 43.597 11.482 13.305 2.64 23.033 3.951 52.403 7.06 11.293 1.196 59.015.687 61.412-.654zm29.078-2.725c6.212-.87 8.063-1.5 8.32-2.84.207-1.071-.635-2.163-2.228-2.889-2.08-.948-3.36-.835-6.822.601-8.935 3.707-11.782 4.49-17.926 4.926-3.484.247-6.671.487-7.084.534-.412.046-.75.53-.75 1.073 0 1.114 13.655.39 26.49-1.405zm168.423-66.325c1.423-1.039 3.43-3.584 4.46-5.657 1.702-3.427 1.747-4.234.5-8.896-1.667-6.225-5.995-9.706-12.07-9.706-10.93 0-17.447 11.511-11.78 20.807 3.723 6.105 12.946 7.79 18.89 3.452zm-35.52.225c9.668-4.588 8.362-21.1-1.937-24.498-10.26-3.387-19.07 4.6-17.035 15.443.87 4.643 3.302 7.37 8.079 9.065 5.177 1.836 7.006 1.834 10.893-.01zm13.304-27.734c3.55-3.906 19.146-28.276 19.824-30.978.767-3.054.708-3.177-10.307-21.562-5.847-9.759-9.053-14.195-10.112-13.991-.852.164-3.742 4.344-6.42 9.29-2.68 4.945-7.11 12.927-9.845 17.738-3.38 5.943-4.772 9.383-4.344 10.73.71 2.236 14.985 27.69 16.665 29.713 1.495 1.801 2.175 1.66 4.539-.94zm-2.883-16.5c-3.01-3.52-8.814-14.067-8.814-16.017 0-1.103 1.718-4.644 3.818-7.87 2.1-3.224 4.622-7.157 5.605-8.738l1.788-2.876 2.8 2.876c3.46 3.554 8.989 13.899 8.989 16.82 0 3.476-9.65 17.555-12.032 17.555-.362 0-1.331-.787-2.154-1.75zm6.082-9.785c3.61-4.11 3.872-7.038 1.118-12.437-2.764-5.419-3.937-5.842-6.763-2.44-4.328 5.211-5.286 8.433-3.537 11.892 1.751 3.463 4.254 6.52 5.337 6.52.408 0 2.138-1.59 3.845-3.535zm-395.969-35.1c2.775-3.527 2.613-6.916-.477-10.006-3.075-3.075-6.746-2.631-10.2 1.234-3.005 3.363-2.864 6.779.385 9.334 3.687 2.9 7.743 2.68 10.292-.562zm51.577-91.615c3.178-2.734 3.648-7.82.993-10.753C373.414 10.484 364 14.322 364 20.5c0 3.292 4.151 7.5 7.399 7.5 1.37 0 3.666-1.012 5.105-2.25zM499 808.118c0-.55.45-1.278 1-1.618.55-.34 1-.168 1 .382s-.45 1.278-1 1.618c-.55.34-1 .168-1-.382zm40.079-34.535c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.916-.32.798-.557.561-.605-.604zM524 757.06c0-.518.45-1.22 1-1.559.55-.34 1 .084 1 .941s-.45 1.559-1 1.559-1-.423-1-.941zm-10.306-14.698c-.352-.352-.396-1.035-.098-1.517.64-1.034 2.404-.142 2.404 1.215 0 1.075-1.355 1.252-2.306.302zM560 667.559c0-.857.45-1.559 1-1.559s1 .423 1 .941-.45 1.22-1 1.559c-.55.34-1-.084-1-.941zm93.079-31.976c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.917-.32.797-.557.56-.605-.605zm-38-31c-.043-1.054.193-1.644.525-1.312.332.332.368 1.195.08 1.917-.32.797-.557.56-.605-.605zm97.05-222.483c-2.276-1.44-.717-3.505 3.847-5.096 7.737-2.698 10.396-9.01 9.482-22.504-.693-10.223-3.818-41.393-6.918-69-2.619-23.321-2.801-26.22-1.694-26.905 1.76-1.088 2.944 2.518 4.084 12.442 1.703 14.832 3.77 31.763 6.527 53.463 4.618 36.348 4.45 47.652-.796 53.345-4.173 4.528-10.963 6.517-14.533 4.255zm-11.424-69.783c-.272-.45-.129-3.292.318-6.317.447-3.025 1.078-8.425 1.402-12 1.17-12.905 1.835-17.526 2.732-19 1.27-2.087.292 13.222-1.702 26.65-1.652 11.122-1.897 12.073-2.75 10.667zm4.706-44.067c.258-2.612.496-5.402.529-6.2.037-.898.403-1.088.962-.5 1.123 1.184.175 11.45-1.058 11.45-.496 0-.691-2.138-.433-4.75zm1.45-10.166c-.675-2.027 1.369-19.084 2.288-19.084.987 0-.036 16.78-1.152 18.892-.529 1.001-.848 1.055-1.136.192zM505.75 124.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zM522.5 1c-.34-.55-.141-1 .441-1S524 .45 524 1s-.198 1-.441 1-.72-.45-1.059-1zM544 1c0-1.281.708-1.281 1.5 0 .34.55.141 1-.441 1S544 1.55 544 1zm35.603.167c-.283-.459.14-.834.941-.834.8 0 1.456.375 1.456.834 0 .458-.423.833-.941.833s-1.173-.375-1.456-.833zM616 1c0-1.281.708-1.281 1.5 0 .34.55.141 1-.441 1S616 1.55 616 1z\",\n    style: {\n      fill: \"#000\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.159 0 0 .159 22.778 22.58)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.989 3.103C7.747-.954.242-8.59 0-10.5-.242-8.591-7.747-.955-7.989 3.103c-.169 2.868 1.695 4.057 3.39 4.057 1.835-.022 3.35-2.8 3.873-3.341.242.716-1.603 6.682-2.179 6.682h5.811c-.576 0-2.421-5.966-2.179-6.682.457.496 1.797 3.258 3.874 3.341 1.694-.001 3.557-1.189 3.388-4.057z\",\n    style: {\n      fill: \"#000\"\n    },\n    transform: \"matrix(-2.2448 0 0 -2.05244 124.496 195.54)\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      fill: \"none\",\n      stroke: \"#000\",\n      strokeWidth: 1.82777798,\n      strokeMiterlimit: 4,\n      strokeDasharray: \"none\"\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.837 235.548c0 3.777-3.087 6.869-6.871 6.869H7.11c-3.775 0-6.861-3.092-6.861-6.87V7.12C.25 3.343 3.336.25 7.11.25h152.856c3.784 0 6.87 3.093 6.87 6.87v228.428z\",\n    style: {\n      fill: \"none\",\n      strokeWidth: 1.82777798,\n      strokeMiterlimit: 4,\n      strokeDasharray: \"none\"\n    },\n    transform: \"matrix(.73316 0 0 .81584 22.325 22.466)\"\n  }))), /*#__PURE__*/React.createElement(\"text\", {\n    xmlSpace: \"preserve\",\n    x: -166.877,\n    y: -218.079,\n    style: {\n      fontSize: 30,\n      fontStyle: \"normal\",\n      fontWeight: 400,\n      lineHeight: \"125%\",\n      letterSpacing: 0,\n      wordSpacing: 0,\n      fill: \"#000\",\n      fillOpacity: 1,\n      stroke: \"none\",\n      fontFamily: \"Bitstream Vera Sans\"\n    },\n    transform: \"scale(-1)\"\n  }, /*#__PURE__*/React.createElement(\"tspan\", {\n    x: -164.877,\n    y: -216.079,\n    style: {\n      fontStyle: \"normal\",\n      fontVariant: \"normal\",\n      fontWeight: 400,\n      fontStretch: \"normal\",\n      fontFamily: \"Arial\",\n      InkscapeFontSpecification: \"Arial\"\n    }\n  }, \"Q\")), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.989 3.103C7.747-.954.242-8.59 0-10.5-.242-8.591-7.747-.955-7.989 3.103c-.169 2.868 1.695 4.057 3.39 4.057 1.835-.022 3.35-2.8 3.873-3.341.242.716-1.603 6.682-2.179 6.682h5.811c-.576 0-2.421-5.966-2.179-6.682.457.496 1.797 3.258 3.874 3.341 1.694-.001 3.557-1.189 3.388-4.057z\",\n    style: {\n      fill: \"#000\"\n    },\n    transform: \"matrix(-1.13877 0 0 -1.0412 156.135 204.475) scale(1.2) translate(2.5, 2)\"\n  }));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgQueenOfSpades2);\nexport default __webpack_public_path__ + \"static/media/queen_of_spades2.f50fa4283938ce405cb8e4dced5633f5.svg\";\nexport { ForwardRef as ReactComponent };","var _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgJackOfDiamonds2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlSpace: \"preserve\",\n    width: 222.783,\n    height: 323.556,\n    viewBox: \"0 0 167.087 242.667\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0.64885497\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"b\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.4351145\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"c\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.48854962\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"d\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.23664123\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"e\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#fff\",\n      stopOpacity: 0.29007635\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#000\",\n      stopOpacity: 0\n    }\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      fillRule: \"nonzero\",\n      clipRule: \"nonzero\",\n      stroke: \"#000\",\n      strokeMiterlimit: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.837 235.548c0 3.777-3.087 6.869-6.871 6.869H7.11c-3.775 0-6.861-3.092-6.861-6.87V7.12C.25 3.343 3.336.25 7.11.25h152.856c3.784 0 6.87 3.093 6.87 6.87v228.428z\",\n    style: {\n      fill: \"#fff\",\n      strokeWidth: 0.5\n    }\n  })), /*#__PURE__*/React.createElement(\"text\", {\n    xmlSpace: \"preserve\",\n    x: 3.402,\n    y: 27.808,\n    style: {\n      fontSize: 32,\n      fontStyle: \"normal\",\n      fontWeight: 400,\n      lineHeight: \"125%\",\n      letterSpacing: 0,\n      wordSpacing: 0,\n      fill: \"#df0000\",\n      fillOpacity: 1,\n      stroke: \"none\",\n      fontFamily: \"Bitstream Vera Sans\"\n    }\n  }, /*#__PURE__*/React.createElement(\"tspan\", {\n    x: 3.402,\n    y: 27.808,\n    style: {\n      fontStyle: \"normal\",\n      fontVariant: \"normal\",\n      fontWeight: 400,\n      fontStretch: \"normal\",\n      fill: \"#df0000\",\n      fillOpacity: 1,\n      fontFamily: \"Arial\",\n      InkscapeFontSpecification: \"Arial\"\n    }\n  }, \"J\")), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.243-4.725C1.126-7.59 0-10.5 0-10.5s-1.126 2.91-3.243 5.775C-5.361-1.862-8 0-8 0s2.639 1.861 4.757 4.726C-1.126 7.59 0 10.5 0 10.5s1.126-2.91 3.243-5.774C5.361 1.861 8 0 8 0S5.361-1.862 3.243-4.725z\",\n    style: {\n      fill: \"#df0000\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(2.04014 0 0 2.29598 42.394 49.582)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M120.117 1247.773c1.478-2.773 28.217-42.281 38.424-56.773 9.3-13.204 22.944-33.177 31.67-46.36 3.69-5.577 7.963-11.145 9.495-12.373l2.785-2.233-2.858-11.267c-3.79-14.936-9.547-33.694-16.334-53.216-8.842-25.432-24.277-61.05-29.274-67.551l-1.921-2.5-4.802 1.818c-13.089 4.955-18.244 4.616-27.027-1.775-7.2-5.24-10.286-10.805-11.01-19.857-.606-7.57 1.37-14.843 5.77-21.238 2.956-4.295 3.05-4.697 1.503-6.406-.907-1.002-4.212-3.195-7.344-4.873-3.132-1.678-7.26-4.214-9.174-5.636-1.913-1.422-6.585-3.51-10.382-4.64-8.35-2.488-8.5-2.39-12.562 8.176-9.327 24.258-9.258 24.162-16.663 23.292l-5.293-.622-.31 4.88c-.17 2.685-.185 18.962-.032 36.173.253 28.559.428 31.345 2 31.902 6.184 2.191 25.821 11.628 30.725 14.765 20.13 12.877 40.084 35.203 54.288 60.741 9.9 17.8 16.156 36.749 13.28 40.215-1.564 1.883-3.11 1.248-11.071-4.55-8.482-6.178-18.955-12.08-38-21.414-17.072-8.367-44.825-18.726-48.9-18.253l-2.6.302-.175 31.954-.175 31.955-8.325 7.492c-4.579 4.12-11.925 11.079-16.325 15.463C14.806 1210.004 1.959 1222 .974 1222 .344 1222 0 1047.233 0 726c0-272.8.38-496 .844-496 .464 0 5.751 4.775 11.75 10.611 5.998 5.837 17.31 16.704 25.136 24.15 7.827 7.447 14.56 14.484 14.964 15.639.403 1.155.59 20.438.415 42.85L52.79 364h2.155c1.185 0 3.37-.626 4.855-1.39 1.485-.765 9.9-4.32 18.7-7.899 16.544-6.728 24.388-10.34 57.5-26.472 10.725-5.225 25.575-12.312 33-15.749 16.465-7.621 52.397-25.466 58.613-29.11 4.111-2.408 4.458-2.9 3.71-5.268-.452-1.437-.823-7.353-.823-13.147 0-10.451.028-10.574 3.529-15.5 4.704-6.618 10.333-9.465 18.715-9.465 3.476 0 7.768.606 9.538 1.347C265.776 242.81 273 250.2 273 252.312c0 .718.62 2.155 1.38 3.193 1.295 1.771 1.506 1.638 3.458-2.188 1.144-2.242 2.589-6.942 3.211-10.446.623-3.504 1.541-8.396 2.041-10.871.5-2.475 1.19-7.026 1.536-10.113.809-7.24-.73-8.43-4.689-3.627-3.901 4.733-10.605 7.745-17.176 7.718-12.957-.054-21.76-9.838-18.788-20.879 1.734-6.439 5.128-9.099 11.608-9.099 2.909 0 6.44.437 7.845.972 4.858 1.847 6.469-.017 11.089-12.825 4.466-12.38 7.597-35.83 7.831-58.647l.154-15-3.943-6c-3.683-5.604-16.884-21.788-30.997-38-3.352-3.85-7.886-9.213-10.077-11.917-8.32-10.272-26.315-32.61-34.483-42.807C198.325 5.939 193.6.963 192.5.718c-1.1-.245 34.225-.506 78.5-.58l80.5-.134.222 3.156c.122 1.736.855 5.223 1.627 7.748 2.204 7.202 3.375 11.435 8.049 29.092 5.734 21.664 5.785 21.781 9.807 22.398 3.125.48 34.908 1.968 41.295 1.935 1.65-.01 9.248.589 16.884 1.328 24.562 2.379 39.213 2.833 39.82 1.235.737-1.937 11.077-44.155 13.874-56.646L485.374 0l21.563.21c11.86.114 17.212.355 11.895.535l-9.668.325-.698 4.215c-.384 2.318-1.062 4.91-1.507 5.759-.445.849-3.767 11.874-7.382 24.5-3.615 12.626-7.25 25.246-8.075 28.044-1.68 5.688-1.875 8.063-.724 8.775.428.264 10.44 3.035 22.25 6.157s24.813 6.562 28.896 7.643c8.284 2.195 11.39 1.864 13.445-1.429 1.795-2.878 23.828-36.954 33.126-51.234 3.939-6.05 9.54-14.971 12.446-19.825 2.906-4.853 6.246-9.931 7.421-11.284l2.138-2.46 18.765.285L648.03.5l-6.563 9.5c-3.61 5.225-12.922 19.4-20.694 31.5-11.867 18.476-21.083 31.993-34.77 51-10.08 13.998-17.497 24.704-19.652 28.364l-2.57 4.364 3.231 12.636c5.155 20.16 8.823 32.504 12.91 43.44a3071.254 3071.254 0 0 1 8.522 23.196c9.212 25.414 23.08 56.5 25.206 56.5.709 0 3.002-.893 5.096-1.985 2.094-1.091 6.756-2.712 10.36-3.601 6.394-1.578 6.677-1.563 11.76.624 10.219 4.396 16.159 14.495 16.112 27.393-.026 7.185-2.21 12.468-7.364 17.821-1.988 2.064-3.614 4.15-3.614 4.635 0 1.338 3.593 3.45 21.749 12.786l16.645 8.558 1.816-2.242c.998-1.233 2.098-3.422 2.443-4.865.345-1.443 1.311-3.974 2.147-5.624.836-1.65 2.33-6.15 3.32-10 2.258-8.78 4.517-10.932 10.529-10.03 3.642.546 4.382.34 5.36-1.488 1.071-2 1.217-51.834.198-67.084l-.375-5.602-8.166-4.329c-19.76-10.473-35.921-22.423-50.214-37.129-12.796-13.166-18.564-21.157-26.949-37.338-10.478-20.22-13.616-31.244-9.939-34.921 1.419-1.419 1.86-1.412 4.75.073 1.752.9 5.661 3.296 8.686 5.324 7.348 4.927 29.787 17.062 38.5 20.82 17.892 7.72 40.212 14.912 42.98 13.85 1.447-.555 1.603-3.72 1.46-29.64l-.162-29.018 3.778-4.244c10.491-11.784 46.058-49.002 47.634-49.846 1.743-.933 1.81 5.217 1.81 167.138 0 152.824-.143 167.964-1.571 166.535-.865-.864-1.877-1.578-2.25-1.587-.374-.009-5.854 1.613-12.179 3.604-19.292 6.07-18.672 5.65-14.5 9.821 1.849 1.85 2.5 3.562 2.5 6.577 0 2.46.525 4.278 1.324 4.585.728.28 5.115-.69 9.75-2.153 6.741-2.128 9.276-3.51 12.676-6.907l4.25-4.248-.079 10.119c-.043 5.565-.34 9.451-.66 8.636-1.955-4.978-5.091-5.095-17.082-.637-5 1.859-10.687 3.68-12.636 4.045-3.925.736-4.15 1.187-2.011 4.015.807 1.068 1.468 3.15 1.468 4.628 0 4.596 2.196 5.482 8.935 3.609 9.911-2.756 16.44-5.528 19.315-8.201l2.75-2.558v312.076c0 296.906-.085 312.03-1.75 311.136-.962-.517-5.513-4.59-10.112-9.052-4.6-4.462-15.713-14.913-24.697-23.224-9.367-8.665-16.75-16.301-17.307-17.902-.6-1.722-.759-15.576-.413-36.166.597-35.503.116-44.787-2.318-44.787-.8 0-4.6 1.585-8.446 3.522-3.847 1.937-9.123 4.37-11.725 5.407-2.603 1.038-12.288 5.528-21.524 9.979-9.236 4.45-16.984 8.092-17.218 8.092-.235 0-8.653 4-18.708 8.887-28.264 13.74-58.756 28.11-64.282 30.295-7.751 3.065-32.68 16.124-33.158 17.37-.235.612 0 3.018.524 5.347 1.266 5.634-.405 17.485-3.157 22.395-2.695 4.808-9.598 9.417-15.41 10.289-7.857 1.178-16.278-2.635-21.047-9.53-1.514-2.187-3.305-3.994-3.982-4.015-1.967-.061-5.08 7.11-7.673 17.672-2.614 10.646-4.687 26.336-3.64 27.545.359.415 2.8-1.732 5.425-4.772 6.546-7.583 13.13-10.893 21.763-10.944 7.29-.043 9.16.983 12.938 7.096 3.084 4.989 2.888 10.357-.559 15.33-4.042 5.833-7.53 7.424-14.644 6.68-5.653-.59-5.777-.548-7.749 2.642-5.705 9.232-15.022 59.689-13.985 75.746.483 7.495.763 7.946 15.854 25.534 5.225 6.09 20.75 24.292 34.5 40.45 13.75 16.16 27.608 32.284 30.796 35.833 9.93 11.057 11.318 10.15-15.527 10.15h-23.301l-3.484-5.11a762.67 762.67 0 0 1-5.984-8.92c-3.356-5.111-16.057-23.055-25.462-35.97-4.206-5.775-9.084-12.625-10.842-15.222-1.758-2.597-3.766-4.948-4.462-5.225-.696-.276-6.546.437-13 1.586-6.454 1.148-18.638 3.09-27.075 4.313-9.051 1.313-15.66 2.741-16.12 3.484-.46.745 3.654 12.95 10.084 29.912 5.974 15.758 10.865 29.215 10.87 29.902.005.936-3.223 1.25-12.83 1.25h-12.838l-1.612-5.25c-.887-2.887-3.476-11.775-5.755-19.75-8.75-30.628-9.895-33.913-12.395-35.55-1.9-1.246-4.974-1.513-15.222-1.322-21.265.396-52.034-1.587-78.791-5.077-4.227-.551-7.628-.544-8.679.018-2.034 1.088-2.404 2.835-7.828 36.93-2.232 14.026-4.288 26.513-4.57 27.75-.499 2.198-.83 2.25-13.992 2.25-7.415 0-13.481-.232-13.481-.518 0-.285.935-3.997 2.077-8.25 7.198-26.79 14.846-58.897 14.38-60.365-.585-1.844-1.247-2.04-14.654-4.322-8.468-1.441-39.54-8.285-40.715-8.968-1.546-.898-4.787 1.591-6.588 5.059-1.1 2.118-5.6 9.346-10 16.061-4.4 6.716-14.075 21.72-21.5 33.343a18274.895 18274.895 0 0 1-15.539 24.296l-2.038 3.165-18.259.273-18.259.272 1.212-2.272zM400 1155.527c9.075-.225 19.65-.884 23.5-1.466 3.85-.581 11.5-1.495 17-2.03 25.057-2.441 31.056-3.321 32.75-4.806 1.455-1.276 1.75-3.279 1.75-11.88 0-8.24-.287-10.345-1.411-10.345-.777 0-5.13 1.591-9.673 3.536-6.74 2.885-9.564 3.55-15.338 3.61-7.53.08-15.75-2.235-22.286-6.274-4.408-2.725-9.904-11.214-11.354-17.538-1.62-7.06.607-31.052 3.975-42.834.471-1.65 1.41-5.7 2.086-9 .676-3.3 1.831-8.025 2.567-10.5 2.484-8.35 3.595-16.83 2.48-18.916-.62-1.157-3.35-2.612-6.763-3.604-11.44-3.326-17.283-8.325-17.283-14.789 0-3.676 1.237-3.968 5.012-1.182 3.677 2.713 6.736 3.816 15.248 5.498 3.384.67 6.994 2.177 8.75 3.655 2.627 2.21 2.99 3.159 2.99 7.815 0 2.915-1.167 9.287-2.594 14.161-5.112 17.464-6.363 23.362-4.953 23.362 1.247 0 5.547-2.425 5.547-3.128 0-1.603 10.984-9.092 12.488-8.515 2.71 1.04 1.614 3.108-4.488 8.48-3.3 2.904-6 5.592-6 5.972 0 .38 5.287.554 11.75.387 9.37-.242 13.16.097 18.716 1.676 3.831 1.089 7.368 1.73 7.86 1.427 1.183-.732.02-16.572-2.408-32.799-6.015-40.183-11.573-57.165-24.665-75.364-14.516-20.18-26.033-28.433-44.115-31.612-15.508-2.726-40.245 1.518-62.936 10.799-9.947 4.068-31.15 17.189-39.93 24.71l-4.125 3.533 2.926 9.845c6.575 22.114 1.401 41.594-15.862 59.728l-4.417 4.638 5.996 19.362c3.298 10.648 8.796 31.061 12.218 45.361 3.423 14.3 7.24 30.245 8.484 35.432 1.728 7.21 2.723 9.603 4.221 10.158 1.657.613 27.562 3.083 44.787 4.271 2.75.19 10.85.172 18-.04 7.15-.213 20.425-.57 29.5-.795zm-61.5-24.962c-17.898-3.556-37.071-13.555-36.304-18.932.41-2.88 2.856-2.595 15.71 1.838 5.724 1.973 13.709 4.079 17.744 4.679 10.003 1.488 25.49-.264 40.74-4.608 12.667-3.608 15.843-3.533 17.092.4 1.716 5.408-3.85 10.588-15.546 14.47-10.367 3.44-28.086 4.408-39.436 2.153zm-4-17.518c-4.966-1.239-9.631-3.5-17-8.242-7.593-4.887-18.5-14.622-18.5-16.513 0-2.31 2.238-2.492 5.055-.41 1.575 1.165 3.173 2.118 3.55 2.118.379 0 2.878 2.049 5.554 4.552 2.734 2.557 8.667 6.376 13.535 8.712 8.297 3.98 9.076 4.159 18.237 4.168 8.522.01 10.444-.349 17.569-3.262 14.864-6.076 15.828-9.04 1.35-4.145-8.662 2.928-10.122 3.13-19.85 2.75-10.364-.406-10.636-.48-20.997-5.72-10.208-5.163-22.865-14.37-25.695-18.689-1.22-1.862-1.185-2.347.276-3.807.92-.92 2.297-1.435 3.058-1.143.76.292 4.218.821 7.682 1.176 5.609.575 7.06.315 13.238-2.373 10.166-4.424 17.195-5.584 29.363-4.848l10.426.631-2.426-2.6c-1.334-1.43-5.238-4.844-8.675-7.587-6.2-4.948-7.761-8.021-4.674-9.206 2.498-.958 9.833 3.969 20.096 13.5 13 12.073 16.306 16.39 16.318 21.308.006 2.583 1.202 6.085 3.51 10.284 4.624 8.412 4.587 9.659-.258 8.84-3.08-.52-5.3.077-12.293 3.308-16.168 7.47-28.274 9.736-38.449 7.198zm3.147-28.797c2.338-5.677 5.169-8.25 9.075-8.25 3.954 0 7.577 3.346 9.31 8.597 1.064 3.225 3.993 4.823 3.946 2.153-.056-3.195-4.145-9.881-7.17-11.726-3.598-2.193-8.812-2.627-11.875-.988-2.053 1.099-6.933 9.848-6.933 12.43 0 2.836 2.089 1.566 3.647-2.216zm-7.278-3.802c1.028-2.499 1.595-4.818 1.26-5.152-.61-.61-8.025 2.26-10.379 4.016-1.908 1.424-1.496 3.264 1 4.467 4.483 2.162 6.14 1.483 8.119-3.33zM371 1081.62c0-1.875-3.03-4.347-6.344-5.174l-2.844-.71 1.719 3.382c2.725 5.362 3.43 5.973 5.574 4.826 1.042-.558 1.895-1.604 1.895-2.324zm-4.724-40.397c-3.875-3.273-6.61-9.43-5.808-13.077.7-3.188 6.855-9.938 10.232-11.222 4.036-1.534 11.64-1.046 17.893 1.15 4.613 1.62 7.266 1.944 12.11 1.477 5.48-.528 6.324-.37 7.25 1.36 1.592 2.976 1.266 5.541-1.084 8.529-4.262 5.418-9.284 5.187-23.134-1.062-8.033-3.625-10.428-3.728-13.985-.605-2.53 2.222-2.167 4.82 1.36 9.73 4.704 6.55 1.466 9.042-4.834 3.72zm-2.025-42.473c-.546-.688-2.11-4.625-3.476-8.75-1.365-4.125-2.82-8.284-3.232-9.242-1.333-3.093 2.236-3.197 8.088-.236 7.718 3.905 12.873 4.119 25.69 1.065 10.803-2.574 10.836-2.576 20.642-.947 11.254 1.869 13.653 1.514 18.49-2.733 1.92-1.686 4.29-2.903 5.269-2.705 1.588.32 1.743 1.423 1.451 10.328-.18 5.484-.717 10.372-1.194 10.864-.509.524-2.123.375-3.9-.362-3.409-1.411-7.563-1.004-13.83 1.357-4.008 1.51-4.551 1.488-9.5-.394l-5.249-1.996-2.854 2.107c-2.47 1.825-3.748 2.028-9.5 1.515-21.253-1.896-20.678-1.89-22.062-.222-1.594 1.92-3.477 2.057-4.833.351zm13.999-22.413c-3.035-1.223-1.058-4.162 5-7.433 5.838-3.152 6.876-3.375 15.75-3.389 10.507-.017 20.74 2.435 23.667 5.67 1.556 1.72 1.565 2.012.102 3.474-1.462 1.463-2.203 1.46-8.805-.031-11.01-2.486-23.352-1.864-32.964 1.663-.825.303-2.063.324-2.75.046zm19.25-15.999c-4.773-.691-15.703-4.406-19.25-6.543-1.972-1.188-3.25-2.764-3.25-4.007 0-1.833.446-1.988 4.25-1.472 2.337.317 7.561 1.492 11.608 2.61 6.062 1.676 8.468 1.878 13.648 1.144 3.46-.49 7.206-1.38 8.326-1.98 1.12-.6 3.221-1.09 4.669-1.09 2.281 0 2.59.366 2.315 2.75-.582 5.061-13.184 9.91-22.316 8.588zm65.755 155.665c3.6-1.112 7.637-3.168 9.106-4.637 2.308-2.308 2.639-3.45 2.639-9.107v-6.47l-3.75.484c-2.063.266-7.8 1.259-12.75 2.206-9.185 1.758-13.622 1.42-21.7-1.653-5.356-2.037-5.17 0 .23 2.531 7.697 3.602 17.497 4.394 27.322 2.208 4.194-.933 8.061-1.428 8.593-1.099 1.865 1.152-.103 3.287-5.437 5.899-4.605 2.255-6.685 2.635-14.408 2.635-10.934 0-16.94-1.995-25.58-8.499-3.29-2.476-6.363-4.501-6.83-4.501-1.064 0 .106 5.628 1.9 9.143 1.757 3.44 9.704 9.213 15.41 11.197 6.388 2.22 17.452 2.073 25.255-.337zm-20.36-35.498c3.744-8.464 10.458-8.688 14.614-.488 2.644 5.22 5.494 6.638 5.487 2.733-.009-5.444-6.887-11.75-12.816-11.75-4.738 0-13.62 9.86-11.693 12.979 1.209 1.956 2.432.992 4.408-3.474zm-9.895 1.396c0-.604.734-2.645 1.63-4.536.898-1.89 1.375-3.693 1.062-4.007-.598-.598-9.559 2.423-11.065 3.73-1.257 1.092 3.902 5.912 6.328 5.912 1.125 0 2.045-.494 2.045-1.099zm39.809-1.128c.373-1.961-3.988-6.773-6.14-6.773-1.198 0-1.166.711.205 4.535 1.27 3.54 2.062 4.473 3.616 4.25 1.094-.157 2.138-1.062 2.319-2.012zM299.819 954.25a811.085 811.085 0 0 0 13.66-9.99c8.109-6.084 28.377-15.538 39.299-18.331 4.14-1.059 11.621-2.42 16.625-3.025 10.97-1.327 12.924-2.134 9.507-3.928-5.602-2.941-9.943-7.352-12.448-12.648l-2.643-5.587-7.66.67c-9.96.87-23.116 3.236-30.659 5.513-3.3.996-8.615 2.578-11.811 3.514-11.746 3.442-47.765 21.21-52.408 25.852-1.336 1.336-.756 1.859 5.254 4.727 4.54 2.166 9.251 5.635 14.36 10.573 4.926 4.76 8.423 7.36 9.926 7.38 1.276.016 5.325-2.107 8.997-4.72zm-236.134.5c1.588-2.474 4.155-12.002 3.614-13.414-.305-.793-1.509-1.305-2.676-1.139-2.71.387-7.222 12.377-5.458 14.502 1.367 1.647 3.48 1.671 4.52.051zm67.51-13.437c1.543-1.478 2.805-3.178 2.805-3.777 0-1.093-9.797-10.942-17.753-17.845-2.339-2.03-5.113-3.691-6.165-3.691-2.252 0-10.299 9.648-9.87 11.835.158.811 5.013 4.761 10.788 8.777 12.11 8.421 15.49 9.208 20.195 4.7zM58.064 939.1c2.603-4.633 4.897-5.96 10.936-6.327l4.5-.274 5.248-10.176c6.302-12.217 9.343-26.067 7.374-33.58-.612-2.334-2.275-8.519-3.696-13.744-1.47-5.407-2.963-14.455-3.465-21-1.048-13.683-3.902-25.244-7.06-28.605-2.742-2.92-8.121-4.682-12.901-4.228l-3.5.333-.73 8c-.577 6.31-.388 8.902.893 12.27 1.203 3.164 1.472 6.076 1.039 11.25-.586 6.984-.037 8.293 2.298 5.48 1.787-2.153 5-1.912 5 .376 0 1.031-1.176 4.519-2.612 7.75-2.432 5.468-2.563 6.497-1.889 14.874.398 4.95.676 10.8.618 13-.583 22.137-.99 28.396-1.97 30.227C55.391 929.874 53.521 943 55.542 943c.181 0 1.315-1.755 2.52-3.9zm508.34-7.71c.339-.885.13-4.403-.465-7.819-.595-3.416-.937-7.98-.76-10.141.29-3.56.746-4.135 4.821-6.087 2.475-1.185 6.3-2.696 8.5-3.358 7.046-2.118 8.5-3.532 8.494-8.26-.003-2.324-.444-6.906-.98-10.18-1.366-8.337-.381-9.505 10.941-12.978 12.111-3.715 12.37-4.13 11.469-18.371-.685-10.824-.662-10.994 1.69-12.473 1.313-.825 5.536-2.036 9.386-2.691 11.725-1.996 11.75-2.023 13.562-13.835.862-5.625 2.078-10.738 2.7-11.36.623-.623 5.515-1.694 10.871-2.38 6.941-.888 10.095-1.733 10.977-2.94.682-.932 1.731-4.917 2.333-8.856.602-3.939 1.873-8.737 2.826-10.662l1.731-3.5 10.737-1.037c5.906-.57 11.145-1.47 11.643-2 .498-.53 1.822-4.734 2.943-9.343 1.12-4.61 2.54-8.885 3.154-9.5.614-.616 4.358-1.345 8.32-1.62l7.203-.5.305-4.75c.167-2.613.167-4.794 0-4.847-1.898-.602-22.624-.67-23.558-.077-.69.438-2.165 5.043-3.28 10.235-2.678 12.472-3.254 12.939-15.955 12.939-6.629 0-10.08.402-10.74 1.25-.534.688-1.958 5.975-3.164 11.75-1.205 5.775-2.863 11.175-3.684 12-1.08 1.087-4.307 1.592-11.708 1.834-5.619.184-10.6.704-11.07 1.155-.47.451-1.478 5.885-2.24 12.076-.848 6.883-1.969 11.9-2.886 12.913-.913 1.009-4.738 2.177-9.76 2.981-13.867 2.22-12.799.814-12.565 16.534.16 10.722-.1 13.822-1.247 14.898-.796.748-4.823 2.336-8.948 3.53s-8.783 2.673-10.35 3.288l-2.851 1.117.703 11.708c.831 13.835 1.47 12.928-12.727 18.047l-9.03 3.256.554 9.082c.643 10.535 1.874 15.316 4.733 18.385 2.394 2.57 6.486 2.896 7.371.587zM471 926.211c0-2.803-41.17-19.211-48.204-19.211-2.02 0-12.976 10.9-12.206 12.145.29.47 5.261.855 11.046.855 9.973 0 29.744 2.494 42.864 5.407 3.3.733 6.112 1.391 6.25 1.463.138.071.25-.225.25-.66zm-318.102-3.605c1.809-1.867 3.135-4.075 2.946-4.907-.527-2.319-22.957-22.699-24.982-22.699-2.064 0-5.546 3.43-6.485 6.386-.524 1.654 1.578 4.144 11.239 13.31 6.536 6.203 12.358 11.283 12.938 11.29.58.008 2.534-1.513 4.344-3.38zm25.134-.955c1.907-1.53 68.043-67.355 146.968-146.276L468.5 631.88l-3.843-3.54-3.844-3.539-18.156 18.009A6994.703 6994.703 0 0 0 408 677.466c-9.075 9.155-27.283 27.309-40.462 40.34-13.18 13.032-28.555 28.419-34.167 34.194-5.613 5.775-21.118 21.3-34.457 34.5C249.492 835.407 162 923.498 162 924.351c0 .485 2.827.702 6.282.482 5.01-.32 6.984-.963 9.75-3.182zM30.828 908.888c8.62-2.81 17.116-6.195 18.88-7.519 5.728-4.297 5.414-12.524-.526-13.829-3.05-.67-8.168.84-9.396 2.773-1.296 2.038-.857 7.383.714 8.687 2.117 1.757 1.915 5-.311 5-2.853 0-6.189-3.75-6.189-6.957 0-3.827-.923-6.043-2.517-6.043-1.919 0-18.958 5.677-22.433 7.474-6.152 3.181-6.702 9.516-1.152 13.244 1.869 1.255 4.266 2.282 5.328 2.282 1.062 0 8.983-2.3 17.602-5.112zm143.367-7.575c1.543-1.478 2.805-3.405 2.805-4.283 0-1.67-16.882-18.746-23.094-23.36-1.977-1.469-4.295-2.67-5.152-2.67-1.584 0-5.754 6.074-5.754 8.381 0 1.846 24.695 24.619 26.697 24.619.931 0 2.956-1.21 4.498-2.687zm348.955-86.127c-.298-75.178-.583-95.07-1.717-119.686l-.507-11-5.03-5-5.03-5 .56 56.5c.31 31.075.845 79.096 1.191 106.712l.63 50.212 4.542 3.54c2.498 1.946 4.797 3.284 5.108 2.973.31-.311.425-35.974.253-79.251zm172.11 73.812c14.216-6.8 14.752-7.47 14.725-18.397-.025-9.946-1-10.187-8.514-2.101-7.426 7.99-20.471 24.321-20.471 25.627 0 1.523 1.431 1.008 14.26-5.129zM21 886.93c6.325-2.23 11.836-4.384 12.246-4.787.41-.404-.178-2.514-1.308-4.688-1.345-2.587-1.885-5.071-1.562-7.186.27-1.777.088-3.481-.407-3.787-1.59-.982-22.362 7.422-24.197 9.79-2.417 3.119-2.432 12.245-.022 13.649 2.53 1.474 2.652 1.45 15.25-2.99zm174.465-7.033c1.944-1.707 3.544-3.62 3.556-4.25.032-1.773-31.164-31.528-32.513-31.01-1.326.508-5.508 7.517-5.508 9.232 0 1.906 28.653 29.132 30.66 29.132.148 0 1.861-1.397 3.805-3.104zM506 881.941c0-.582-.45-.78-1-.441-.55.34-1 .816-1 1.059s.45.441 1 .441 1-.477 1-1.059zm-457.646-5.393c2.932-2.717 3.208-4.22 1.475-8.025-2.22-4.873-9.72-4.569-12.341.5-1.756 3.396-.963 5.83 2.742 8.426 3.086 2.161 5.055 1.943 8.124-.901zm455.111-1.652c3.561-3.126 4.622-5.896 2.258-5.896-2.624 0-11.004 6.737-10.133 8.145 1.07 1.732 4.436.771 7.875-2.249zm-6.371-7.964c9.017-6.512 10.247-7.88 9.3-10.346-.894-2.33-1.657-2.056-8.823 3.164-3.586 2.612-8.416 6.044-10.734 7.625-3.968 2.707-4.105 2.956-2.335 4.25 1.034.756 2.4 1.375 3.035 1.375.635 0 4.936-2.73 9.557-6.068zm-218.673-2.126 8.922-3.917 102.519-102.441L492.38 656.006l-2.877-3.003c-1.582-1.652-3.54-3.003-4.349-3.003-1.207 0-189.973 188.12-213.654 212.922-7.862 8.235-7.665 8.288 6.921 1.884zM103.703 849.5c40.362-53.718 63.015-111.334 68.357-173.857 3.174-37.148-3.884-85.93-18.758-129.643-6.346-18.651-23.846-56.597-28.275-61.308-1.63-1.735-1.91-1.642-6.863 2.273-2.84 2.245-5.164 4.575-5.164 5.177 0 .603 1.526 3.63 3.39 6.727 8.296 13.777 19.362 39.69 26.748 62.631 3.08 9.567 8.844 35.037 10.75 47.5 10.001 65.369-1.616 131.416-33.447 190.156-4.871 8.989-9.375 16.794-10.009 17.344-.634.55-4.44 5.882-8.457 11.85-4.018 5.967-9.593 13.357-12.39 16.421l-5.085 5.571.134 6.679c.074 3.673.68 7.697 1.346 8.942 1.208 2.258 1.226 2.251 5.711-2.1 2.474-2.4 7.88-8.863 12.012-14.363zm385.852 8.461c7.08-4.971 13.677-9.766 14.66-10.655 1.814-1.642 2.433-5.787.997-6.675-.75-.464-25.19 15.85-32.332 21.582-2.825 2.267-3.134 2.88-1.88 3.735 3.071 2.091 5.994.834 18.555-7.987zM18 863c4.475-1.65 8.751-3 9.503-3 .752 0 2.505-.433 3.897-.962 2.465-.937 2.492-1.051 1.065-4.468-.806-1.928-1.465-5.156-1.465-7.174v-3.668l-4.75.619c-6.138.8-20.627 8.07-22.925 11.504-2.3 3.435-2.305 4.109-.063 7.399C5.667 866.78 7.85 866.742 18 863zm198.75-4.323c1.238-1.114 2.25-2.8 2.25-3.748 0-2.284-33.679-34.929-36.035-34.929-2.152 0-5.965 4.96-5.965 7.758 0 1.207 5.102 6.763 13.388 14.58 22.363 21.1 21.599 20.627 26.362 16.339zm257.93-5.223a3622.888 3622.888 0 0 1 20.607-14.25c9.693-6.64 12.34-9.976 9.875-12.442-1.197-1.197-.715-1.498-28.162 17.58-21.498 14.943-20.452 14.117-19.61 15.48 1.773 2.868 6.59 1.094 17.29-6.368zm-426.903-.01C52.253 850.307 49.501 843 43.845 843c-3.15 0-6.845 3.07-6.845 5.686 0 2.419 3.98 6.314 6.452 6.314 1.157 0 3.103-.7 4.325-1.557zM318 851.222c0-.428-.7-1.778-1.557-3-2.735-3.906-7.735-2.033-6.081 2.277.594 1.549 7.638 2.215 7.638.723zm158.295-13.381C504.4 818.544 506 817.294 506 814.635c0-1.266-.268-2.57-.596-2.897-.327-.328-6.74 3.535-14.25 8.583-7.51 5.049-16.477 10.932-19.927 13.075-5.408 3.358-12.812 11.13-16.693 17.524-1.602 2.639 2.183.364 21.76-13.078zM332.307 848.75c1.53-1.132 1.248-1.793-2.98-7-4.753-5.85-7.106-6.927-9.316-4.263-1.696 2.044-.647 5.4 2.896 9.263 3.15 3.435 6.498 4.147 9.4 2zM351 845.927c0-1.025-15.275-17.66-17.572-19.135-1.153-.742-5.428 1.727-5.428 3.134 0 .89 6.87 9.946 10.865 14.324 2.072 2.271 3.347 2.75 7.322 2.75 2.761 0 4.813-.458 4.813-1.073zm17.527-.97c.877-1.42-2.402-5.508-14.808-18.457-8.969-9.362-10.803-10.841-12.312-9.933-4.307 2.59-4.003 3.901 2.673 11.551C357.383 843.361 360.366 846 364.29 846c1.976 0 3.883-.47 4.238-1.043zm15.055.043c.23 0 .418-1.316.418-2.923 0-1.825-1.38-4.739-3.672-7.75-5.87-7.716-24.487-27.243-26.617-27.919-1.254-.398-2.674.11-3.992 1.429l-2.046 2.046 2.55 3.308c3.056 3.964 14.56 16.707 23.57 26.107 4.042 4.215 7.059 6.59 7.944 6.25.784-.302 1.615-.548 1.845-.548zM16.5 840.859c4.95-1.732 9.524-3.557 10.165-4.056 1.3-1.012 1.022-11.525-.34-12.864-.789-.775-10.625.95-14.825 2.6-7.212 2.834-11.215 8.975-8.88 13.62 1.16 2.308 2.494 3.454 4.38 3.766.275.045 4.55-1.335 9.5-3.066zm221.336-3.173c1.81-1.935 2.112-2.913 1.343-4.342-1.255-2.334-38.522-38.35-41.679-40.28-3.02-1.846-4.685-.564-6.53 5.025l-1.359 4.119 7.445 7.098a6397.674 6397.674 0 0 1 17.881 17.146c5.741 5.526 11.977 11.275 13.86 12.775 3.756 2.995 4.994 2.784 9.039-1.54zM41.17 832.345c3.48-3.15 1.738-8.345-2.8-8.345-4.964 0-6.61 5.582-2.579 8.75 2.11 1.658 3.19 1.577 5.38-.405zm346.115-5.06c.987-5.164-.428-9.116-5.016-14.01-11.801-12.587-14.756-15.548-16.962-16.993-2.226-1.458-2.544-1.409-4.845.753-1.355 1.272-2.463 2.615-2.463 2.984C358 801.89 383.846 830 385.567 830c.66 0 1.433-1.222 1.719-2.714zm89.5-5.006c10.061-6.38 28.123-19.598 28.647-20.965 1.28-3.334-1.241-3.706-5.643-.834-11.555 7.54-26.645 18.7-27.185 20.106-1.475 3.846-.096 4.404 4.18 1.693zm-219.42-4.352c1.448-1.14 2.634-2.805 2.634-3.7 0-1.474-52.624-54.161-54.141-54.207-.96-.03-3.86 7.69-3.85 10.25.005 1.563 3.37 5.288 11.25 12.452 6.182 5.622 17.31 16.31 24.727 23.75 7.417 7.44 14.22 13.528 15.115 13.528.896 0 2.815-.933 4.264-2.073zm132.601-12.31c.844-3.015.915-4.967.225-6.25-1.299-2.42-14.714-15.367-15.92-15.367-.508 0-1.974 1.118-3.257 2.484-1.761 1.875-2.111 2.95-1.425 4.38 1.34 2.79 16.722 19.103 18.03 19.12.616.009 1.672-1.957 2.347-4.368zm101.012-7.672c9.892-7.1 14.196-10.796 14.643-12.574 1.144-4.56-1.008-4.815-6.759-.8-25.17 17.572-27.236 19.399-25.369 22.42 1.282 2.074 3.823.76 17.485-9.046zm-8.87-8.23c23.251-16.787 25.791-19.215 23.007-22-.777-.776-3.45.594-9.466 4.852-12.867 9.106-25.112 18.496-25.495 19.55-.368 1.016 1.673 3.906 2.717 3.848.346-.019 4.502-2.831 9.237-6.25zm-86.501.535c.73-.963 1.343-2.364 1.36-3.114.047-2.005-9.9-13.136-11.738-13.136-1.77 0-5.23 2.813-5.23 4.251 0 1.683 11.2 13.749 12.762 13.749.835 0 2.115-.787 2.846-1.75zm74.274-6.461c5.289-3.233 29.077-21 32.868-24.549 6.22-5.823 3.135-9.222-3.877-4.272-2.405 1.698-7.073 4.96-10.373 7.248-7.983 5.535-25.5 18.911-25.5 19.471 0 .924 2.096 4.313 2.667 4.313.328 0 2.225-.995 4.215-2.211zm-62.92-7.565c-.048-2.142-9.32-12.224-11.243-12.224-.775 0-2.227.904-3.228 2.01-2.207 2.439-1.408 4.338 4.533 10.771 3.93 4.257 3.971 4.273 6.965 2.725 1.656-.857 2.994-2.333 2.973-3.282zm9.467-4.795c.864-.865 1.571-2.052 1.571-2.64 0-1.896-11.113-13.789-12.885-13.789-1.966 0-4.115 1.856-4.115 3.555 0 1.362 11.79 14.445 13.017 14.445.462 0 1.547-.707 2.412-1.571zm227.623-1.47c2.111-1.672 4.113-3.904 4.448-4.958.396-1.25-1.69-6.545-5.992-15.209-13.416-27.022-21.198-47.59-26.969-71.292-6.912-28.388-8.547-39.284-9.229-61.5-.735-23.993.627-40.52 5.262-63.845 4.088-20.571 7.192-31.777 12.923-46.655 4.756-12.347 20.788-45.83 26.334-55 5.852-9.677 19.845-30.128 24.65-36.027 5.87-7.206 6.96-11.369 4.975-18.99-1.764-6.769-3.176-8.958-4.872-7.55-.634.525-3.385 4.243-6.112 8.261-2.728 4.018-7.47 10.681-10.54 14.806-20.727 27.855-44.958 74.345-54.73 105-9.917 31.115-16.474 76.075-14.729 101 .658 9.393 3.11 31.63 3.915 35.5 2.89 13.895 3.842 18.16 5.575 25 2.059 8.125 5.322 18.947 9.8 32.5 3.76 11.377 14.712 37.073 21.418 50.25 6.747 13.258 7.518 13.742 13.873 8.709zm-157.349-14.064c17.738-12.758 20.423-15.463 17.276-17.408-1.013-.626-21.979 12.136-21.979 13.379 0 .357-2.475 3.487-5.5 6.955-8.896 10.2-7.484 9.795 10.203-2.926zm-62.87 1.722c1.146-2.352 1.107-3.041-.282-4.926-.888-1.205-2.545-3.653-3.682-5.441-2.426-3.815-4.713-4.115-7.622-1-2.5 2.677-1.895 4.26 4.093 10.717 4.25 4.582 5.523 4.692 7.493.65zm7.63-11.577c2.288-2.528 1.503-5.567-2.542-9.844-2.873-3.04-3.297-3.19-5.273-1.886-3.192 2.11-3.082 4.706.401 9.443 3.485 4.738 4.823 5.15 7.415 2.287zm10.502-11.974c1.541-2.88 1.326-3.665-2.069-7.531-3.495-3.982-4.461-4.239-7.067-1.88-2.467 2.232-2.304 4.034.722 8 2.916 3.824 6.776 4.47 8.414 1.41zm60.785-4.365c2.218-2.02 3.286-8.701 1.392-8.701-1.024 0-8.142 10.51-8.142 12.02 0 1.32 3.6-.45 6.75-3.32zM450.8 722.8c1.948-1.948 1.393-4.241-1.755-7.257-2.859-2.739-3.04-2.777-5.5-1.164-3.108 2.036-3.153 2.88-.357 6.661 2.28 3.084 5.535 3.837 7.612 1.76zm8.147-11.236c1.304-1.571.339-4.252-2.328-6.466-1.116-.925-2.011-.958-3.555-.132-2.634 1.41-2.606 2.828.11 5.72 2.506 2.667 4.088 2.908 5.773.878zm7.119-8.6c2.664-1.425 2.42-3.599-.626-5.595-2.343-1.535-2.695-1.542-4.154-.083-1.46 1.459-1.452 1.811.083 4.154 1.9 2.9 2.04 2.946 4.697 1.525zm7.972-14.039c2.65-5.195 2.16-6.655-1.318-3.92-3.199 2.517-5.065 5.628-4.207 7.016 1.282 2.074 3.53.814 5.525-3.096zm-139.626-87.598c18.198-17.97 49.303-48.908 69.12-68.75C435.981 500.088 558.71 378.44 590.758 347l12.742-12.5-7.388-.297-7.388-.296-43.612 43.397c-23.987 23.869-56.882 56.402-73.1 72.297-47.366 46.42-116.096 114.422-148.831 147.253l-30.32 30.408 3.266 3.369c1.796 1.853 3.7 3.369 4.231 3.369.531 0 15.856-14.703 34.054-32.673zm-33.233-15.077c12.82-13.063 45.588-46.047 72.816-73.3 84.814-84.89 122.319-122.97 121.71-123.579-.323-.322-4.249.925-8.725 2.771l-8.137 3.358-104.508 104.355L269.827 604.21l2.773 2.895c1.526 1.592 3.336 2.895 4.022 2.895.686 0 11.737-10.688 24.557-23.75zm-49.32-45c-.134-24.613-.556-55.55-.937-68.75-.38-13.2-.808-41.775-.949-63.5-.14-21.725-.46-40.625-.71-42-.374-2.067-7.1-8.371-10.49-9.833-.425-.184-.78 9.491-.79 21.5-.021 28.822 1.905 160.348 2.655 181.247l.59 16.415 4.523 4.835c2.487 2.66 4.935 4.836 5.438 4.836.544 0 .816-18.158.67-44.75zm36.964 33.38c.456-2.296-2.524-2.057-3.788.304-.57 1.064-1.035 2.469-1.035 3.122 0 1.747 4.42-1.392 4.823-3.425zm8.233-8.474c2.655-2.15 2.078-5.156-.99-5.156-2.25 0-4.503 3.42-3.674 5.578.729 1.9 1.93 1.792 4.664-.422zm10.476-10.191c1.794-1.982 1.786-2.091-.28-4.158-2.024-2.024-2.24-2.044-4.687-.441-2.796 1.831-3.232 3.567-1.365 5.434 1.784 1.784 4.257 1.458 6.332-.835zm9.893-9.882c2.066-2.283.843-5.546-2.472-6.598-4.217-1.338-7.035 5.203-3.203 7.435 2.55 1.486 3.73 1.312 5.675-.837zm9.375-9.283c2.688-2.688-.209-7.8-4.42-7.8-3.607 0-4.765 3.24-2.285 6.393 2.202 2.8 4.773 3.339 6.705 1.407zm10.866-11.373c.74-1.93-2.098-6.112-4.711-6.941-2.088-.663-5.955 1.77-5.955 3.746 0 .507 1.338 2.26 2.973 3.895 2.523 2.522 3.288 2.804 5.056 1.857 1.146-.613 2.333-1.764 2.637-2.557zm-72.752-4.074c2.59-1.455 5.688-4.043 6.884-5.75a135.925 135.925 0 0 1 4.372-5.837c1.208-1.503 1.993-2.937 1.744-3.186-.46-.459-10.73 5.93-16.664 10.366-3.054 2.283-4.1 4.87-2.583 6.387.962.963 1.076.927 6.247-1.98zm82.892-7.115c.195-1.293-1.043-3.344-3.403-5.635-3.968-3.854-5.306-4.3-7.203-2.403-2.28 2.28-1.316 5.924 2.49 9.41 3.326 3.046 3.895 3.246 5.75 2.02 1.133-.747 2.198-2.274 2.366-3.392zM76.345 507.75c.765-1.238 2.4-5.4 3.634-9.25 4.365-13.622 3.931-13.108 11.682-13.84 3.761-.355 8.944-.649 11.518-.653 5.818-.009 7.52-1.6 8.306-7.769 1.369-10.737 2.512-16.53 3.497-17.716.573-.69 6.1-2.047 12.28-3.013 7.298-1.141 11.676-2.307 12.488-3.324.8-1.004 1.255-5.002 1.265-11.126.02-13.451.512-14.165 10.87-15.772 4.601-.714 9.548-1.864 10.99-2.554 2.6-1.245 2.628-1.373 2.907-13.702.295-13 1.28-16.031 5.205-16.031 2.431 0 15.269-4.081 16.9-5.373 1.103-.874 1.252-3.292.73-11.888-.637-10.482-.587-10.86 1.749-13.196 1.322-1.322 4.368-2.886 6.769-3.475 2.4-.589 5.94-1.858 7.865-2.82l3.5-1.748.256-10.5c.14-5.775.783-11.52 1.429-12.768 1.034-2 .773-2.68-2.203-5.75-3.733-3.852-5.462-4.235-8.744-1.936-2.067 1.448-2.192 2.214-1.973 12.077.277 12.421.648 11.921-11.688 15.767-4.576 1.427-8.885 3.276-9.577 4.11-.846 1.02-1.049 3.068-.617 6.258 1.909 14.13 1.934 16.234.214 18.134-.925 1.023-3.126 2.136-4.89 2.473-9.847 1.882-13.13 2.741-14.35 3.754-1.013.84-1.357 4.362-1.357 13.881 0 9.096-.365 13.058-1.27 13.81-.7.58-5.312 1.59-10.25 2.246-14.073 1.867-13.191.97-13.632 13.856-.463 13.528-.774 13.942-11.794 15.695-8.65 1.377-12.917 3.005-14.133 5.393-.42.825-1.317 5.408-1.994 10.185-.676 4.777-1.577 9.249-2.002 9.937-.449.726-5.298 1.797-11.549 2.55-5.926.714-11.297 1.867-11.935 2.563-.638.696-2.45 5.048-4.028 9.67-1.577 4.624-3.51 9.05-4.295 9.834-1.01 1.01-3.212 1.33-7.523 1.094L54.5 496.5v12l7.5.57c4.125.313 8.727.65 10.227.75 1.874.124 3.162-.523 4.118-2.07zm200.963-10.378c19.066-12.896 24.304-17.333 23.362-19.79-.518-1.35-1.439-1.056-5.892 1.881-2.903 1.915-9.553 6.219-14.778 9.565-17.902 11.464-21.474 14.287-21.816 17.241-.18 1.543.172 2.731.808 2.731.618 0 8.86-5.233 18.316-11.628zm79.378 9.454c1.273-1.196 2.314-2.802 2.314-3.57 0-2.011-11.208-14.255-13.05-14.255-3.7-.001-5.195 5.372-2.642 9.499 1.863 3.01 9.06 10.46 10.128 10.481.514.01 1.977-.96 3.25-2.155zm202.881-8.288c.887-1.354 1.843-4.174 2.123-6.267l.51-3.805-24.643-23.983c-13.554-13.19-25.576-24.412-26.715-24.937-1.733-.798-2.695-.286-5.89 3.14l-3.818 4.093 27.183 27.1c14.95 14.905 27.735 27.105 28.41 27.11.675.006 1.953-1.097 2.84-2.45zm-191.116-3.484c1.687-1.863 1.672-2.072-.33-4.883-5.558-7.807-11.065-10.353-14.207-6.568-1.415 1.706.641 5.171 5.977 10.073 4.146 3.808 6.08 4.119 8.56 1.378zm-90.855-12.352c12.89-8.854 17.994-12.915 18.224-14.504.793-5.462-2.527-3.848-24.32 11.83-3.85 2.77-8.463 5.965-10.25 7.102-2.445 1.555-3.25 2.786-3.25 4.969 0 1.595.38 2.901.846 2.901.466 0 8.904-5.534 18.75-12.298zm100.09 3.124c1.272-1.196 2.314-2.884 2.314-3.75-.001-2.514-10.423-13.235-12.203-12.552-1.452.557-3.797 4.552-3.797 6.468 0 .993 9.915 12.008 10.81 12.008.308 0 1.603-.978 2.876-2.174zM267.5 474.975c3.85-2.755 10.716-7.588 15.259-10.742 7.913-5.493 10.096-8.041 8.751-10.217-.87-1.408-5.852 1.445-20.51 11.746-10.191 7.162-12.558 9.288-12.816 11.511-.453 3.897 1.24 3.48 9.316-2.298zm121.671-.63c1.006-.91 1.829-2.073 1.829-2.583 0-1.988-15.311-18.762-17.126-18.762-1.593 0-1.874.784-1.874 5.223 0 5.065.188 5.413 6.221 11.5 6.597 6.657 8.033 7.262 10.95 4.622zm183.809-7.305c1.11-2.178 2.02-4.78 2.02-5.782C575 458.8 533.973 418 531.5 418c-2.317 0-7.5 4.792-7.502 6.937-.003 1.817 43.899 46.02 45.732 46.046.676.009 2.139-1.765 3.25-3.943zm-173.514-3.003c.977-1.08 1.533-2.542 1.235-3.25-.593-1.41-10.925-13.831-19.372-23.287-5.896-6.601-7.284-6.466-7.314.712-.013 3.304 1.154 5.037 10.615 15.75 5.847 6.621 11.177 12.038 11.845 12.038.668 0 2.014-.883 2.991-1.963zm-129.27-6.136c5.668-3.904 12.417-8.516 15-10.25 4.567-3.066 6.804-6.124 6.804-9.305 0-2.305-1.371-1.534-18.436 10.366-14.66 10.222-17.516 12.938-16.07 15.28 1.061 1.715 2.087 1.223 12.703-6.09zm139.8-4.396c1.513-1.824.499-3.542-7.828-13.26-3.18-3.71-7.63-9.22-9.891-12.245-2.26-3.025-5.967-7.49-8.236-9.922-3.531-3.786-4.32-4.218-5.476-3-3.637 3.83-3.02 5.312 7.53 18.092 17.463 21.156 20.837 24.027 23.9 20.335zM278.06 437.824c17.183-11.813 18.797-13.192 23.698-20.25 2.893-4.166 4.854-7.574 4.359-7.574-.496 0-9.352 6.297-19.68 13.993-10.329 7.697-20.955 15.46-23.614 17.25-4.7 3.166-6.724 6.492-5.327 8.753.378.61 1.01.973 1.406.807.395-.167 9.017-6.007 19.158-12.98zm141.372 6.25c.958-1.059 1.59-2.627 1.405-3.485-.311-1.437-13.316-17.542-20.338-25.185-2.124-2.312-4.242-3.458-7.25-3.923-2.925-.452-4.25-.297-4.25.498 0 1.298 3.678 6.482 8.964 12.638 1.945 2.264 6.613 8.001 10.374 12.75 3.761 4.748 7.404 8.633 8.095 8.633.692 0 2.041-.867 3-1.926zm167.578-5.324c3.803-6.237 3.406-6.887-15.253-25-9.49-9.212-17.995-16.75-18.9-16.75-2.12 0-7.858 5.34-7.858 7.314 0 1.833 36.817 37.686 38.7 37.686.731 0 2.221-1.462 3.311-3.25zm122.703-21.107.215-18.858-2.215.672c-6.067 1.84-7.248-.43-3.566-6.854 2.156-3.76 2.366-5.355 2.52-19.103.092-8.25.718-17.524 1.391-20.61 1.042-4.773.985-6.314-.384-10.331-1.48-4.344-1.48-5.055.01-8.89 1.917-4.93 2.972-17.669 1.464-17.669-.558 0-1.281.84-1.607 1.868-1.126 3.548-4.432 5.534-9.294 5.584l-4.647.048-2.237 6.247c-1.23 3.436-3.384 8.386-4.787 11-3.775 7.033-5.564 12.829-6.675 21.623-1.053 8.332-1.04 8.406 5.142 28.13 1.034 3.3 1.948 8.7 2.032 12 .31 12.146 2.06 20.477 5.33 25.372 3.404 5.091 10.427 9.38 14.594 8.91l2.5-.282.214-18.857zm-446.54 14.088c4.69-3.544 30.777-21.982 40.064-28.317 6.148-4.194 6.924-5.722 3.762-7.414-2.679-1.434-3.322-1.052-23.5 13.95-9.35 6.952-19.137 14.159-21.75 16.015-3.753 2.666-4.75 3.968-4.75 6.205 0 3.622.881 3.56 6.173-.44zM429.8 433.8c2.226-2.226 1.228-4.038-7.397-13.434-7.62-8.302-8.984-9.366-12-9.366-1.872 0-3.403.496-3.403 1.101C407 414.12 425.132 435 426.884 435c.944 0 2.256-.54 2.916-1.2zm303.2-3.777c0-5.697-7.284-7.725-8.62-2.4-.827 3.294 1.204 5.377 5.242 5.377 3.08 0 3.378-.262 3.378-2.977zm18.232-1.54c10.038-4.078 14.393-9.77 10.018-13.091-2.584-1.961-4.78-1.714-14.998 1.69-8.647 2.881-11.006 4.716-8.252 6.418.55.34 1 1.866 1 3.392 0 1.526.3 3.075.667 3.441 1.299 1.3 5.451.635 11.565-1.85zM439.8 423.8c2.123-2.123 1.301-4.471-3.393-9.692-4.634-5.154-7.885-6.357-11.315-4.186-1.138.72-.768 1.725 1.927 5.235 7.485 9.75 9.984 11.44 12.781 8.643zm-172.232-10.05c4.617-3.438 12.678-9.38 17.913-13.207 5.236-3.827 9.519-7.54 9.519-8.25 0-2.583-5.21-1.202-10.793 2.859C261.41 411.737 257 415.47 257 418.196c0 2.885 1.657 2.188 10.568-4.446zm182.379-.186c2.559-3.083-2.375-7.779-6.947-6.612-3.064.782-3.078 1.098-.22 4.964 2.45 3.314 5.25 3.958 7.167 1.648zm153.815-3.274c1.244-2.234 1.997-4.755 1.672-5.6-.695-1.813-30.013-29.69-31.224-29.69-1.038 0-3.033 1.706-6.174 5.282l-2.444 2.781 12.954 13.074c13.405 13.53 20.043 19.16 21.886 18.562.587-.19 2.086-2.174 3.33-4.409zm121.81 2.945c2.035-1.393 2.41-4.332.857-6.703-2.139-3.264-4.057-3.776-7.492-2-2.179 1.127-2.937 2.236-2.937 4.294 0 1.526.54 3.314 1.2 3.974 1.319 1.319 6.676 1.597 8.373.435zM271.057 396.75c11.867-8.671 13.741-10.75 9.693-10.75-3.901 0-23.749 14.703-23.749 17.593 0 2.726 2.877 1.325 14.056-6.843zM459 404.031c0-.532-.675-.71-1.5-.393-.825.317-1.5.753-1.5.969 0 .216.675.393 1.5.393s1.5-.436 1.5-.969zM60.62 390.25c8.93-8.601 23.261-27.447 21.359-28.087-1.32-.444-27.263 10.806-28.214 12.234-.918 1.38-1.006 19.029-.098 19.936 1.186 1.187 1.942.742 6.952-4.083zm203.838-1.217c7.897-6.284 9.181-7.794 7.8-9.175-1.58-1.58-4.61-.237-10.743 4.76-5.028 4.095-6.615 6.949-4.848 8.715 1.039 1.04 1.177.963 7.791-4.3zm463.792 1.2c2.448-2.159 2.18-4.893-.767-7.84-3.302-3.302-7.987-2.967-10.764.77-5.104 6.867 4.846 12.968 11.531 7.07zm-108.8-4.577c1.402-1.84 2.55-4.108 2.55-5.04 0-1.91-20.695-23.58-24.426-25.576-2.107-1.128-2.802-1.014-5.49.9-1.694 1.206-3.372 3.36-3.73 4.786-.583 2.324.728 3.928 12.62 15.434 7.298 7.062 13.867 12.84 14.597 12.84.73 0 2.475-1.505 3.878-3.344zm-358.369-8.737c1.983-1.983 2-2.173.345-4-3.55-3.923-7.328-1.422-5.423 3.59 1.155 3.036 2.355 3.133 5.078.41zm464.491-10.228c3.308-2.845 2.68-5.993-1.643-8.228-1.61-.833-2.929-2.178-2.929-2.989 0-3.446-5.293-.463-6.96 3.923-1.486 3.905-1.305 5.338.96 7.603 2.668 2.668 7.267 2.534 10.572-.309zm21.905-3.786c14.713-4.807 18.951-10.63 12.461-17.12-2.932-2.933-3.323-3.037-9.25-2.462-5.8.563-23.142 5.886-25.053 7.69-.476.45.53 1.538 2.233 2.419 3.46 1.789 6.132 6.155 6.132 10.018 0 3.378 1.679 3.31 13.477-.545zm-107.526-2.502c1.737-1.978 3.021-4.131 2.854-4.784-.421-1.64-23.982-23.619-25.319-23.619-.594 0-2.85 1.812-5.011 4.026-3.219 3.296-3.735 4.339-2.85 5.75C611.92 345.43 632.996 364 634.848 364c1.07 0 3.367-1.619 5.104-3.597zm-206.49-9.388c9.33-2.29 21.03-5.751 26-7.691C478.184 336.017 503 322.299 503 319.258c0-.692-.42-1.258-.934-1.258-1.802 0-18.605-11.88-22.519-15.92-2.174-2.244-4.748-4.08-5.72-4.08-.973 0-3.694 1.283-6.048 2.851a9818.12 9818.12 0 0 1-10.15 6.75 3569.91 3569.91 0 0 0-10.983 7.327c-5.234 3.51-27.009 13.442-38.646 17.627-3.575 1.286-10.301 2.81-14.947 3.388-9.832 1.222-11.517 2.248-7.287 4.436 3.598 1.86 7.59 6.439 10.374 11.896l2.045 4.008 9.157-.552c5.667-.342 15.624-2.14 26.12-4.716zm-87.527-5.24c2.698-2.874 4.73-5.51 4.514-5.859-.215-.349-3.42-.944-7.12-1.323-10.143-1.04-26.59-4.363-38.184-7.718-5.696-1.647-10.537-2.816-10.756-2.596-.921.921 3.982 3.97 18.612 11.576 12.788 6.648 22.731 10.689 27.264 11.08.42.035 2.972-2.286 5.67-5.16zm317.898-10.106c5.635-5.673 6.986-7.563 5.975-8.361C667.472 325.465 640.946 312 639.65 312c-1.489 0-9.651 5.844-9.651 6.91 0 .954 24.756 24.09 25.777 24.09.425 0 4.05-3.299 8.055-7.33zm-264.316-8.053c11.967-3.398 26.52-9.388 35.603-14.653 10.001-5.798 32.21-20.45 33.68-22.22.937-1.13.637-2.782-1.421-7.837-2.479-6.087-2.584-7.079-2.123-19.906.523-14.555 2.075-20.435 7.947-30.11 1.539-2.536 2.798-5.079 2.798-5.65 0-.571 2.72-4.04 6.045-7.709 4.8-5.297 5.91-7.12 5.383-8.85-.364-1.2-4.163-13.206-8.442-26.681-11.322-35.653-13.302-42.611-17.605-61.876-2.134-9.557-4.331-17.995-4.881-18.75-1.586-2.178-14.43-3.32-50-4.446-32.826-1.04-54.945-.442-78.5 2.12-16.057 1.747-33.783 5.313-36.46 7.335-1.059.8-1.671 4.172-2.157 11.867-.803 12.741-1.187 12.482 11.58 7.823 11.849-4.324 17.436-4.769 25.637-2.04 8.468 2.818 13.966 7.731 18.378 16.425 2.836 5.587 3.364 7.796 3.77 15.77.317 6.237-.071 12.217-1.188 18.272a870.72 870.72 0 0 0-3.157 18.5c-.823 5.225-2.62 13.639-3.992 18.697-3.687 13.588-3.277 14.543 8.958 20.883 8.646 4.48 10.147 5.662 12.7 10 3.27 5.555 3.59 7.629 1.447 9.407-1.23 1.02-1.778.719-3.2-1.76-1.286-2.239-4.725-4.47-13.663-8.86-16.415-8.063-17.79-10.66-13.726-25.934 2.603-9.781 4.604-22.235 3.716-23.123-.406-.407-1.32-.305-2.029.225-.71.53-3.174 2.315-5.477 3.965a408.33 408.33 0 0 0-7.8 5.75c-1.986 1.512-4.225 2.75-4.975 2.75-3.246 0-.83-4.252 6.225-10.953 4.173-3.963 7.353-7.44 7.067-7.726-.286-.286-2.013-.028-3.837.573-1.824.602-6.72 1.145-10.88 1.207-6.058.09-8.904-.424-14.299-2.583-9.015-3.606-9.633-3.255-9.105 5.18.234 3.741.642 13.102.906 20.802.522 15.259 2.216 24.613 8.056 44.496 5.834 19.864 17.13 39.534 30.223 52.627 6.32 6.32 21.566 16.023 29.09 18.514 8.294 2.746 27.24 2.02 39.708-1.52zm-52.394-20.54c-2.072-1.281-.904-4.3 2.414-6.237 5.73-3.347 14.682-5.009 21.266-3.948 7.824 1.26 16.198 5.46 16.198 8.126 0 2.428-1.944 2.51-8 .343-2.799-1.002-8.092-1.658-14-1.736-8.175-.107-9.992.182-13.03 2.071-2.167 1.348-4.038 1.88-4.848 1.38zm11.051-17.15c-13.735-1.783-22.106-6.77-16.423-9.784 1.18-.626 4.195-.288 9.25 1.038 8.46 2.217 16.278 1.998 26.838-.753 6.991-1.821 9.624-1.002 7.553 2.35-.953 1.542-17.405 8.185-19.891 8.031-.55-.034-3.847-.431-7.327-.883zm-34.625-11.774c-.322-1.016.312-3.829 1.41-6.25 1.1-2.421 2.008-5.174 2.02-6.117.032-2.471 3.372-3.983 6.323-2.86 1.841.7 3.618.375 7.315-1.334 8.098-3.743 10.122-3.933 16.508-1.545l5.795 2.167 3.722-2.3c4.253-2.629 12.004-3.067 19.13-1.083 3.73 1.039 4.75.945 8.063-.745 2.085-1.064 4.26-1.63 4.834-1.26.573.371 1.614 3.15 2.314 6.175s1.872 6.974 2.604 8.774c2.717 6.68-.391 8.274-8.163 4.185-6.486-3.411-10.776-3.705-19.779-1.355-4.283 1.118-9.628 1.532-17.644 1.365-21.075-.438-21.455-.411-26.135 1.854-5.497 2.661-7.55 2.743-8.317.329zm49.952-40.165c-3.947-1.692-8.09-2.816-9.5-2.577-4.087.692-11-4.504-11-8.268 0-.543 1.165-2.373 2.589-4.065 2.212-2.63 3.27-3.077 7.271-3.077 4.038 0 5.627.688 11.541 5 5.708 4.161 7.58 5 11.157 5 8.764 0 10.17-6.53 2.942-13.657-4.98-4.91-5.202-5.498-2.929-7.772 2.108-2.107 2.386-2.048 7.27 1.544 7.45 5.478 9.768 12.822 6.571 20.813-3.843 9.605-13.704 12.29-25.912 7.059zm29.807-38.65c-16.872-14.035-21.936-20.614-21.035-27.33.43-3.2.01-4.59-2.363-7.816-1.587-2.158-3.003-4.996-3.147-6.307-.232-2.11.142-2.384 3.265-2.384 1.94 0 4.64-.718 6-1.596 6.007-3.877 20.384-9.81 25.202-10.402 7.918-.971 28.355 3.825 38.978 9.148 5.456 2.735 15.876 10.602 15.507 11.71-.833 2.503-4.535 1.582-16.602-4.13-17.648-8.352-26.24-10.674-36.373-9.829-5.441.454-9.468 1.441-12.834 3.147-6.425 3.256-6.255 4.645.345 2.818 9-2.492 23.707-2.922 30.9-.904 8.356 2.345 34.624 15.248 35.902 17.636.697 1.301.684 2.526-.04 3.88-1.756 3.282-4.827 4.3-10.907 3.62-4.552-.511-6.262-.254-9.105 1.369-7.535 4.301-11.937 5.971-20.244 7.681-7.324 1.508-9.665 1.603-15.386.623-3.71-.636-7.157-.903-7.658-.593-.5.31 1.671 3.172 4.827 6.361 3.85 3.89 5.538 6.319 5.13 7.38-1.03 2.687-3.299 1.794-10.362-4.081zM415 181.298c-2.839-1.034-6.904-5.583-7.528-8.426-.766-3.486-2.261-4.585-3.136-2.304-1.515 3.947 5.19 11.41 10.164 11.314 1.409-.027 1.557-.2.5-.585zm-13.566-2.547c-2.291-7.355-2.55-7.565-6.887-5.59-3.434 1.565-3.205 3.468.703 5.851 4.539 2.767 7.094 2.66 6.184-.261zm22.45.62c2.93-2.054 6.596-10.078 4.204-9.203-1.21.442-8.157 10.833-7.243 10.833.39 0 1.758-.734 3.038-1.63zm16.062-1.215c4.486-2.155 4.817-3.596 1.17-5.107-4.135-1.713-6.21-1.05-8.388 2.678-3.218 5.51-.854 6.306 7.218 2.43zM455 144.41c-5.666-2.523-17.968-6.4-25.5-8.038-15.041-3.269-29.212-2.03-43.189 3.778-8.546 3.55-13.635 3.588-14.13.103-.716-5.037 8.246-12.114 21.373-16.88 12.178-4.42 36.075-2.135 48.024 4.592 12.723 7.163 22.545 14.16 22.228 15.833-.43 2.27-4.452 2.55-8.806.612zM702.21 315.75c1.806-1.418 5.18-12.311 4.269-13.784-.847-1.37-4.045-1.197-5.255.284-1.103 1.351-4.224 11.276-4.224 13.431 0 1.67 3.118 1.711 5.21.069zM316.802 182.602c3.436-1.776 5.777-4.365 7.104-7.854 1.637-4.307-1.139-3.506-4.275 1.233-4.535 6.853-11.17 6.742-14.815-.247-2.63-5.041-3.753-2.911-1.415 2.684 2.194 5.25 7.896 7.031 13.401 4.184zm15.505-2.52c5.399-2.314 6.394-3.636 3.787-5.032-3.5-1.872-6.03-1.204-8.057 2.13-1.063 1.748-1.705 3.548-1.426 4 .67 1.084.555 1.106 5.696-1.097zM296 176.5c0-1.833-.533-2.5-2-2.5-3.52 0-2.367 4.54 1.25 4.921.412.043.75-1.046.75-2.421zm-.5-15.387c9.446-4.345 22.539-3.98 36.382 1.015 2.96 1.068 5.592 1.731 5.85 1.474 1.777-1.778-7.177-6.358-17.901-9.158-10.296-2.688-27.232.185-30.501 5.175-1.38 2.108-1.03 4.95.512 4.14.362-.19 2.908-1.38 5.658-2.646zm46.017-5.14c.35-.565-.287-2.928-1.414-5.25-3.353-6.91-15.348-12.861-26.103-12.95-12.682-.107-28.855 8.082-25.041 12.677.902 1.087 2.205.97 7.32-.662 12.915-4.12 29.17-2.346 38.892 4.242 4.789 3.245 5.421 3.439 6.346 1.943zM307 67.482c7.425-.851 18.9-2.095 25.5-2.765 11.91-1.208 12.002-1.237 12.309-3.889.17-1.47-1.32-7.994-3.31-14.5C337.804 34.26 329.56 8.714 327.756 3.75 326.76 1.006 326.736 1 316.997 1h-9.76l5.906 17.75c3.247 9.762 6.179 19.651 6.513 21.974.558 3.873.394 4.306-1.965 5.203-1.416.539-5.905 1.28-9.977 1.65-7.242.656-7.462.608-10.093-2.203-1.479-1.58-3.867-4.899-5.307-7.374-1.44-2.475-5.397-8.775-8.794-14a8699.386 8699.386 0 0 1-10.538-16.25L268.62 1H257.34c-13.131 0-12.788-.78-4.898 11.138 19.42 29.331 37.138 55.476 38.016 56.097 1.408.993 1.226 1.002 16.541-.753zM175.598 1248.75c1.323-2.31 13.086-21.129 22.033-35.25 4.88-7.7 9.77-15.747 10.87-17.882 2.77-5.382 7.197-9.618 10.048-9.618 3.112 0 20.476 4.408 23.284 5.91 1.603.858 2.167 2.092 2.167 4.74 0 3.681-3.255 18.299-7.446 33.443-1.308 4.726-2.97 11.139-3.694 14.25l-1.315 5.657h-28.331c-22.38 0-28.182-.263-27.616-1.25zM295 1247.64c0-1.3.908-7.037 2.018-12.75 1.11-5.715 2.45-12.865 2.98-15.89 2.552-14.584 3.216-17.043 4.824-17.87 1.69-.871 10.091-.148 24.178 2.08 4.125.651 16.5 1.218 27.5 1.26 13.429.05 20.69.463 22.102 1.258 2.122 1.195 2.66 2.7 11.648 32.522l3.54 11.75H295v-2.36zm160.724-1.89c-.85-2.337-2.969-8.075-4.706-12.75-1.738-4.675-4.564-12.676-6.281-17.78-3.084-9.167-3.099-9.301-1.18-11.09 1.069-.996 4.418-2.382 7.443-3.08 15.398-3.558 15.242-3.59 20.46 4.229a772.663 772.663 0 0 0 8.037 11.721c2.504 3.575 6.559 9.425 9.01 13a867.236 867.236 0 0 0 8.033 11.5c6.716 9.389 8.48 8.5-16.869 8.5h-22.4l-1.547-4.25zM527.58 61.969c-6.006-1.584-11.6-3.56-12.43-4.39-1.347-1.348-1.014-3.108 3.081-16.295 2.526-8.131 6.043-19.734 7.817-25.784 1.773-6.05 3.61-11.751 4.08-12.67.558-1.088.424-1.843-.386-2.17-.683-.276 11.747-.538 27.623-.581L586.23 0l-1.467 2.25c-3.667 5.626-14.023 22.156-19.576 31.25-6.061 9.927-11.889 18.735-17.73 26.8-3.836 5.297-5.568 5.442-19.877 1.669zm-83.858-13.58c-1.016-1.016-42.644-4.44-51.258-4.216-4.42.115-8.517-.088-9.105-.451-1.313-.812-4.809-10.461-6.238-17.222-.582-2.75-2.37-9.837-3.975-15.75L370.228 0h47.993c37.972 0 47.897.261 47.535 1.25-.252.688-2.83 11.06-5.727 23.048-2.898 11.99-5.922 22.452-6.72 23.25-1.427 1.427-8.39 2.038-9.587.841zM355.75.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm9.52.058c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525z\",\n    style: {\n      fill: \"#e2d200\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.16018 0 0 .15833 22.527 22.739)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M120.129 1247.75c1.468-2.755 28.246-42.316 38.412-56.75 9.3-13.204 22.944-33.177 31.67-46.36 3.69-5.577 7.963-11.145 9.495-12.373l2.785-2.233-2.858-11.267c-3.79-14.936-9.547-33.694-16.334-53.216-8.842-25.432-24.277-61.05-29.274-67.551l-1.921-2.5-4.802 1.818c-13.089 4.955-18.244 4.616-27.027-1.775-7.2-5.24-10.286-10.805-11.01-19.857-.606-7.57 1.37-14.843 5.77-21.238 2.956-4.295 3.05-4.697 1.503-6.406-.907-1.002-4.212-3.195-7.344-4.873-3.132-1.678-7.26-4.214-9.174-5.636-1.913-1.422-6.585-3.51-10.382-4.64-8.35-2.488-8.5-2.39-12.562 8.176-9.327 24.258-9.258 24.162-16.663 23.292l-5.293-.622-.31 4.88c-.17 2.685-.185 18.962-.032 36.173.253 28.559.428 31.345 2 31.902 6.184 2.191 25.821 11.628 30.725 14.765 20.13 12.877 40.084 35.203 54.288 60.741 9.9 17.8 16.156 36.749 13.28 40.215-1.564 1.883-3.11 1.248-11.071-4.55-8.482-6.178-18.955-12.08-38-21.414-17.072-8.367-44.825-18.726-48.9-18.253l-2.6.302-.175 31.954-.175 31.955-8.325 7.492c-4.579 4.12-11.925 11.079-16.325 15.463C14.806 1210.004 1.959 1222 .974 1222c-.536 0-.974-1.39-.974-3.089 0-2.71 2.95-5.992 24.033-26.75l24.034-23.661-.1-30.816c-.093-29.06-.209-30.926-2.033-32.75-1.064-1.064-3.244-1.934-4.845-1.934-2.862 0-2.918.106-3.311 6.25-.22 3.438.045 15.25.588 26.25.544 11 .652 21.35.24 23-.51 2.04-6.801 9.077-19.67 22l-18.922 19-.007-54.259L0 1090.983l5.75.569c18.795 1.86 55.747 9.397 70.315 14.342 19.83 6.732 38.122 15.457 58.174 27.749 9.626 5.9 13.329 6.84 12.24 3.107-.362-1.238-3.35-7.773-6.64-14.523-16.615-34.09-39.269-58.446-67.021-72.056-17.58-8.622-32.98-13.466-54.177-17.043-9.823-1.657-18.037-3.19-18.253-3.407-.216-.216-.28-92.154-.14-204.307L.5 621.5l2.681 8A890.216 890.216 0 0 0 8.564 645c2.436 6.765 2.706 8.873 2.748 21.5.042 12.907-.21 14.897-3.243 25.5-4.111 14.374-6.892 29.777-6.575 36.42.37 7.757 2.44 22.276 3.612 25.343 1.59 4.16 4.987 22.679 5.912 32.237.485 5.003.406 13.364-.192 20.322-.558 6.502-.821 12.016-.584 12.253.758.758 9.69-.803 11.213-1.96 1.996-1.516 3.757-13.146 3.683-24.329-.066-10.146-2.057-22.315-5.58-34.105-3.826-12.805-4.89-21.031-4.314-33.338.44-9.42 1.128-13.124 4.048-21.843 4.953-14.785 5.978-20.744 6.019-35 .041-14.56-1.649-23.864-7.327-40.333-6.321-18.336-5.792-34.636 1.84-56.667l4.676-13.5-.122-13.5c-.13-14.419-.285-15.213-8.201-42.23-7.194-24.551-6.458-39.805 2.972-61.566 3.767-8.694 5.947-18.623 6.532-29.75.644-12.264-.528-18.187-5.62-28.402C18.54 379 16.273 372.675 15.025 368c-3.01-11.27-2.39-23.14 2.513-48 2.006-10.175 3.873-22.55 4.15-27.5l.5-9-5.472-5.347c-8.17-7.98-8.67-7.473-9.21 9.347-.346 10.754-1.244 17.826-3.875 30.5L.204 334.5l-.102-39.313L0 255.873l16.96 15.678c11.701 10.816 17.26 16.65 17.925 18.813.601 1.955 1.218 101.398 1.638 264.136.371 143.55.91 261.383 1.198 261.852.288.469 2.102 1.512 4.033 2.318 2.588 1.082 3.803 1.173 4.628.348.82-.82 1.028-72.126.782-267.818-.28-221.578-.565-267.038-1.684-268.7-2.107-3.126-18.938-19.753-37.73-37.27C.577 238.544 0 237.708 0 234.003 0 231.8.38 230 .844 230c.464 0 5.751 4.775 11.75 10.611 5.998 5.837 17.31 16.704 25.136 24.15 7.827 7.447 14.56 14.484 14.964 15.639.403 1.155.59 20.438.415 42.85L52.79 364h2.155c1.185 0 3.37-.626 4.855-1.39 1.485-.765 9.9-4.32 18.7-7.899 16.544-6.728 24.388-10.34 57.5-26.472 10.725-5.225 25.575-12.312 33-15.749 16.465-7.621 52.397-25.466 58.613-29.11 4.111-2.408 4.458-2.9 3.71-5.268-.452-1.437-.823-7.353-.823-13.147 0-10.451.028-10.574 3.529-15.5 4.704-6.618 10.333-9.465 18.715-9.465 3.476 0 7.768.606 9.538 1.347C265.776 242.81 273 250.2 273 252.312c0 .718.62 2.155 1.38 3.193 1.295 1.771 1.506 1.638 3.458-2.188 1.144-2.242 2.589-6.942 3.211-10.446.623-3.504 1.541-8.396 2.041-10.871.5-2.475 1.19-7.026 1.536-10.113.809-7.24-.73-8.43-4.689-3.627-3.901 4.733-10.605 7.745-17.176 7.718-12.957-.054-21.76-9.838-18.788-20.879 1.734-6.439 5.128-9.099 11.608-9.099 2.909 0 6.44.437 7.845.972 4.858 1.847 6.469-.017 11.089-12.825 4.466-12.38 7.597-35.83 7.831-58.647l.154-15-3.943-6c-3.683-5.604-16.884-21.788-30.997-38-3.352-3.85-7.886-9.213-10.077-11.917-8.32-10.272-26.315-32.61-34.483-42.807C198.325 5.939 193.6.963 192.5.718c-1.1-.245 34.225-.506 78.5-.58l80.5-.134.222 3.156c.122 1.736.855 5.223 1.627 7.748 2.204 7.202 3.375 11.435 8.049 29.092 5.734 21.664 5.785 21.781 9.807 22.398 3.125.48 34.908 1.968 41.295 1.935 1.65-.01 9.248.589 16.884 1.328 24.562 2.379 39.213 2.833 39.82 1.235.737-1.937 11.077-44.155 13.874-56.646L485.374 0l21.563.21c11.86.114 17.212.355 11.895.535l-9.668.325-.698 4.215c-.384 2.318-1.062 4.91-1.507 5.759-.445.849-3.767 11.874-7.382 24.5-3.615 12.626-7.25 25.246-8.075 28.044-1.68 5.688-1.875 8.063-.724 8.775.428.264 10.44 3.035 22.25 6.157s24.813 6.562 28.896 7.643c8.284 2.195 11.39 1.864 13.445-1.429 1.795-2.878 23.828-36.954 33.126-51.234 3.939-6.05 9.54-14.971 12.446-19.825 2.906-4.853 6.246-9.931 7.421-11.284l2.138-2.46 18.765.285L648.03.5l-6.563 9.5c-3.61 5.225-12.922 19.4-20.694 31.5-11.867 18.476-21.083 31.993-34.77 51-10.08 13.998-17.497 24.704-19.652 28.364l-2.57 4.364 3.231 12.636c5.155 20.16 8.823 32.504 12.91 43.44a3071.254 3071.254 0 0 1 8.522 23.196c9.212 25.414 23.08 56.5 25.206 56.5.709 0 3.002-.893 5.096-1.985 2.094-1.091 6.756-2.712 10.36-3.601 6.394-1.578 6.677-1.563 11.76.624 10.219 4.396 16.159 14.495 16.112 27.393-.026 7.185-2.21 12.468-7.364 17.821-1.988 2.064-3.614 4.15-3.614 4.635 0 1.338 3.593 3.45 21.749 12.786l16.645 8.558 1.816-2.242c.998-1.233 2.098-3.422 2.443-4.865.345-1.443 1.311-3.974 2.147-5.624.836-1.65 2.33-6.15 3.32-10 2.258-8.78 4.517-10.932 10.529-10.03 3.642.546 4.382.34 5.36-1.488 1.071-2 1.217-51.834.198-67.084l-.375-5.602-8.166-4.329c-19.76-10.473-35.921-22.423-50.214-37.129-12.796-13.166-18.564-21.157-26.949-37.338-10.478-20.22-13.616-31.244-9.939-34.921 1.419-1.419 1.86-1.412 4.75.073 1.752.9 5.661 3.296 8.686 5.324 7.348 4.927 29.787 17.062 38.5 20.82 17.892 7.72 40.212 14.912 42.98 13.85 1.447-.555 1.603-3.72 1.46-29.64l-.162-29.018 3.778-4.244c10.491-11.784 46.058-49.002 47.634-49.846 1.604-.858 1.81-.52 1.81 2.968 0 3.627-.844 4.834-10.75 15.386-21.133 22.509-31.784 34.136-34 37.113-2.209 2.968-2.25 3.535-2.235 31.08.008 15.43.346 28.544.75 29.143 1.131 1.674 5.477 2.456 6.933 1.248 1.01-.839 1.304-7.156 1.31-28.208l.009-27.128 18.94-19.5 18.939-19.5.052 53.25L764 163h-4.833c-2.659 0-7.271-.428-10.25-.95-2.98-.524-11.042-1.93-17.917-3.124-15.417-2.679-38.73-9.543-54-15.9-6.325-2.633-13.525-5.552-16-6.487-4.808-1.816-25.383-12.804-33.253-17.759-5.069-3.191-7.747-3.12-7.747.204 0 3.076 10.981 24.367 17.82 34.55 15.922 23.708 42.891 45.411 73.505 59.152 13.794 6.191 22.469 8.773 34.675 10.318 4.675.592 10.637 1.346 13.25 1.675l4.75.6v71.932c0 65.393-.143 71.789-1.571 70.36-.865-.864-1.877-1.578-2.25-1.587-.374-.009-5.854 1.613-12.179 3.604-19.292 6.07-18.672 5.65-14.5 9.821 1.849 1.85 2.5 3.562 2.5 6.577 0 2.46.525 4.278 1.324 4.585.728.28 5.115-.69 9.75-2.153 6.741-2.128 9.276-3.51 12.676-6.907l4.25-4.248-.079 10.119c-.043 5.565-.34 9.451-.66 8.636-1.955-4.978-5.091-5.095-17.082-.637-5 1.859-10.687 3.68-12.636 4.045-3.925.736-4.15 1.187-2.011 4.015.807 1.068 1.468 3.15 1.468 4.628 0 4.596 2.196 5.482 8.935 3.609 9.911-2.756 16.44-5.528 19.315-8.201l2.75-2.558v602.304l-11.227-10.362c-6.175-5.698-14.981-13.961-19.57-18.361l-8.343-8 .135-66c.423-206.706.992-361.291 1.501-407.5l.578-52.5-4.992-5.227c-2.746-2.874-5.231-4.84-5.523-4.369-.735 1.19-1.385 540.781-.652 541.853.326.478 8.018 7.568 17.093 15.757s18.171 16.53 20.214 18.534c2.043 2.005 5.303 4.727 7.243 6.049 3.21 2.186 3.53 2.836 3.536 7.188.01 6.028-.51 5.8-11.855-5.206-4.6-4.462-15.713-14.913-24.697-23.224-9.367-8.665-16.75-16.301-17.308-17.902-.6-1.722-.758-15.576-.412-36.166.597-35.503.116-44.787-2.318-44.787-.8 0-4.6 1.585-8.446 3.522-3.847 1.937-9.123 4.37-11.725 5.407-2.603 1.038-12.288 5.528-21.524 9.979-9.236 4.45-16.984 8.092-17.218 8.092-.235 0-8.653 4-18.708 8.887-28.264 13.74-58.756 28.11-64.282 30.295-7.751 3.065-32.68 16.124-33.158 17.37-.235.612 0 3.018.524 5.347 1.266 5.634-.405 17.485-3.157 22.395-2.695 4.808-9.598 9.417-15.41 10.289-7.857 1.178-16.278-2.635-21.047-9.53-1.514-2.187-3.305-3.994-3.982-4.015-1.967-.061-5.08 7.11-7.673 17.672-2.614 10.646-4.687 26.336-3.64 27.545.359.415 2.8-1.732 5.425-4.772 6.546-7.583 13.13-10.893 21.763-10.944 7.29-.043 9.16.983 12.938 7.096 3.084 4.989 2.888 10.357-.559 15.33-4.042 5.833-7.53 7.424-14.644 6.68-5.653-.59-5.777-.548-7.749 2.642-5.705 9.232-15.022 59.689-13.985 75.746.483 7.495.763 7.946 15.854 25.534 5.225 6.09 20.75 24.292 34.5 40.45 13.75 16.16 27.608 32.284 30.796 35.833 9.93 11.057 11.318 10.15-15.527 10.15h-23.301l-3.484-5.11a762.67 762.67 0 0 1-5.984-8.92c-3.356-5.111-16.057-23.055-25.462-35.97-4.206-5.775-9.084-12.625-10.842-15.222-1.758-2.597-3.766-4.948-4.462-5.225-.696-.276-6.546.437-13 1.586-6.454 1.148-18.638 3.09-27.075 4.313-9.051 1.313-15.66 2.741-16.12 3.484-.46.745 3.654 12.95 10.084 29.912 5.974 15.758 10.865 29.215 10.87 29.902.005.936-3.223 1.25-12.83 1.25h-12.838l-1.612-5.25c-.887-2.887-3.476-11.775-5.755-19.75-8.75-30.628-9.895-33.913-12.395-35.55-1.9-1.246-4.974-1.513-15.222-1.322-21.265.396-52.034-1.587-78.791-5.077-4.227-.551-7.628-.544-8.679.018-2.034 1.088-2.404 2.835-7.828 36.93-2.232 14.026-4.288 26.513-4.57 27.75-.499 2.198-.83 2.25-13.992 2.25-7.415 0-13.481-.232-13.481-.518 0-.285.935-3.997 2.077-8.25 7.198-26.79 14.846-58.897 14.38-60.365-.585-1.844-1.247-2.04-14.654-4.322-8.468-1.441-39.54-8.285-40.715-8.968-1.553-.902-4.786 1.596-6.557 5.066-1.083 2.122-3.801 6.558-6.04 9.858-2.24 3.3-7.939 12.075-12.666 19.5-21.183 33.27-27.889 43.65-29.547 45.74-1.721 2.168-2.346 2.24-19.563 2.25l-17.785.01 1.199-2.25zm-100.227-73.255c4.5-4.209 4.9-4.996 6.09-11.953 1.651-9.647.706-20.542-3.125-36.042-2.258-9.136-2.894-13.79-2.666-19.5l.299-7.5-5.393-.914c-4.733-.803-5.56-.688-6.75.94-1.522 2.082-1.765 12.593-.438 18.974.457 2.2 1.787 8.46 2.956 13.91 2.412 11.247 2.821 27.08.961 37.175-.927 5.033-.902 6.63.123 7.865 1.891 2.28 2.647 1.998 7.943-2.955zM400 1155.527c9.075-.225 19.65-.884 23.5-1.466 3.85-.581 11.5-1.495 17-2.03 25.057-2.441 31.056-3.321 32.75-4.806 1.455-1.276 1.75-3.279 1.75-11.88 0-8.24-.287-10.345-1.411-10.345-.777 0-5.13 1.591-9.673 3.536-6.74 2.885-9.564 3.55-15.338 3.61-7.53.08-15.75-2.235-22.286-6.274-4.408-2.725-9.904-11.214-11.354-17.538-1.62-7.06.607-31.052 3.975-42.834.471-1.65 1.41-5.7 2.086-9 .676-3.3 1.831-8.025 2.567-10.5 2.484-8.35 3.595-16.83 2.48-18.916-.62-1.157-3.35-2.612-6.763-3.604-11.44-3.326-17.283-8.325-17.283-14.789 0-3.676 1.237-3.968 5.012-1.182 3.677 2.713 6.736 3.816 15.248 5.498 3.384.67 6.994 2.177 8.75 3.655 2.627 2.21 2.99 3.159 2.99 7.815 0 2.915-1.167 9.287-2.594 14.161-5.112 17.464-6.363 23.362-4.953 23.362 1.247 0 5.547-2.425 5.547-3.128 0-1.603 10.984-9.092 12.488-8.515 2.71 1.04 1.614 3.108-4.488 8.48-3.3 2.904-6 5.592-6 5.972 0 .38 5.287.554 11.75.387 9.37-.242 13.16.097 18.716 1.676 3.831 1.089 7.368 1.73 7.86 1.427 1.183-.732.02-16.572-2.408-32.799-6.015-40.183-11.573-57.165-24.665-75.364-14.516-20.18-26.033-28.433-44.115-31.612-15.508-2.726-40.245 1.518-62.936 10.799-9.947 4.068-31.15 17.189-39.93 24.71l-4.125 3.533 2.926 9.845c6.575 22.114 1.401 41.594-15.862 59.728l-4.417 4.638 5.996 19.362c3.298 10.648 8.796 31.061 12.218 45.361 3.423 14.3 7.24 30.245 8.484 35.432 1.728 7.21 2.723 9.603 4.221 10.158 1.657.613 27.562 3.083 44.787 4.271 2.75.19 10.85.172 18-.04 7.15-.213 20.425-.57 29.5-.795zm-61.5-24.962c-17.898-3.556-37.071-13.555-36.304-18.932.41-2.88 2.856-2.595 15.71 1.838 5.724 1.973 13.709 4.079 17.744 4.679 10.003 1.488 25.49-.264 40.74-4.608 12.667-3.608 15.843-3.533 17.092.4 1.716 5.408-3.85 10.588-15.546 14.47-10.367 3.44-28.086 4.408-39.436 2.153zm-4-17.518c-4.966-1.239-9.631-3.5-17-8.242-7.593-4.887-18.5-14.622-18.5-16.513 0-2.31 2.238-2.492 5.055-.41 1.575 1.165 3.173 2.118 3.55 2.118.379 0 2.878 2.049 5.554 4.552 2.734 2.557 8.667 6.376 13.535 8.712 8.297 3.98 9.076 4.159 18.237 4.168 8.522.01 10.444-.349 17.569-3.262 14.864-6.076 15.828-9.04 1.35-4.145-8.662 2.928-10.122 3.13-19.85 2.75-10.364-.406-10.636-.48-20.997-5.72-10.208-5.163-22.865-14.37-25.695-18.689-1.22-1.862-1.185-2.347.276-3.807.92-.92 2.297-1.435 3.058-1.143.76.292 4.218.821 7.682 1.176 5.609.575 7.06.315 13.238-2.373 10.166-4.424 17.195-5.584 29.363-4.848l10.426.631-2.426-2.6c-1.334-1.43-5.238-4.844-8.675-7.587-6.2-4.948-7.761-8.021-4.674-9.206 2.498-.958 9.833 3.969 20.096 13.5 13 12.073 16.306 16.39 16.318 21.308.006 2.583 1.202 6.085 3.51 10.284 4.624 8.412 4.587 9.659-.258 8.84-3.08-.52-5.3.077-12.293 3.308-16.168 7.47-28.274 9.736-38.449 7.198zm3.147-28.797c2.338-5.677 5.169-8.25 9.075-8.25 3.954 0 7.577 3.346 9.31 8.597 1.064 3.225 3.993 4.823 3.946 2.153-.056-3.195-4.145-9.881-7.17-11.726-3.598-2.193-8.812-2.627-11.875-.988-2.053 1.099-6.933 9.848-6.933 12.43 0 2.836 2.089 1.566 3.647-2.216zm-7.278-3.802c1.028-2.499 1.595-4.818 1.26-5.152-.61-.61-8.025 2.26-10.379 4.016-1.908 1.424-1.496 3.264 1 4.467 4.483 2.162 6.14 1.483 8.119-3.33zM371 1081.62c0-1.875-3.03-4.347-6.344-5.174l-2.844-.71 1.719 3.382c2.725 5.362 3.43 5.973 5.574 4.826 1.042-.558 1.895-1.604 1.895-2.324zm-4.724-40.397c-3.875-3.273-6.61-9.43-5.808-13.077.7-3.188 6.855-9.938 10.232-11.222 4.036-1.534 11.64-1.046 17.893 1.15 4.613 1.62 7.266 1.944 12.11 1.477 5.48-.528 6.324-.37 7.25 1.36 1.592 2.976 1.266 5.541-1.084 8.529-4.262 5.418-9.284 5.187-23.134-1.062-8.033-3.625-10.428-3.728-13.985-.605-2.53 2.222-2.167 4.82 1.36 9.73 4.704 6.55 1.466 9.042-4.834 3.72zm-2.025-42.473c-.546-.688-2.11-4.625-3.476-8.75-1.365-4.125-2.82-8.284-3.232-9.242-1.333-3.093 2.236-3.197 8.088-.236 7.718 3.905 12.873 4.119 25.69 1.065 10.803-2.574 10.836-2.576 20.642-.947 11.254 1.869 13.653 1.514 18.49-2.733 1.92-1.686 4.29-2.903 5.269-2.705 1.588.32 1.743 1.423 1.451 10.328-.18 5.484-.717 10.372-1.194 10.864-.509.524-2.123.375-3.9-.362-3.409-1.411-7.563-1.004-13.83 1.357-4.008 1.51-4.551 1.488-9.5-.394l-5.249-1.996-2.854 2.107c-2.47 1.825-3.748 2.028-9.5 1.515-21.253-1.896-20.678-1.89-22.062-.222-1.594 1.92-3.477 2.057-4.833.351zm13.999-22.413c-3.035-1.223-1.058-4.162 5-7.433 5.838-3.152 6.876-3.375 15.75-3.389 10.507-.017 20.74 2.435 23.667 5.67 1.556 1.72 1.565 2.012.102 3.474-1.462 1.463-2.203 1.46-8.805-.031-11.01-2.486-23.352-1.864-32.964 1.663-.825.303-2.063.324-2.75.046zm19.25-15.999c-4.773-.691-15.703-4.406-19.25-6.543-1.972-1.188-3.25-2.764-3.25-4.007 0-1.833.446-1.988 4.25-1.472 2.337.317 7.561 1.492 11.608 2.61 6.062 1.676 8.468 1.878 13.648 1.144 3.46-.49 7.206-1.38 8.326-1.98 1.12-.6 3.221-1.09 4.669-1.09 2.281 0 2.59.366 2.315 2.75-.582 5.061-13.184 9.91-22.316 8.588zm-99.576 191.253c1.66-2-.429-17.3-4.45-32.591-.795-3.025-2.385-9.522-3.533-14.437-8.626-36.948-30.78-101.52-44.108-128.563-9.239-18.745-20.87-37.968-23.933-39.552-3.553-1.837-5.9-1.85-5.9-.03 0 .779 2.084 4.941 4.631 9.25 16.697 28.238 37.737 80.095 48.713 120.06 8.249 30.034 10.97 40.654 13.695 53.438 3.11 14.593 5.68 25.937 6.588 29.078 1.231 4.26 5.957 6.167 8.297 3.347zm-13.104-3.994c.175-2.147-.367-6.647-1.206-10-.84-3.353-2.922-12.847-4.629-21.097-2.8-13.533-10.157-41.038-18.188-68-9.276-31.14-31.955-83.16-45.632-104.668-5.443-8.559-11.203-13.832-15.109-13.832-1.616 0-3.215.448-3.554.996-.338.548 3.282 6.934 8.045 14.19C211.316 955.5 229 989.02 229 991.537c0 .27 2.476 6.371 5.503 13.56 8.924 21.197 19.711 54.523 29.571 91.356 2.474 9.244 11.926 50.4 11.926 51.93 0 1.558 3.644 3.681 5.876 3.422 2.266-.262 2.668-.837 2.944-4.207zm-13.986.103c2.886-3.477-14.786-73.451-28.34-112.215-13.999-40.037-31.356-75.98-45.941-95.133C191.757 934.055 183.85 929 178.796 929c-5.671 0-4.91 2.242 3.537 10.409 14.64 14.156 20.383 24.717 44.286 81.445 7.27 17.255 21.286 61.775 25.862 82.146 1.116 4.973 8.055 32.054 10.551 41.18 1.192 4.358 5.495 6.3 7.802 3.52zm-13.167-3.275c.332-.866-.126-4.128-1.018-7.25-.892-3.121-2.989-12.103-4.66-19.96-4.408-20.74-6.519-29.251-9.807-39.553-1.609-5.04-4.624-14.787-6.7-21.662-5.266-17.433-21.188-57.87-30.516-77.5-5.102-10.738-15.957-26.847-22.787-33.816-10.589-10.805-19.966-15.188-27.929-13.054-4.008 1.074-2.419 3.378 4.456 6.463 14.012 6.286 31.976 29.22 44.527 56.843 1.64 3.61 3.343 7.689 3.784 9.064.441 1.375 2.898 7.9 5.459 14.5 6.916 17.82 10.056 26.808 14.547 41.634 2.227 7.351 5.352 17.641 6.946 22.866 5.441 17.843 11.05 39.757 14.528 56.76.366 1.793 1.337 3.93 2.156 4.75 1.96 1.96 6.25 1.908 7.014-.085zm-13.283-2.984c.33-.857.131-3.67-.44-6.25-2.28-10.302-6.073-25.965-7.433-30.691-.792-2.75-2.838-10.175-4.549-16.5-6.401-23.675-19.203-60.562-29.845-86-7.423-17.742-22.605-42.578-31.165-50.983-4.837-4.75-14.004-10.064-20.075-11.639-6.17-1.6-12.377-.073-12.377 3.047 0 1.523 1.223 2.195 5.95 3.268 14.347 3.259 27.422 15.813 37.384 35.898 11.832 23.856 30.495 69.545 34.682 84.909.75 2.75 2.756 9.725 4.458 15.5 1.702 5.775 4.236 14.775 5.631 20 1.395 5.225 3.44 12.875 4.545 17a902.201 902.201 0 0 1 3.821 14.874c.997 4.056 2.424 7.762 3.171 8.235 2.186 1.385 5.594 1.02 6.242-.668zm-12.973-2.296c.29-.47-.12-3.508-.911-6.75a2871.37 2871.37 0 0 1-4.028-16.872c-1.424-6.038-3.952-15.488-5.619-21-1.667-5.513-4.53-14.973-6.361-21.023-8.645-28.556-18.787-54.588-31.556-81-10.598-21.92-18.457-32.68-27.936-38.244-4.563-2.679-14.88-5.256-21.043-5.256-4.267 0-5.548.542-10.17 4.303-14.589 11.874-12.245 35.143 3.994 39.653 11.29 3.135 20.098-.288 24.329-9.456 5.046-10.934-1.284-20.826-13.355-20.868-3.873-.014-5.294.51-7.737 2.85-6.94 6.65-4.12 14.518 5.203 14.518 4.365 0 5.05-.311 6.576-2.994.936-1.646 2.055-2.996 2.484-3 1.862-.015 1.748 3.21-.226 6.405-3.922 6.346-12.129 6.766-18.217.934-3.759-3.602-4.404-7.726-2.154-13.785 1.485-4 2.628-5.328 6.225-7.23 5.656-2.991 10.457-2.949 16.67.147 9.624 4.796 14.613 11.932 29.389 42.034 4.322 8.807 8.748 18.257 9.834 21 1.087 2.744 3.567 8.949 5.51 13.789 6.48 16.13 20.851 61.8 24.764 78.7 3.507 15.15 6.092 22.879 7.805 23.336 2.899.774 5.99.683 6.53-.191zm-14.714-4.797c.851-2.22-7.653-35.774-14.409-56.848-9.958-31.066-15.718-45.713-29.979-76.243-3.856-8.254-11.435-21.257-12.39-21.257-1.287 0-3.923 5.554-3.893 8.2.015 1.265 1.82 5.675 4.014 9.8 7.537 14.177 19.498 42.36 28.433 67 3.474 9.577 13.086 41.591 16.922 56.359 1.837 7.072 3.962 13.253 4.722 13.735 2.268 1.436 5.9 1.024 6.58-.746zm246.558-18.345c3.6-1.112 7.637-3.168 9.106-4.637 2.308-2.308 2.639-3.45 2.639-9.107v-6.47l-3.75.484c-2.063.266-7.8 1.259-12.75 2.206-9.185 1.758-13.622 1.42-21.7-1.653-5.356-2.037-5.17 0 .23 2.531 7.697 3.602 17.497 4.394 27.322 2.208 4.194-.933 8.061-1.428 8.593-1.099 1.865 1.152-.103 3.287-5.437 5.899-4.605 2.255-6.685 2.635-14.408 2.635-10.934 0-16.94-1.995-25.58-8.499-3.29-2.476-6.363-4.501-6.83-4.501-1.064 0 .106 5.628 1.9 9.143 1.757 3.44 9.704 9.213 15.41 11.197 6.388 2.22 17.452 2.073 25.255-.337zm18.546-31.253c.626-1.238 2.31-6.525 3.741-11.75 2.629-9.592 7.175-18.243 10.532-20.04 1.298-.694 2.819-.502 5.268.666 3.24 1.545 3.666 1.53 7.236-.242 2.086-1.036 4.646-3.052 5.688-4.48 2.742-3.757.985-10.143-3.278-11.909-4.673-1.935-13.156-.812-17.982 2.382-10.803 7.15-17.203 26.698-14.364 43.873.71 4.302 1.541 4.696 3.159 1.5zm-38.906-4.245c3.744-8.464 10.458-8.688 14.614-.488 2.644 5.22 5.494 6.638 5.487 2.733-.009-5.444-6.887-11.75-12.816-11.75-4.738 0-13.62 9.86-11.693 12.979 1.209 1.956 2.432.992 4.408-3.474zm-9.895 1.396c0-.604.734-2.645 1.63-4.536.898-1.89 1.375-3.693 1.062-4.007-.598-.598-9.559 2.423-11.065 3.73-1.257 1.092 3.902 5.912 6.328 5.912 1.125 0 2.045-.494 2.045-1.099zm39.809-1.128c.373-1.961-3.988-6.773-6.14-6.773-1.198 0-1.166.711.205 4.535 1.27 3.54 2.062 4.473 3.616 4.25 1.094-.157 2.138-1.062 2.319-2.012zm-191.396-51.995c13.108-14.985 16.51-33.787 9.68-53.51-4.68-13.515-13.039-22.8-26.678-29.634-8.78-4.399-13.755-5.578-23.665-5.61-8.37-.026-8.885.391-6.62 5.361 1.302 2.86 4.317 4.211 11.37 5.1 18.326 2.312 33.077 15.951 38.098 35.229 1.784 6.851 1.763 13.34-.066 20.214-1.542 5.794-7.129 14.756-10.492 16.83-2.218 1.368-2.614 4.601-1.065 8.677 1.504 3.956 4.355 3.153 9.438-2.657zm-234.262-2.788c1.046-8.819.936-113.303-.12-114.975-.83-1.313-1.436-1.313-5.235 0L37.5 912.5l-.198 58.17c-.208 61.096-.32 59.483 4.198 60.617 4.232 1.062 4.98.361 5.651-5.297zM26 1025.386c0-3.782-3.26-21.698-5.074-27.886-1.504-5.133-2.202-11.144-2.615-22.533-.574-15.848.691-27.458 5.27-48.37.832-3.797 1.141-7.275.687-7.73-.9-.9-10.353-.05-12.209 1.097-.631.39-2.705 8.488-4.608 17.995-4.814 24.05-4.887 37.713-.312 58.041a3274.208 3274.208 0 0 1 3.983 18c1.139 5.225 2.75 10.263 3.58 11.196 1.43 1.605 7.336 2.756 10.048 1.958.688-.202 1.25-.998 1.25-1.768zm248.15-9.136c5.036-5.484 6.35-9.883 6.35-21.25 0-9.675-.244-11.016-3.109-17.06-3.714-7.84-12.46-17.199-18.616-19.921-2.384-1.055-7.36-2.228-11.055-2.607-6.687-.685-6.72-.676-6.72 1.815 0 3.797 3.543 7.6 7.793 8.367 4.653.84 6.528 1.78 12.463 6.247 6.167 4.641 9.098 9.233 10.664 16.705 1.537 7.334.494 12.202-3.917 18.291-3.502 4.835-3.402 4.273-1.554 8.695 1.779 4.258 4.24 4.487 7.702.718zm204.367-5.848c4.443-11.378 9.056-19.064 15.05-25.081 7.59-7.617 13.941-8.326 20.782-2.32 5.855 5.141 5.613 15.53-.42 18.028-2.137.885-3.355.946-4.097.203-1.272-1.272-.258-3.232 1.67-3.232 1.896 0 4.498-3.933 4.498-6.8 0-1.294-1.315-3.67-2.923-5.277-3.283-3.283-7.447-3.817-11.879-1.525-8.554 4.423-9.121 13.703-1.288 21.071 2.73 2.567 4.067 3.02 9.874 3.337 5.76.315 7.202.034 10.124-1.97 6.622-4.54 7.592-6.843 7.592-18.024v-10.04l-4.314-3.829c-14.154-12.56-38.391-2.932-48.681 19.34-4.573 9.899-4.947 11.92-3.482 18.823 1.73 8.15 3.505 7.51 7.494-2.704zm-211.59-8.037c5.81-7.387-1.303-26.025-11.62-30.448-4.536-1.944-6.307-1.82-6.307.439 0 1.185 10.5 25.974 12.91 30.475 1.513 2.827 2.5 2.735 5.017-.466zm205.344-13.015c12.47-17.953 24.324-25.385 38.223-23.96 6.788.695 7.92.253 6.441-2.511-2.042-3.816-6.222-4.945-15.627-4.223-9.518.732-17.277 3.592-24.993 9.214-4.75 3.46-12.315 13.969-12.315 17.107 0 2.928 2.682 9.023 3.97 9.023.589 0 2.524-2.092 4.3-4.65zm281.946-11.452c-.156-2.969-.738-8.59-1.294-12.49-1.21-8.48-.063-17.14 3.534-26.698 3.5-9.297 5.583-18.903 6.227-28.71.66-10.06-.72-16.675-7.2-34.5-2.4-6.6-4.612-13.8-4.916-16-1.537-11.112-1.559-15.899-.108-24.14 1.634-9.285 2.407-12.583 7.35-31.36 5.059-19.215 5.036-27.917-.128-49.5-5.078-21.222-6.764-29.767-7.285-36.915-.626-8.589-1.047-6.45 7.698-39.085 2.837-10.585 3.225-13.592 3.29-25.5.06-11.151-.295-14.63-2.037-20-7.805-24.044-7.866-24.376-7.595-41.148.218-13.501.613-16.864 2.874-24.5 6.841-23.1 6.708-22.4 6.745-35.352.037-12.965-.406-15.5-5.595-32-2.404-7.647-3.144-12.26-3.792-23.646-.442-7.781-.503-17.681-.133-22 .842-9.861.317-18.077-1.194-18.649-1.488-.563-10.48 1.717-11.74 2.977-.548.548-.989 9.945-1.027 21.89-.073 22.99.98 31.488 6.065 48.928 4.835 16.582 5.63 24.415 3.613 35.545-.943 5.2-3.224 13.055-5.07 17.455-6.115 14.587-6.684 17.13-6.708 30-.024 12.51 1.092 18.686 5.72 31.65 4.879 13.668 6.877 32.726 4.518 43.086-8.197 35.987-8.699 39.364-7.923 53.264.445 7.986 1.84 17.184 4.168 27.5 7.456 33.022 7.413 40.904-.37 68-1.186 4.125-3.282 12.225-4.66 18-2.343 9.82-2.434 11.16-1.41 20.688.84 7.822 2.13 12.933 5.55 22 10.106 26.79 10.32 34.938 1.512 57.812-3.88 10.081-4.239 11.794-4.288 20.5-.03 5.225.544 11.874 1.275 14.775 1.11 4.404 2.022 5.751 5.53 8.165 2.311 1.59 4.806 3.62 5.545 4.509 2.353 2.835 3.558 1.152 3.259-4.551zm-284.112-9.112c6.353-7.304 15.763-12.236 26.11-13.685 9.838-1.377 10.666-2.276 6.045-6.56-1.507-1.398-3.82-2.541-5.142-2.541-3.535 0-15.876 3.852-21.567 6.731-6.654 3.367-18.551 13.089-18.551 15.16 0 1.708 2.626 6.094 4.351 7.266 1.64 1.115 3.282-.08 8.754-6.37zm62.21-.936c4.849-2.552 4.339-3.84-6.241-15.752-13.415-15.106-25.595-26.343-36.074-33.283-14.861-9.841-33.822-18.764-53.91-25.37l-8.412-2.766-1.839 2.271c-3.704 4.575-2.526 6.37 6.161 9.388 18.826 6.539 35.278 14.503 50.5 24.447 7.861 5.136 13.743 10.327 27.5 24.272 9.625 9.757 18.092 17.785 18.816 17.841.723.056 2.298-.415 3.5-1.048zm-71.38-9.677c6.495-5.445 18.505-12.214 22.86-12.882 7.569-1.162 9.515-4.091 4.186-6.299-4.526-1.874-10.366-.638-19.78 4.188-14.295 7.329-20.7 14.682-15.451 17.74 2.684 1.563 3.285 1.362 8.186-2.747zm-161.117-3.923a811.085 811.085 0 0 0 13.66-9.99c8.11-6.084 28.378-15.538 39.3-18.331 4.14-1.059 11.621-2.42 16.625-3.025 10.97-1.327 12.924-2.134 9.507-3.928-5.602-2.941-9.943-7.352-12.448-12.648l-2.643-5.587-7.66.67c-9.96.87-23.116 3.236-30.659 5.513-3.3.996-8.615 2.578-11.811 3.514-11.746 3.442-47.765 21.21-52.408 25.852-1.336 1.336-.756 1.859 5.254 4.727 4.54 2.166 9.251 5.635 14.36 10.573 4.926 4.76 8.423 7.36 9.926 7.38 1.276.016 5.325-2.107 8.997-4.72zm-236.133.5c1.588-2.474 4.155-12.002 3.614-13.414-.305-.793-1.509-1.305-2.676-1.139-2.71.387-7.222 12.377-5.458 14.502 1.367 1.647 3.48 1.671 4.52.051zm497.788-.95c2.717-1.32 4.527-2.875 4.527-3.89 0-3.273-9.47-14.584-25.898-30.928-14.287-14.216-18.624-17.853-31.102-26.088-20.037-13.223-29.566-17.876-53.924-26.33l-10.425-3.618-3.364 3.26c-4.238 4.108-4.012 6.79.713 8.45 33.278 11.695 48.173 19.55 70.173 37.01 7.53 5.977 25.865 24.027 31.015 30.535 1.871 2.365 5.1 6.437 7.174 9.049 2.075 2.613 4.405 4.75 5.178 4.75.774 0 3.444-.99 5.933-2.2zM453.9 947.389c3.08-2.537 8.639-6.143 12.351-8.013 3.712-1.87 6.75-4.048 6.75-4.84 0-1.326-5.523-3.516-8.9-3.53-2.806-.01-22.1 13.115-22.1 15.034 0 1.254 4.123 5.961 5.221 5.961.592 0 3.597-2.076 6.678-4.612zm129.566-4.17c6.906-3.686 7.04-3.837 15.675-17.718 14.44-23.208 21-33.255 28.65-43.877 4.01-5.568 9.065-12.675 11.234-15.794 12.292-17.678 39.091-46.504 57.146-61.467 6.968-5.776 12.93-11.181 13.25-12.013.88-2.295.693-16.16-.226-16.729-1.294-.8-4.26 1.29-16.326 11.502-30.468 25.789-57.974 57.448-86.34 99.378-4.837 7.15-9.368 13.675-10.07 14.5-2.4 2.826-17.167 29.494-20.36 36.772-4.61 10.512-3.567 11.284 7.367 5.446zm-452.27-1.905c1.543-1.478 2.805-3.178 2.805-3.777 0-1.093-9.797-10.942-17.753-17.845-2.339-2.03-5.113-3.691-6.165-3.691-2.252 0-10.299 9.648-9.87 11.835.158.811 5.013 4.761 10.788 8.777 12.11 8.421 15.49 9.208 20.195 4.7zM58.064 939.1c2.603-4.633 4.897-5.96 10.936-6.327l4.5-.274 5.248-10.176c6.302-12.217 9.343-26.067 7.374-33.58-.612-2.334-2.275-8.519-3.696-13.744-1.47-5.407-2.963-14.455-3.465-21-1.048-13.683-3.902-25.244-7.06-28.605-2.742-2.92-8.121-4.682-12.901-4.228l-3.5.333-.73 8c-.577 6.31-.388 8.902.893 12.27 1.203 3.164 1.472 6.076 1.039 11.25-.586 6.984-.037 8.293 2.298 5.48 1.787-2.153 5-1.912 5 .376 0 1.031-1.176 4.519-2.612 7.75-2.432 5.468-2.563 6.497-1.889 14.874.398 4.95.676 10.8.618 13-.583 22.137-.99 28.396-1.97 30.227C55.391 929.874 53.521 943 55.542 943c.181 0 1.315-1.755 2.52-3.9zm389.821-3.276c6.77-4.724 7.234-5.265 5.56-6.49-1.005-.734-3.99-1.335-6.633-1.335-4.118 0-5.38.518-8.81 3.616-4.104 3.709-4.914 6.072-2.802 8.184 2.185 2.185 5.22 1.234 12.685-3.975zm-191.115-4.667c7.403-5.026 33.26-18.269 44.27-22.674 16.793-6.719 33.067-10.872 50.269-12.83 12.428-1.413 14.386-2.298 14.72-6.654.38-4.956.316-5-7.279-4.996-16.203.009-43.197 6.676-67.75 16.732-22.917 9.386-56.163 29.424-53.409 32.191.849.853 10.71 2.84 12.179 2.454.698-.183 3.848-2.084 7-4.223zm362.968-5.027 14.037-7.032 10.108-15.12c15.291-22.874 29.723-40.606 49.065-60.286l17.501-17.806-.282-12.131c-.154-6.673-.506-12.496-.78-12.94-.944-1.526-6.072 2.077-15.474 10.87-27.685 25.893-61.218 66.148-79.814 95.814-2.413 3.85-5.145 8.125-6.07 9.5-.925 1.375-3.4 5.584-5.5 9.352-2.943 5.287-3.516 7.038-2.506 7.662 1.676 1.036 2.841.57 19.715-7.883zm-53.335 5.26c.34-.885.131-4.403-.464-7.819-.595-3.416-.937-7.98-.76-10.141.29-3.56.746-4.135 4.821-6.087 2.475-1.185 6.3-2.696 8.5-3.358 7.046-2.118 8.5-3.532 8.494-8.26-.003-2.324-.444-6.906-.98-10.18-1.366-8.337-.381-9.505 10.941-12.978 12.111-3.715 12.37-4.13 11.469-18.371-.685-10.824-.662-10.994 1.69-12.473 1.313-.825 5.536-2.036 9.386-2.691 11.725-1.996 11.75-2.023 13.562-13.835.862-5.625 2.078-10.738 2.7-11.36.623-.623 5.515-1.694 10.871-2.38 6.941-.888 10.095-1.733 10.977-2.94.682-.932 1.731-4.917 2.333-8.856.602-3.939 1.873-8.737 2.826-10.662l1.731-3.5 10.737-1.037c5.906-.57 11.145-1.47 11.643-2 .498-.53 1.822-4.734 2.943-9.343 1.12-4.61 2.54-8.885 3.154-9.5.614-.616 4.358-1.345 8.32-1.62l7.203-.5.305-4.75c.167-2.613.167-4.794 0-4.847-1.898-.602-22.624-.67-23.558-.077-.69.438-2.165 5.043-3.28 10.235-2.678 12.472-3.254 12.939-15.955 12.939-6.629 0-10.08.402-10.74 1.25-.534.688-1.958 5.975-3.164 11.75-1.205 5.775-2.863 11.175-3.684 12-1.08 1.087-4.307 1.592-11.708 1.834-5.619.184-10.6.704-11.07 1.155-.47.451-1.478 5.885-2.24 12.076-.848 6.883-1.969 11.9-2.886 12.913-.913 1.009-4.738 2.177-9.76 2.981-13.867 2.22-12.799.814-12.565 16.534.16 10.722-.1 13.822-1.247 14.898-.796.748-4.823 2.336-8.948 3.53s-8.783 2.673-10.35 3.288l-2.851 1.117.703 11.708c.831 13.835 1.47 12.928-12.727 18.047l-9.03 3.256.554 9.082c.643 10.535 1.874 15.316 4.733 18.385 2.394 2.57 6.486 2.896 7.371.587zm-133.96-1.328c2.723-3.009 1.036-4.063-6.502-4.063-8.06 0-9.368 1.78-3.191 4.342 5.065 2.1 7.606 2.028 9.693-.279zm-216.419-9.095c29.398-24.392 71.277-44.066 110.476-51.9 6.05-1.208 13.025-2.655 15.5-3.214 2.475-.56 11.177-1.275 19.338-1.59l14.839-.574 2.06-4.24c1.132-2.33 1.803-4.904 1.49-5.718-1.175-3.062-11.432-3.23-35.727-.583-45.144 4.918-99.939 29.697-137.055 61.98-8.35 7.263-8.829 8.362-4.727 10.862 1.805 1.1 3.743 2.003 4.306 2.005.564.002 4.839-3.16 9.5-7.028zM471 926.21c0-2.803-41.17-19.211-48.204-19.211-2.02 0-12.976 10.9-12.206 12.145.29.47 5.261.855 11.046.855 9.973 0 29.744 2.494 42.864 5.407 3.3.733 6.112 1.391 6.25 1.463.138.071.25-.225.25-.66zm-318.102-3.605c1.809-1.867 3.135-4.075 2.946-4.907-.527-2.319-22.957-22.699-24.982-22.699-2.064 0-5.546 3.43-6.485 6.386-.524 1.654 1.578 4.144 11.239 13.31 6.536 6.203 12.358 11.283 12.938 11.29.58.008 2.534-1.513 4.344-3.38zm25.134-.955c1.907-1.53 68.043-67.355 146.968-146.276L468.5 631.88l-3.843-3.54-3.844-3.539-18.156 18.009A6994.703 6994.703 0 0 0 408 677.466c-9.075 9.155-27.283 27.309-40.462 40.34-13.18 13.032-28.555 28.419-34.167 34.194-5.613 5.775-21.118 21.3-34.457 34.5C249.492 835.407 162 923.498 162 924.351c0 .485 2.827.702 6.282.482 5.01-.32 6.984-.963 9.75-3.182zm223.35-4.606c6.909-2.627 16.524-15.157 23.054-30.045 2.05-4.675 5.663-11.425 8.028-15 3.883-5.87 5.843-8.564 12.482-17.158 2.847-3.685 2.752-6.292-.196-5.378-5.893 1.826-6.474 1.775-7.057-.623-.314-1.287-.845-5.266-1.18-8.841-1.056-11.274-1.486-13-3.238-13-1.835 0-9.81 8.156-11.733 12-1.5 2.997-3.248 12.076-4.043 21-1.392 15.622-2.855 22.008-6.931 30.263-3.36 6.805-4.913 8.802-8.931 11.487-5.62 3.756-7.903 3.995-12.338 1.29-7.351-4.481-8.38-12.73-3.016-24.156 3.532-7.522 4.667-9.151 15.217-21.838 11.922-14.337 13.497-16.63 15.042-21.893 1.739-5.922 1.615-11.653-.251-11.653-.665 0-4.345 3.038-8.178 6.75-3.833 3.713-7.396 6.75-7.918 6.75-.522 0-1.917-2.25-3.1-5-2.869-6.67-4.678-6.492-5.557.544-.964 7.717-6.07 21.483-14.052 37.894-5.736 11.79-6.852 14.949-7.25 20.503-.521 7.292.799 11.616 5.382 17.624 5.416 7.101 18.266 11.33 25.765 8.48zm-370.554-8.157c8.62-2.81 17.116-6.195 18.88-7.519 5.728-4.297 5.414-12.524-.526-13.829-3.05-.67-8.168.84-9.396 2.773-1.296 2.038-.857 7.383.714 8.687 2.117 1.757 1.915 5-.311 5-2.853 0-6.189-3.75-6.189-6.957 0-3.827-.923-6.043-2.517-6.043-1.919 0-18.958 5.677-22.433 7.474-6.152 3.181-6.702 9.516-1.152 13.244 1.869 1.255 4.266 2.282 5.328 2.282 1.062 0 8.983-2.3 17.602-5.112zm625.312-.138c10.061-4.375 10.46-4.719 19.405-16.75 9.127-12.276 17.086-21.686 26.81-31.697 6.37-6.559 7.054-7.668 7.706-12.5.947-7.012.2-10.803-2.128-10.803-5.449 0-31.595 28.417-50.605 55-15.233 21.303-15.347 22.907-1.188 16.75zm-481.945-7.437c1.543-1.478 2.805-3.405 2.805-4.283 0-1.67-16.882-18.746-23.094-23.36-1.977-1.469-4.295-2.67-5.152-2.67-1.584 0-5.754 6.074-5.754 8.381 0 1.846 24.695 24.619 26.697 24.619.931 0 2.956-1.21 4.498-2.687zm227.038-4.02c4.892-4.417 9.874-17.77 12.16-32.587 2.532-16.414 1.058-16.601-11.18-1.417-8.562 10.623-15.21 21.983-15.212 25.993-.001 2.44 2.804 8.963 4.288 9.97 1.818 1.232 7.691.076 9.944-1.96zM555.854 885.9l7.354-12.099-.565-23.65c-.311-13.009-.875-47.052-1.253-75.652l-.686-52-7.207-7.399c-4.918-5.05-7.62-7.143-8.511-6.592-1.066.658-1.182 16.238-.631 84.899.706 88.054 1.187 104.592 3.042 104.592.607 0 4.412-5.445 8.457-12.099zm-32.704-70.715c-.298-75.178-.583-95.07-1.717-119.686l-.507-11-5.03-5-5.03-5 .56 56.5c.31 31.075.845 79.096 1.191 106.712l.63 50.212 4.542 3.54c2.498 1.946 4.797 3.284 5.108 2.973.31-.311.425-35.974.253-79.251zm172.11 73.812c14.216-6.8 14.752-7.47 14.725-18.397-.025-9.946-1-10.187-8.514-2.101-7.426 7.99-20.471 24.321-20.471 25.627 0 1.523 1.431 1.008 14.26-5.129zM21 886.93c6.325-2.23 11.836-4.384 12.246-4.787.41-.404-.178-2.514-1.308-4.688-1.345-2.587-1.885-5.071-1.562-7.186.27-1.777.088-3.481-.407-3.787-1.59-.982-22.362 7.422-24.197 9.79-2.417 3.119-2.432 12.245-.022 13.649 2.53 1.474 2.652 1.45 15.25-2.99zm174.465-7.033c1.944-1.707 3.544-3.62 3.556-4.25.032-1.773-31.164-31.528-32.513-31.01-1.326.508-5.508 7.517-5.508 9.232 0 1.906 28.653 29.132 30.66 29.132.148 0 1.861-1.397 3.805-3.104zM506 881.941c0-.582-.45-.78-1-.441-.55.34-1 .816-1 1.059s.45.441 1 .441 1-.477 1-1.059zm-457.646-5.393c2.932-2.717 3.208-4.22 1.475-8.025-2.22-4.873-9.72-4.569-12.341.5-1.756 3.396-.963 5.83 2.742 8.426 3.086 2.161 5.055 1.943 8.124-.901zm455.111-1.652c3.561-3.126 4.622-5.896 2.258-5.896-2.624 0-11.004 6.737-10.133 8.145 1.07 1.732 4.436.771 7.875-2.249zm-6.371-7.964c9.017-6.512 10.247-7.88 9.3-10.346-.894-2.33-1.657-2.056-8.823 3.164-3.586 2.612-8.416 6.044-10.734 7.625-3.968 2.707-4.105 2.956-2.335 4.25 1.034.756 2.4 1.375 3.035 1.375.635 0 4.936-2.73 9.557-6.068zm-218.673-2.126 8.922-3.917 102.519-102.441L492.38 656.006l-2.877-3.003c-1.582-1.652-3.54-3.003-4.349-3.003-1.207 0-189.973 188.12-213.654 212.922-7.862 8.235-7.665 8.288 6.921 1.884zM103.703 849.5c40.362-53.718 63.015-111.334 68.357-173.857 3.174-37.148-3.884-85.93-18.758-129.643-6.346-18.651-23.846-56.597-28.275-61.308-1.63-1.735-1.91-1.642-6.863 2.273-2.84 2.245-5.164 4.575-5.164 5.177 0 .603 1.526 3.63 3.39 6.727 8.296 13.777 19.362 39.69 26.748 62.631 3.08 9.567 8.844 35.037 10.75 47.5 10.001 65.369-1.616 131.416-33.447 190.156-4.871 8.989-9.375 16.794-10.009 17.344-.634.55-4.44 5.882-8.457 11.85-4.018 5.967-9.593 13.357-12.39 16.421l-5.085 5.571.134 6.679c.074 3.673.68 7.697 1.346 8.942 1.208 2.258 1.226 2.251 5.711-2.1 2.474-2.4 7.88-8.863 12.012-14.363zm385.852 8.461c7.08-4.971 13.677-9.766 14.66-10.655 1.814-1.642 2.433-5.787.997-6.675-.75-.464-25.19 15.85-32.332 21.582-2.825 2.267-3.134 2.88-1.88 3.735 3.071 2.091 5.994.834 18.555-7.987zM18 863c4.475-1.65 8.751-3 9.503-3 .752 0 2.505-.433 3.897-.962 2.465-.937 2.492-1.051 1.065-4.468-.806-1.928-1.465-5.156-1.465-7.174v-3.668l-4.75.619c-6.138.8-20.627 8.07-22.925 11.504-2.3 3.435-2.305 4.109-.063 7.399C5.667 866.78 7.85 866.742 18 863zm198.75-4.323c1.238-1.114 2.25-2.8 2.25-3.748 0-2.284-33.679-34.929-36.035-34.929-2.152 0-5.965 4.96-5.965 7.758 0 1.207 5.102 6.763 13.388 14.58 22.363 21.1 21.599 20.627 26.362 16.339zm257.93-5.223a3622.888 3622.888 0 0 1 20.607-14.25c9.693-6.64 12.34-9.976 9.875-12.442-1.197-1.197-.715-1.498-28.162 17.58-21.498 14.943-20.452 14.117-19.61 15.48 1.773 2.868 6.59 1.094 17.29-6.368zm-426.903-.01C52.253 850.307 49.501 843 43.845 843c-3.15 0-6.845 3.07-6.845 5.686 0 2.419 3.98 6.314 6.452 6.314 1.157 0 3.103-.7 4.325-1.557zM318 851.222c0-.428-.7-1.778-1.557-3-2.735-3.906-7.735-2.033-6.081 2.277.594 1.549 7.638 2.215 7.638.723zm158.295-13.381C504.4 818.544 506 817.294 506 814.635c0-1.266-.268-2.57-.596-2.897-.327-.328-6.74 3.535-14.25 8.583-7.51 5.049-16.477 10.932-19.927 13.075-5.408 3.358-12.812 11.13-16.693 17.524-1.602 2.639 2.183.364 21.76-13.078zM332.307 848.75c1.53-1.132 1.248-1.793-2.98-7-4.753-5.85-7.106-6.927-9.316-4.263-1.696 2.044-.647 5.4 2.896 9.263 3.15 3.435 6.498 4.147 9.4 2zM351 845.927c0-1.025-15.275-17.66-17.572-19.135-1.153-.742-5.428 1.727-5.428 3.134 0 .89 6.87 9.946 10.865 14.324 2.072 2.271 3.347 2.75 7.322 2.75 2.761 0 4.813-.458 4.813-1.073zm17.527-.97c.877-1.42-2.402-5.508-14.808-18.457-8.969-9.362-10.803-10.841-12.312-9.933-4.307 2.59-4.003 3.901 2.673 11.551C357.383 843.361 360.366 846 364.29 846c1.976 0 3.883-.47 4.238-1.043zm15.055.043c.23 0 .418-1.316.418-2.923 0-1.825-1.38-4.739-3.672-7.75-5.87-7.716-24.487-27.243-26.617-27.919-1.254-.398-2.674.11-3.992 1.429l-2.046 2.046 2.55 3.308c3.056 3.964 14.56 16.707 23.57 26.107 4.042 4.215 7.059 6.59 7.944 6.25.784-.302 1.615-.548 1.845-.548zM16.5 840.859c4.95-1.732 9.524-3.557 10.165-4.056 1.3-1.012 1.022-11.525-.34-12.864-.789-.775-10.625.95-14.825 2.6-7.212 2.834-11.215 8.975-8.88 13.62 1.16 2.308 2.494 3.454 4.38 3.766.275.045 4.55-1.335 9.5-3.066zm434.116.543c5.721-2.707 11.406-8.8 15.706-16.833 1.8-3.364 2.163-5.629 2.092-13.069-.074-7.881-.468-9.808-3.169-15.5-5.269-11.107-15.202-18.526-28.068-20.966-12.96-2.458-31.276 6.4-37.185 17.981-3.073 6.024-5.248 16.021-4.673 21.485.551 5.25 3.926 13.915 5.892 15.13.7.432 4.638-2.923 9.988-8.507 4.9-5.114 9.314-8.924 9.912-8.555.717.444.847 3.255.389 8.432-.986 11.133 1.335 11.787 8.566 2.414 4.47-5.794 7.575-6.97 8.36-3.164.256 1.238.648 6.574.873 11.858.224 5.284.725 10.122 1.113 10.75 1.114 1.802 4.27 1.351 10.204-1.456zm-212.78-3.716c1.81-1.935 2.112-2.913 1.343-4.342-1.255-2.334-38.522-38.35-41.679-40.28-3.02-1.846-4.685-.564-6.53 5.025l-1.359 4.119 7.445 7.098a6397.674 6397.674 0 0 1 17.881 17.146c5.741 5.526 11.977 11.275 13.86 12.775 3.756 2.995 4.994 2.784 9.039-1.54zM41.17 832.345c3.48-3.15 1.738-8.345-2.8-8.345-4.964 0-6.61 5.582-2.579 8.75 2.11 1.658 3.19 1.577 5.38-.405zm346.115-5.06c.987-5.164-.428-9.116-5.016-14.01-11.801-12.587-14.756-15.548-16.962-16.993-2.226-1.458-2.544-1.409-4.845.753-1.355 1.272-2.463 2.615-2.463 2.984C358 801.89 383.846 830 385.567 830c.66 0 1.433-1.222 1.719-2.714zm89.5-5.006c10.061-6.38 28.123-19.598 28.647-20.965 1.28-3.334-1.241-3.706-5.643-.834-11.555 7.54-26.645 18.7-27.185 20.106-1.475 3.846-.096 4.404 4.18 1.693zm-219.42-4.352c1.448-1.14 2.634-2.805 2.634-3.7 0-1.474-52.624-54.161-54.141-54.207-.96-.03-3.86 7.69-3.85 10.25.005 1.563 3.37 5.288 11.25 12.452 6.182 5.622 17.31 16.31 24.727 23.75 7.417 7.44 14.22 13.528 15.115 13.528.896 0 2.815-.933 4.264-2.073zm132.601-12.31c.844-3.015.915-4.967.225-6.25-1.299-2.42-14.714-15.367-15.92-15.367-.508 0-1.974 1.118-3.257 2.484-1.761 1.875-2.111 2.95-1.425 4.38 1.34 2.79 16.722 19.103 18.03 19.12.616.009 1.672-1.957 2.347-4.368zm101.012-7.672c9.892-7.1 14.196-10.796 14.643-12.574 1.144-4.56-1.008-4.815-6.759-.8-25.17 17.572-27.236 19.399-25.369 22.42 1.282 2.074 3.823.76 17.485-9.046zm-8.87-8.23c23.251-16.787 25.791-19.215 23.007-22-.777-.776-3.45.594-9.466 4.852-12.867 9.106-25.112 18.496-25.495 19.55-.368 1.016 1.673 3.906 2.717 3.848.346-.019 4.502-2.831 9.237-6.25zm-210.259 4.299L282.2 794l3.55-3.55c2.355-2.355 3.215-3.885 2.555-4.545-.548-.548-4.23-1.267-8.183-1.598-3.952-.331-7.455-1.036-7.782-1.567-.886-1.433 1.75-2.79 5.16-2.655 1.65.065 6.472.072 10.715.016 7.157-.094 7.975-.329 11.296-3.245 6.002-5.27 3.69-7.559-7.834-7.756-4.982-.086-5.774-.353-5.479-1.85.306-1.552 1.722-1.75 12.515-1.75h12.17l3.559-3.446c5.827-5.644 4.697-6.94-6.312-7.243-6.685-.184-10.777-2.019-8.234-3.691.77-.507 6.663-.675 13.17-.376l11.773.543 3.575-3.894c1.967-2.14 3.428-4.343 3.248-4.893-.437-1.337-4.918-2.238-11.853-2.382-5.668-.118-7.984-1.268-5.575-2.768.696-.434 6.315-.668 12.485-.52l11.22.268 4.53-4.176c6.99-6.443 6.124-7.642-5.89-8.165-3.652-.158-6.079-.736-6.333-1.507-.314-.952 2.344-1.25 11.136-1.25 11.491 0 11.566-.015 15.083-3.104 3.832-3.364 4.563-5.827 1.785-6.014-.963-.065-7.806-.403-15.208-.75-15.934-.748-14.78.573-14.958-17.132-.063-6.325-.481-12.078-.93-12.784-1.171-1.847-3.648-.569-6.731 3.474l-2.682 3.516.715 13.487c.675 12.75.614 13.467-1.12 13.137-1.558-.297-1.915-1.636-2.358-8.84-.778-12.644-2.207-13.72-8.77-6.6-3.584 3.889-3.995 4.832-3.59 8.25 1.531 12.897 1.891 19.486 1.139 20.83-1.602 2.862-2.757 1.542-2.817-3.22-.08-6.473-1.414-14.124-2.682-15.392-.727-.727-2.337.122-5.282 2.783l-4.237 3.828.69 14.35c.649 13.509.583 14.33-1.12 14.007-1.516-.288-1.97-1.948-2.809-10.255-.646-6.398-1.452-10.06-2.276-10.333-1.732-.573-9.574 7.408-8.929 9.088.283.738.843 6.412 1.245 12.607.694 10.702.636 11.248-1.155 10.905-1.6-.305-1.977-1.588-2.488-8.457-.864-11.59-1.858-12.58-7.224-7.2l-3.173 3.182v14.068c0 19.566-2.08 19.697-4.066.257-.802-7.855-2.481-8.338-8.143-2.346-4.107 4.347-4.375 4.963-3.883 8.914.292 2.334.81 9.061 1.154 14.949.362 6.205 1.116 11.113 1.794 11.675 1.317 1.094 8.104 1.998 11.144 1.485 1.1-.186 6.658-.344 12.35-.351zm123.758-3.764c.73-.963 1.343-2.364 1.36-3.114.047-2.005-9.9-13.136-11.738-13.136-1.77 0-5.23 2.813-5.23 4.251 0 1.683 11.2 13.749 12.762 13.749.835 0 2.115-.787 2.846-1.75zm74.274-6.461c5.289-3.233 29.077-21 32.868-24.549 6.22-5.823 3.135-9.222-3.877-4.272-2.405 1.698-7.073 4.96-10.373 7.248-7.983 5.535-25.5 18.911-25.5 19.471 0 .924 2.096 4.313 2.667 4.313.328 0 2.225-.995 4.215-2.211zm-62.92-7.565c-.048-2.142-9.32-12.224-11.243-12.224-.775 0-2.227.904-3.228 2.01-2.207 2.439-1.408 4.338 4.533 10.771 3.93 4.257 3.971 4.273 6.965 2.725 1.656-.857 2.994-2.333 2.973-3.282zm55.538-7.415c1.65-2.479 6.43-8.737 10.622-13.908 4.193-5.17 9.043-11.426 10.778-13.901a7511.67 7511.67 0 0 0 7.005-10.014c2.117-3.033 6.38-10.405 9.472-16.382 4.89-9.45 5.621-11.6 5.608-16.486-.02-7.019-1.078-9.115-3.564-7.054-.952.79-2.34 2.893-3.084 4.674-.745 1.78-4.786 8.98-8.98 16-7.144 11.952-11.455 17.925-30.406 42.123-4.151 5.302-8.753 11.415-10.226 13.586-2.46 3.626-2.549 4.09-1.097 5.694 1.981 2.19 6.249 2.826 8.872 1.322 1.1-.63 3.35-3.175 5-5.654zm-46.071 2.62c.864-.865 1.571-2.052 1.571-2.64 0-1.896-11.113-13.789-12.885-13.789-1.966 0-4.115 1.856-4.115 3.555 0 1.362 11.79 14.445 13.017 14.445.462 0 1.547-.707 2.412-1.571zm227.623-1.47c2.111-1.672 4.113-3.904 4.448-4.958.396-1.25-1.69-6.545-5.992-15.209-13.416-27.022-21.198-47.59-26.969-71.292-6.912-28.388-8.547-39.284-9.229-61.5-.735-23.993.627-40.52 5.262-63.845 4.088-20.571 7.192-31.777 12.923-46.655 4.756-12.347 20.788-45.83 26.334-55 5.852-9.677 19.845-30.128 24.65-36.027 5.87-7.206 6.96-11.369 4.975-18.99-1.764-6.769-3.176-8.958-4.872-7.55-.634.525-3.385 4.243-6.112 8.261-2.728 4.018-7.47 10.681-10.54 14.806-20.727 27.855-44.958 74.345-54.73 105-9.917 31.115-16.474 76.075-14.729 101 .658 9.393 3.11 31.63 3.915 35.5 2.89 13.895 3.842 18.16 5.575 25 2.059 8.125 5.322 18.947 9.8 32.5 3.76 11.377 14.712 37.073 21.418 50.25 6.747 13.258 7.518 13.742 13.873 8.709zm-157.349-14.064c17.738-12.758 20.423-15.463 17.276-17.408-1.013-.626-21.979 12.136-21.979 13.379 0 .357-2.475 3.487-5.5 6.955-8.896 10.2-7.484 9.795 10.203-2.926zm-62.87 1.722c1.146-2.352 1.107-3.041-.282-4.926-.888-1.205-2.545-3.653-3.682-5.441-2.426-3.815-4.713-4.115-7.622-1-2.5 2.677-1.895 4.26 4.093 10.717 4.25 4.582 5.523 4.692 7.493.65zm-176.12-5.825c6.624-6.502 6.279-6.851-8.2-8.276-6.531-.643-8.943-1.973-6.505-3.586 1.387-.918 8.589-.673 20.15.685 4.31.507 4.961.272 8.75-3.15 3.729-3.37 5.242-6.334 3.342-6.55-16.927-1.932-19.746-2.51-20.051-4.108-.488-2.555 5.045-3.182 16.798-1.904 6.896.75 10.73.778 12.024.086 2.416-1.293 7.454-7.847 6.65-8.651-.334-.334-5.001-1.012-10.372-1.505-9.933-.914-12.117-1.7-10.77-3.88.569-.92 4.154-1.047 14.644-.514l13.89.705 2.969-3.178c1.632-1.748 2.968-3.749 2.968-4.447 0-1.605-4.51-2.519-12.434-2.519-3.502 0-6.956-.565-7.965-1.303-1.638-1.197-1.65-1.41-.155-2.652 1.278-1.06 4.441-1.207 14.784-.683l13.158.665 3.806-3.716c2.093-2.044 3.806-4.234 3.806-4.866 0-.739-3.84-1.47-10.75-2.047-8.49-.71-10.75-1.213-10.75-2.398 0-1.252 2.41-1.546 14.579-1.776l14.579-.276 3.369-3.476c2.29-2.362 3.042-3.803 2.35-4.496-.562-.56-7.629-1.305-15.706-1.654-8.888-.384-15.053-1.078-15.618-1.758-.512-.618-1.251-7.972-1.64-16.344-.816-17.5-1.392-18.306-7.924-11.076l-3.744 4.144.703 13.25c.454 8.57.346 13.471-.304 13.873-1.683 1.04-2.25-1.04-2.864-10.512-.708-10.93-1.734-11.796-7.445-6.283l-4.023 3.884.344 12.911c.237 8.898-.003 13.028-.773 13.289-1.383.468-2.383-4.251-2.383-11.243 0-10.03-1.438-10.627-8.445-3.513l-4.87 4.945.647 13.503c.436 9.077.302 13.716-.409 14.155-1.823 1.127-2.185-.225-2.702-10.104-.59-11.305-1.606-12.388-6.869-7.325-5.487 5.278-5.624 5.847-4.333 18.061.818 7.744.851 11.35.11 12.091-1.592 1.593-3.129-3.389-3.129-10.144 0-3.192-.589-6.55-1.326-7.557-1.25-1.709-1.54-1.625-5.038 1.446-5.573 4.893-5.746 5.59-4.105 16.524 1.81 12.055 1.81 12.461.03 12.461-.962 0-1.646-1.574-2.064-4.75-1.113-8.449-1.658-10.363-2.838-9.97-1.692.561-7.534 29.094-6.746 32.947.79 3.863 2.463 4.398 14.587 4.66 4.95.108 10.575.581 12.5 1.052 6.092 1.49 7.324 1.16 11.712-3.147zm183.75-5.752c2.288-2.528 1.503-5.567-2.542-9.844-2.873-3.04-3.297-3.19-5.273-1.886-3.192 2.11-3.082 4.706.401 9.443 3.485 4.738 4.823 5.15 7.415 2.287zm10.502-11.974c1.541-2.88 1.326-3.665-2.069-7.531-3.495-3.982-4.461-4.239-7.067-1.88-2.467 2.232-2.304 4.034.722 8 2.916 3.824 6.776 4.47 8.414 1.41zm60.785-4.365c2.218-2.02 3.286-8.701 1.392-8.701-1.024 0-8.142 10.51-8.142 12.02 0 1.32 3.6-.45 6.75-3.32zM450.8 722.8c1.948-1.948 1.393-4.241-1.755-7.257-2.859-2.739-3.04-2.777-5.5-1.164-3.108 2.036-3.153 2.88-.357 6.661 2.28 3.084 5.535 3.837 7.612 1.76zm8.147-11.236c1.304-1.571.339-4.252-2.328-6.466-1.116-.925-2.011-.958-3.555-.132-2.634 1.41-2.606 2.828.11 5.72 2.506 2.667 4.088 2.908 5.773.878zm7.119-8.6c2.664-1.425 2.42-3.599-.626-5.595-2.343-1.535-2.695-1.542-4.154-.083-1.46 1.459-1.452 1.811.083 4.154 1.9 2.9 2.04 2.946 4.697 1.525zm-243.13-6.398c4.197-4.33 3.673-7.138-1.152-6.173-3.65.73-4.747 2.038-4.769 5.69-.029 4.928 1.492 5.052 5.921.483zm334.064.32c0-1.044-1.325-7.183-2.944-13.642-1.619-6.46-3.502-14.669-4.186-18.244-.683-3.575-1.84-7.219-2.573-8.097-.903-1.084-4.584-1.992-11.45-2.824l-10.12-1.227-4.364 4.282c-2.4 2.356-4.363 4.803-4.363 5.44 0 .751 4.474 1.593 12.75 2.398 7.013.683 13.313 1.698 14 2.257.892.725 1.254 5.066 1.265 15.143.008 7.77.352 14.657.763 15.304.743 1.168 7.582 2.182 9.972 1.478.688-.202 1.25-1.223 1.25-2.267zm-82.962-7.96c2.65-5.196 2.16-6.656-1.318-3.92-3.199 2.516-5.065 5.627-4.207 7.015 1.282 2.074 3.53.814 5.525-3.096zm-237.516-6.053c3.651-3.366 5.583-6.54 4.228-6.948-.138-.041-3.813-.604-8.167-1.25-8-1.187-10.802-3.08-6.252-4.222 1.36-.341 6.21-.17 10.776.383 6.57.794 8.834.722 10.848-.347 2.603-1.381 8.045-7.66 8.045-9.284 0-.496-3.934-1.307-8.743-1.803-7.052-.728-8.806-1.236-9.069-2.629-.295-1.565.841-1.718 12.1-1.633 13.196.099 16.398-.817 18.845-5.389 1.522-2.843.216-3.572-7.633-4.26-9.776-.858-11.5-1.313-11.5-3.035 0-1.298 1.832-1.419 13.25-.87l13.25.638 3.293-3.454c2.63-2.76 3.028-3.673 1.978-4.545-.724-.6-7.457-1.41-14.963-1.8-7.506-.389-14.246-1.076-14.978-1.527-.97-.598-1.465-4.801-1.83-15.528-.338-9.954-.878-14.834-1.67-15.096-.644-.213-2.67.95-4.5 2.584l-3.33 2.971-.5 14.255c-.613 17.474-2.38 20.02-3.448 4.965-.39-5.516-1.197-10.33-1.792-10.697-.595-.368-2.595.983-4.446 3.002l-3.364 3.67.684 13.625c.57 11.362.455 13.547-.697 13.163-1.929-.643-2.721-4.135-2.837-12.503-.102-7.352-1.248-9.636-3.6-7.177-.998 1.042-1.392 8.041-1.655 29.368l-.345 28 3.5.618c8.168 1.443 9.842 1.07 14.522-3.245zm283.687-29.7c5.664-5.403 5.688-5.508 4.46-19.423-.642-7.258-.531-8.75.648-8.75 1.507 0 2.653 4.77 2.672 11.128.016 5.39 2.064 6.54 5.9 3.313l3.111-2.619v-12.91c0-7.102.402-12.912.893-12.912 1.493 0 2.106 2.84 2.122 9.832.016 6.779.983 9.905 2.73 8.826.778-.481 1.81-21.154 2.517-50.493.098-4.032-.956-4.771-8.072-5.66-3.027-.379-6.078-.909-6.78-1.178-1.483-.57-10.41 7.315-10.41 9.193 0 1.706 1.848 2.306 9.51 3.091 7.32.75 11.005 2.653 8.49 4.383-.825.568-2.4.794-3.5.503-1.1-.29-6.407-.816-11.794-1.166l-9.794-.638-3.456 3.35c-5.731 5.554-5.158 6.125 7.94 7.908 7.166.976 9.335 2.057 8.109 4.04-.745 1.206-4.2.987-17.785-1.127-5.762-.896-7.148-.813-9.236.555-3.408 2.232-6.036 6.429-4.8 7.665.54.54 5.106 1.488 10.148 2.11 6.933.853 9.168 1.49 9.168 2.612 0 1.274-1.911 1.386-13.457.787l-13.458-.698-3.708 3.399c-6.12 5.608-4.842 6.375 12.027 7.218 9.884.494 14.893 1.14 15.62 2.017.588.709 1.3 7.292 1.581 14.63.282 7.337.696 13.904.922 14.591.72 2.196 2.498 1.368 7.682-3.577zm25.671-3.078c1.033-.654 1.202-2.066.67-5.612-1.38-9.202-2.457-9.521-9.593-2.846-5.653 5.288-6.35 8.02-2.207 8.647 5.087.77 9.74.692 11.13-.189zm-211.468-48.768c18.198-17.97 49.303-48.908 69.12-68.75C435.981 500.088 558.71 378.44 590.758 347l12.742-12.5-7.388-.297-7.388-.296-43.612 43.397c-23.987 23.869-56.882 56.402-73.1 72.297-47.366 46.42-116.096 114.422-148.831 147.253l-30.32 30.408 3.266 3.369c1.796 1.853 3.7 3.369 4.231 3.369.531 0 15.856-14.703 34.054-32.673zM226.384 615.15c4.933-5.092 4.424-7.15-1.77-7.15-6.888 0-7.614.564-7.614 5.907 0 8.195 2.347 8.506 9.384 1.243zm255.632-2.88 4.22-4.77-.611-10c-.337-5.5-.215-10.62.27-11.378 1.802-2.817 3.105.106 3.105 6.968 0 8.85 1.5 9.781 7.041 4.37l3.9-3.809.28-11.994c.337-14.494 2.129-17.003 3.176-4.448.38 4.553 1.123 8.71 1.65 9.239.615.614 2.561-.61 5.395-3.391l4.434-4.352-.188-12.448c-.19-12.62.198-15.063 2.2-13.826.672.415 1.112 3.98 1.112 9.006 0 11.09 1.373 12.425 6.997 6.8l4.003-4.002v-13.2c0-10.116.292-13.105 1.25-12.788.79.262 1.546 3.701 2.054 9.334.442 4.905 1.257 9.369 1.811 9.919.674.669 2.313-.396 4.946-3.211l3.939-4.212v-12.122c0-9.252.296-12.024 1.25-11.707.77.255 1.525 3.412 1.964 8.214.393 4.29.963 8.048 1.267 8.352 1.15 1.15 3.013-2.055 4.123-7.09 4.842-21.95 4.732-20.828 2.525-25.724l-2.028-4.5-11.428-1.066c-15.94-1.487-21.874-.704-25.96 3.427-3.117 3.15-3.155 3.29-1.272 4.693 1.068.795 3.993 1.45 6.5 1.457 7.106.017 12.059 1.093 12.059 2.62 0 1.655.38 1.618-14.5 1.4l-12-.174-3.951 4.07c-4.914 5.061-3.949 6.69 3.753 6.33 7.703-.358 13.698.624 13.698 2.245 0 2.528-2.403 2.943-15.51 2.682l-13.011-.258-3.983 4.078c-5.086 5.208-4.09 5.955 8.004 5.996 9.719.033 12.908.99 10.695 3.208-.898.9-5.589 1.392-15.449 1.621-12.093.281-14.559.613-16.894 2.276-3.3 2.35-4.63 5.788-2.709 7.005.746.472 5.182.873 9.857.89 9.678.035 12.678 1.14 9.559 3.519-1.5 1.144-5.104 1.481-15.827 1.481h-13.886l-2.989 2.989c-1.644 1.644-2.748 3.379-2.453 3.855.294.476 5.161 1.183 10.815 1.57 11.077.758 13.543 1.771 10.281 4.225-1.612 1.212-3.939 1.383-12 .88-5.5-.343-11.146-.84-12.546-1.106-1.955-.37-3.545.44-6.853 3.494-2.369 2.187-4.112 4.565-3.873 5.284.316.953 4.46 1.512 15.245 2.055 8.384.422 15.4 1.234 16.17 1.872 1.026.852 1.357 4.588 1.357 15.338 0 7.816.284 14.495.631 14.842 1.06 1.06 3.955-1.022 8.385-6.029zM301.18 586.25c12.82-13.063 45.588-46.047 72.816-73.3 84.814-84.89 122.319-122.97 121.71-123.579-.323-.322-4.249.925-8.725 2.771l-8.137 3.358-104.508 104.355L269.827 604.21l2.773 2.895c1.526 1.592 3.336 2.895 4.022 2.895.686 0 11.737-10.688 24.557-23.75zm-60.622 14.695c1.893-1.835 3.443-3.874 3.443-4.53 0-1.56-5.267-2.497-16.393-2.916-7.213-.272-9.277-.694-10.312-2.11-.9-1.23-1.295-5.664-1.295-14.515 0-15.722-.663-17.874-5.507-17.874-2.16 0-3.771.561-4.104 1.43-.302.786.432 4.948 1.632 9.25 1.2 4.3 3.403 13.67 4.897 20.82l2.715 13 5.934.633c11.166 1.19 15.165.519 18.99-3.188zm11.303-59.695c-.135-24.613-.557-55.55-.938-68.75-.38-13.2-.808-41.775-.949-63.5-.14-21.725-.46-40.625-.71-42-.374-2.067-7.1-8.371-10.49-9.833-.425-.184-.78 9.491-.79 21.5-.021 28.822 1.905 160.348 2.655 181.247l.59 16.415 4.523 4.835c2.487 2.66 4.935 4.836 5.438 4.836.544 0 .816-18.158.67-44.75zm187.985 34.407 5.277-5.343-.311-13.407c-.264-11.389-.085-13.407 1.189-13.407 1.214 0 1.555 1.905 1.79 9.99.158 5.493.722 10.422 1.253 10.953.62.62 2.563-.603 5.435-3.421l4.47-4.387.276-13.985c.183-9.275.656-14.112 1.405-14.36.767-.256 1.262 2.679 1.546 9.163.23 5.247.914 10.036 1.52 10.642 1.787 1.787 5.205.026 8.336-4.296 2.851-3.936 2.909-4.259 2.438-13.665-.512-10.244.304-16.225 2.307-16.893.912-.304 1.224 2.173 1.224 9.707 0 12.411 1.066 13.454 7.343 7.184l4.157-4.153.5-13.66c.354-9.669.865-13.779 1.75-14.072.945-.313 1.25 2.055 1.25 9.701 0 11.933 1.084 13.302 6.428 8.121l3.297-3.195.716-13.183c.395-7.25.877-13.342 1.072-13.537.194-.195.834-.058 1.42.305.627.387 1.067 4.346 1.067 9.6 0 8.136.172 8.941 1.911 8.941 1.051 0 3.076-1.385 4.5-3.077 2.268-2.695 2.585-3.967 2.558-10.25-.017-3.945-.462-10.548-.988-14.673-1.197-9.373-2.782-10.986-10.842-11.033-3.101-.018-8.74-.432-12.532-.92-7.783-1.003-10.68-.28-14.857 3.704-5.002 4.772-3.526 6.008 7.75 6.492 4.552.195 6 .619 6 1.757 0 1.235-2.133 1.55-12.082 1.78l-12.083.279-3.3 3.405c-4.932 5.088-3.77 6.536 5.242 6.536 4.633 0 8.031.505 9.212 1.368 1.805 1.32 1.792 1.411-.37 2.569-1.604.858-5.482 1-13.6.5l-11.358-.699-4.744 4.483c-3.448 3.257-4.561 4.961-4.073 6.234.593 1.545 1.584 1.672 8.414 1.072 8.128-.714 13.742.465 12.993 2.73-.293.884-4.631 1.387-15.027 1.743l-14.615.5-3.554 3.446c-4.704 4.56-4.648 6.708.195 7.463 2.062.321 6.034.51 8.826.421 6.167-.198 8.544.878 6.017 2.726-1.24.906-4.925 1.11-13.402.738l-11.691-.513-3.362 3.523c-1.85 1.938-3.097 3.953-2.772 4.479.325.526 4.676 1.275 9.67 1.666 7.73.605 9.031.959 8.754 2.38-.285 1.46-1.992 1.671-13.534 1.671h-13.209l-3.74 3.733c-5.413 5.403-4.074 6.159 11.991 6.767 7.261.275 13.764.864 14.452 1.309.758.49 1.252 3.05 1.255 6.5.011 11.893 1.294 25.191 2.43 25.191.623 0 3.508-2.404 6.41-5.343zm-151.022-1.026c.456-2.297-2.524-2.058-3.788.303-.57 1.064-1.035 2.469-1.035 3.122 0 1.747 4.42-1.392 4.823-3.425zm257.055-6.881c1.519-4.123 2.126-11.63.998-12.327-1.05-.648-12.876 10.216-12.876 11.828 0 1.212 4.056 2.614 7.775 2.686 2.516.048 3.467-.458 4.103-2.187zm-248.822-1.594c2.655-2.15 2.078-5.156-.99-5.156-2.25 0-4.503 3.42-3.674 5.578.729 1.9 1.93 1.792 4.664-.422zm-33.93-4.906c5.052-8.874 11.713-19.018 17.819-27.135 3.055-4.062 6.426-8.562 7.49-10 1.065-1.438 4.246-5.09 7.07-8.115 10.176-10.904 21.279-27.515 20.225-30.26-.788-2.054-7.452-4.997-9.142-4.038-1.19.675-9.513 11.473-14.615 18.96-.81 1.19-4.947 6.428-9.193 11.641-16.542 20.311-24.856 35.077-25.577 45.426-.762 10.954 1.072 12.044 5.923 3.521zm44.406-5.285c1.794-1.982 1.786-2.091-.28-4.158-2.024-2.024-2.24-2.044-4.687-.441-2.796 1.831-3.232 3.567-1.365 5.434 1.784 1.784 4.257 1.458 6.332-.835zm-89.848-6.584c.68-1.774-1.51-176.49-2.26-180.131-.254-1.238-.878-2.25-1.386-2.25-.509 0-3.691 4.612-7.073 10.25l-6.149 10.25.593 34c.327 18.7.857 51.775 1.178 73.5.342 23.079 1.024 40.932 1.64 42.944 1.173 3.827 9.26 13.056 11.441 13.056.767 0 1.674-.728 2.016-1.619zm99.74-3.298c2.067-2.283.844-5.546-2.47-6.598-4.218-1.338-7.036 5.203-3.204 7.435 2.55 1.486 3.73 1.312 5.675-.837zm9.376-9.283c2.688-2.688-.209-7.8-4.42-7.8-3.607 0-4.765 3.24-2.285 6.393 2.202 2.8 4.773 3.339 6.705 1.407zm10.866-11.373c.74-1.93-2.098-6.112-4.711-6.941-2.088-.663-5.955 1.77-5.955 3.746 0 .507 1.338 2.26 2.973 3.895 2.523 2.522 3.288 2.804 5.056 1.857 1.146-.613 2.333-1.764 2.637-2.557zm-72.752-4.074c2.59-1.455 5.688-4.043 6.884-5.75a135.925 135.925 0 0 1 4.372-5.837c1.208-1.503 1.993-2.937 1.744-3.186-.46-.459-10.73 5.93-16.664 10.366-3.054 2.283-4.1 4.87-2.583 6.387.962.963 1.076.927 6.247-1.98zm82.892-7.115c.195-1.293-1.043-3.344-3.403-5.635-3.968-3.854-5.306-4.3-7.203-2.403-2.28 2.28-1.316 5.924 2.49 9.41 3.326 3.046 3.895 3.246 5.75 2.02 1.133-.747 2.198-2.274 2.366-3.392zM76.345 507.75c.765-1.238 2.4-5.4 3.634-9.25 4.365-13.622 3.931-13.108 11.682-13.84 3.761-.355 8.944-.649 11.518-.653 5.818-.009 7.52-1.6 8.306-7.769 1.369-10.737 2.512-16.53 3.497-17.716.573-.69 6.1-2.047 12.28-3.013 7.298-1.141 11.676-2.307 12.488-3.324.8-1.004 1.255-5.002 1.265-11.126.02-13.451.512-14.165 10.87-15.772 4.601-.714 9.548-1.864 10.99-2.554 2.6-1.245 2.628-1.373 2.907-13.702.295-13 1.28-16.031 5.205-16.031 2.431 0 15.269-4.081 16.9-5.373 1.103-.874 1.252-3.292.73-11.888-.637-10.482-.587-10.86 1.749-13.196 1.322-1.322 4.368-2.886 6.769-3.475 2.4-.589 5.94-1.858 7.865-2.82l3.5-1.748.256-10.5c.14-5.775.783-11.52 1.429-12.768 1.034-2 .773-2.68-2.203-5.75-3.733-3.852-5.462-4.235-8.744-1.936-2.067 1.448-2.192 2.214-1.973 12.077.277 12.421.648 11.921-11.688 15.767-4.576 1.427-8.885 3.276-9.577 4.11-.846 1.02-1.049 3.068-.617 6.258 1.909 14.13 1.934 16.234.214 18.134-.925 1.023-3.126 2.136-4.89 2.473-9.847 1.882-13.13 2.741-14.35 3.754-1.013.84-1.357 4.362-1.357 13.881 0 9.096-.365 13.058-1.27 13.81-.7.58-5.312 1.59-10.25 2.246-14.073 1.867-13.191.97-13.632 13.856-.463 13.528-.774 13.942-11.794 15.695-8.65 1.377-12.917 3.005-14.133 5.393-.42.825-1.317 5.408-1.994 10.185-.676 4.777-1.577 9.249-2.002 9.937-.449.726-5.298 1.797-11.549 2.55-5.926.714-11.297 1.867-11.935 2.563-.638.696-2.45 5.048-4.028 9.67-1.577 4.624-3.51 9.05-4.295 9.834-1.01 1.01-3.212 1.33-7.523 1.094L54.5 496.5v12l7.5.57c4.125.313 8.727.65 10.227.75 1.874.124 3.162-.523 4.118-2.07zm200.963-10.378c19.066-12.896 24.304-17.333 23.362-19.79-.518-1.35-1.439-1.056-5.892 1.881-2.903 1.915-9.553 6.219-14.778 9.565-17.902 11.464-21.474 14.287-21.816 17.241-.18 1.543.172 2.731.808 2.731.618 0 8.86-5.233 18.316-11.628zm79.378 9.454c1.273-1.196 2.314-2.802 2.314-3.57 0-2.011-11.208-14.255-13.05-14.255-3.7-.001-5.195 5.372-2.642 9.499 1.863 3.01 9.06 10.46 10.128 10.481.514.01 1.977-.96 3.25-2.155zm202.881-8.288c.887-1.354 1.843-4.174 2.123-6.267l.51-3.805-24.643-23.983c-13.554-13.19-25.576-24.412-26.715-24.937-1.733-.798-2.695-.286-5.89 3.14l-3.818 4.093 27.183 27.1c14.95 14.905 27.735 27.105 28.41 27.11.675.006 1.953-1.097 2.84-2.45zm-191.116-3.484c1.687-1.863 1.672-2.072-.33-4.883-5.558-7.807-11.065-10.353-14.207-6.568-1.415 1.706.641 5.171 5.977 10.073 4.146 3.808 6.08 4.119 8.56 1.378zm-90.855-12.352c12.89-8.854 17.994-12.915 18.224-14.504.793-5.462-2.527-3.848-24.32 11.83-3.85 2.77-8.463 5.965-10.25 7.102-2.445 1.555-3.25 2.786-3.25 4.969 0 1.595.38 2.901.846 2.901.466 0 8.904-5.534 18.75-12.298zm100.09 3.124c1.272-1.196 2.314-2.884 2.314-3.75-.001-2.514-10.423-13.235-12.203-12.552-1.452.557-3.797 4.552-3.797 6.468 0 .993 9.915 12.008 10.81 12.008.308 0 1.603-.978 2.876-2.174zm-28.924-6.503c10.982-5.556 17.991-17.03 18.988-31.083.596-8.406-1.532-15.719-4.883-16.782-2.414-.766-7.478 2.532-13.842 9.016-6.365 6.486-7.18 6.112-7.018-3.224.074-4.263.102-8.313.064-9-.14-2.479-2.616-1.148-8.266 4.443-3.164 3.13-6.029 5.417-6.366 5.08-.337-.338-.97-3.462-1.404-6.943-.969-7.748-2.935-14.86-4.623-16.719-1.073-1.181-1.906-1.132-5.587.334-5.26 2.095-7.027 3.605-11.764 10.055-5.749 7.826-6.564 10.691-6.54 23 .019 9.546.33 11.595 2.355 15.5 4.541 8.758 12.417 15.256 22.624 18.666 6.53 2.18 19.63 1.012 26.262-2.343zM62.05 477.208c2.998-2.636 8.825-7.543 12.95-10.905 16.079-13.105 40.662-39.666 59.978-64.803 14.904-19.396 42.075-61.676 52.519-81.725 5.718-10.978 4.852-11.78-6.874-6.363-8.091 3.737-9.556 5.29-17.065 18.088-9.99 17.024-10.415 17.697-25.96 41-21.594 32.372-41.176 55.131-70.525 81.968L53 467.338v7.33c0 9.114 1.194 9.449 9.05 2.54zm205.45-2.233c3.85-2.755 10.716-7.588 15.259-10.742 7.913-5.493 10.096-8.041 8.751-10.217-.87-1.408-5.852 1.445-20.51 11.746-10.191 7.162-12.558 9.288-12.816 11.511-.453 3.897 1.24 3.48 9.316-2.298zm121.671-.63c1.006-.91 1.829-2.073 1.829-2.583 0-1.988-15.311-18.762-17.126-18.762-1.593 0-1.874.784-1.874 5.223 0 5.065.188 5.413 6.221 11.5 6.597 6.657 8.033 7.262 10.95 4.622zm183.809-7.305c1.11-2.178 2.02-4.78 2.02-5.782C575 458.8 533.973 418 531.5 418c-2.317 0-7.5 4.792-7.502 6.937-.003 1.817 43.899 46.02 45.732 46.046.676.009 2.139-1.765 3.25-3.943zm-173.514-3.003c.977-1.08 1.533-2.542 1.235-3.25-.593-1.41-10.925-13.831-19.372-23.287-5.896-6.601-7.284-6.466-7.314.712-.013 3.304 1.154 5.037 10.615 15.75 5.847 6.621 11.177 12.038 11.845 12.038.668 0 2.014-.883 2.991-1.963zm-129.27-6.136c5.668-3.904 12.417-8.516 15-10.25 4.567-3.066 6.804-6.124 6.804-9.305 0-2.305-1.371-1.534-18.436 10.366-14.66 10.222-17.516 12.938-16.07 15.28 1.061 1.715 2.087 1.223 12.703-6.09zm-210.58-2.144c6.397-4.974 37.383-36.874 43.056-44.326 3.336-4.383 6.805-8.582 7.71-9.332 4.91-4.076 35.374-48.079 45.438-65.634 4.952-8.636 6.26-12.465 4.258-12.465-2.296 0-33.807 15.999-35.69 18.12-1.16 1.31-3.671 5.08-5.578 8.38-14.96 25.884-35.031 51.28-55.941 70.784-11.403 10.636-10.318 7.659-10.012 27.466.128 8.31.333 9.25 2.008 9.25 1.026 0 3.163-1.01 4.75-2.243zm350.38-2.252c1.513-1.824.499-3.542-7.828-13.26-3.18-3.71-7.63-9.22-9.891-12.245-2.26-3.025-5.967-7.49-8.236-9.922-3.531-3.786-4.32-4.218-5.476-3-3.637 3.83-3.02 5.312 7.53 18.092 17.463 21.156 20.837 24.027 23.9 20.335zM278.06 437.824c17.183-11.813 18.797-13.192 23.698-20.25 2.893-4.166 4.854-7.574 4.359-7.574-.496 0-9.352 6.297-19.68 13.993-10.329 7.697-20.955 15.46-23.614 17.25-4.7 3.166-6.724 6.492-5.327 8.753.378.61 1.01.973 1.406.807.395-.167 9.017-6.007 19.158-12.98zm141.372 6.25c.958-1.059 1.59-2.627 1.405-3.485-.311-1.437-13.316-17.542-20.338-25.185-2.124-2.312-4.242-3.458-7.25-3.923-2.925-.452-4.25-.297-4.25.498 0 1.298 3.678 6.482 8.964 12.638 1.945 2.264 6.613 8.001 10.374 12.75 3.761 4.748 7.404 8.633 8.095 8.633.692 0 2.041-.867 3-1.926zm167.578-5.324c3.803-6.237 3.406-6.887-15.253-25-9.49-9.212-17.995-16.75-18.9-16.75-2.12 0-7.858 5.34-7.858 7.314 0 1.833 36.817 37.686 38.7 37.686.731 0 2.221-1.462 3.311-3.25zm122.703-21.107.215-18.858-2.215.672c-6.067 1.84-7.248-.43-3.566-6.854 2.156-3.76 2.366-5.355 2.52-19.103.092-8.25.718-17.524 1.391-20.61 1.042-4.773.985-6.314-.384-10.331-1.48-4.344-1.48-5.055.01-8.89 1.917-4.93 2.972-17.669 1.464-17.669-.558 0-1.281.84-1.607 1.868-1.126 3.548-4.432 5.534-9.294 5.584l-4.647.048-2.237 6.247c-1.23 3.436-3.384 8.386-4.787 11-3.775 7.033-5.564 12.829-6.675 21.623-1.053 8.332-1.04 8.406 5.142 28.13 1.034 3.3 1.948 8.7 2.032 12 .31 12.146 2.06 20.477 5.33 25.372 3.404 5.091 10.427 9.38 14.594 8.91l2.5-.282.214-18.857zm-446.54 14.088c4.69-3.544 30.777-21.982 40.064-28.317 6.148-4.194 6.924-5.722 3.762-7.414-2.679-1.434-3.322-1.052-23.5 13.95-9.35 6.952-19.137 14.159-21.75 16.015-3.753 2.666-4.75 3.968-4.75 6.205 0 3.622.881 3.56 6.173-.44zM354.596 430c3.143-2.75 6.182-5 6.754-5 .572 0 2.265 1.174 3.763 2.61 1.498 1.434 3.18 2.327 3.737 1.982.557-.344 1.52-3.206 2.14-6.359 2.227-11.325 4.293-16.932 10.957-29.733 8.523-16.373 11.055-23.203 11.042-29.788-.02-10.515-5.978-18.312-16.99-22.232-5.733-2.04-11.521-1.255-19.155 2.598-7.239 3.654-9.718 7.214-18.053 25.922-5.885 13.207-8.712 17.93-18.542 30.984-4.191 5.566-4.165 7.016.128 7.016 4.291 0 5.048 1.04 6.545 9 .673 3.575 1.424 7.513 1.67 8.75.74 3.741 3.856 2.61 8.824-3.204 5.078-5.945 4.898-5.334 9.633-32.546 3.659-21.028 6.563-27.945 13.971-33.27 4.381-3.149 7.482-3.411 12.43-1.052 2.594 1.237 3.957 2.824 5.183 6.033 1.57 4.114 1.56 4.698-.21 10.572-2.073 6.88-9.104 17.853-19.364 30.217-12.17 14.666-12.325 14.948-12.858 23.248-.364 5.682-.147 7.673.91 8.342.763.484 1.474.886 1.58.895.105.008 2.763-2.235 5.905-4.985zm75.203 3.8c2.226-2.226 1.228-4.038-7.397-13.434-7.62-8.302-8.984-9.366-12-9.366-1.872 0-3.403.496-3.403 1.101C407 414.12 425.132 435 426.884 435c.944 0 2.256-.54 2.916-1.2zm303.2-3.777c0-5.697-7.284-7.725-8.62-2.4-.827 3.294 1.204 5.377 5.242 5.377 3.08 0 3.378-.262 3.378-2.977zm18.232-1.54c10.038-4.078 14.393-9.77 10.018-13.091-2.584-1.961-4.78-1.714-14.998 1.69-8.647 2.881-11.006 4.716-8.252 6.418.55.34 1 1.866 1 3.392 0 1.526.3 3.075.667 3.441 1.299 1.3 5.451.635 11.565-1.85zM439.8 423.8c2.123-2.123 1.301-4.471-3.393-9.692-4.634-5.154-7.885-6.357-11.315-4.186-1.138.72-.768 1.725 1.927 5.235 7.485 9.75 9.984 11.44 12.781 8.643zM67.87 410.27c13.514-13.987 22.618-24.696 30.836-36.27 8.17-11.508 15.294-23.378 15.294-25.485 0-2.316-3.24-1.48-12.867 3.315-6.637 3.306-7.82 4.364-11.928 10.67-6.302 9.675-19.055 25.412-28.514 35.186l-7.922 8.187.01 6.313c.016 9.482.082 9.812 1.971 9.834.962.01 6.867-5.277 13.12-11.75zm199.698 3.48c4.617-3.438 12.678-9.38 17.913-13.207 5.236-3.827 9.519-7.54 9.519-8.25 0-2.583-5.21-1.202-10.793 2.859C261.41 411.737 257 415.47 257 418.196c0 2.885 1.657 2.188 10.568-4.446zm182.379-.186c2.559-3.083-2.375-7.779-6.947-6.612-3.064.782-3.078 1.098-.22 4.964 2.45 3.314 5.25 3.958 7.167 1.648zm153.815-3.274c1.244-2.234 1.997-4.755 1.672-5.6-.695-1.813-30.013-29.69-31.224-29.69-1.038 0-3.033 1.706-6.174 5.282l-2.444 2.781 12.954 13.074c13.405 13.53 20.043 19.16 21.886 18.562.587-.19 2.086-2.174 3.33-4.409zm121.81 2.945c2.035-1.393 2.41-4.332.857-6.703-2.139-3.264-4.057-3.776-7.492-2-2.179 1.127-2.937 2.236-2.937 4.294 0 1.526.54 3.314 1.2 3.974 1.319 1.319 6.676 1.597 8.373.435zM360.314 395.75c4.635-5.638 10.36-13.948 12.725-18.467 4.107-7.851 4.245-8.395 3.1-12.214-2.848-9.51-11.11-9.346-17.532.348-4.42 6.672-6.246 12.316-8.525 26.35-2.914 17.948-1.652 18.44 10.232 3.983zm-89.257 1c11.867-8.671 13.741-10.75 9.693-10.75-3.901 0-23.749 14.703-23.749 17.593 0 2.726 2.877 1.325 14.056-6.843zm148.52 7.172c40.598-4.007 80.053-20.07 118.84-48.382 13.368-9.757 22.41-17.462 25.67-21.87l2.22-3.003-2.264-1.834c-4.062-3.29-8.615-2.403-14.395 2.802-2.83 2.55-6.272 5.34-7.647 6.201-1.375.862-5.2 3.668-8.5 6.236-40.351 31.4-90.255 49.693-136.807 50.15-10.24.101-10.908.236-12.75 2.577-2.436 3.097-2.533 6.9-.193 7.512 3.456.903 25.117.668 35.826-.39zm39.424.11c0-.533-.675-.71-1.5-.394-.825.317-1.5.753-1.5.969 0 .216.675.393 1.5.393s1.5-.436 1.5-.969zM60.62 390.25c8.93-8.601 23.261-27.447 21.359-28.087-1.32-.444-27.263 10.806-28.214 12.234-.918 1.38-1.006 19.029-.098 19.936 1.186 1.187 1.942.742 6.952-4.083zm203.838-1.217c7.897-6.284 9.181-7.794 7.8-9.175-1.58-1.58-4.61-.237-10.743 4.76-5.028 4.095-6.615 6.949-4.848 8.715 1.039 1.04 1.177.963 7.791-4.3zm57.906 2.33c4.296-4.296 3.53-5.902-4.011-8.412-8.162-2.716-30.063-12.622-36.853-16.668-6.79-4.046-20.63-13.581-29.607-20.396-8.461-6.423-28.744-26.927-37.232-37.637-3.16-3.987-6.29-7.248-6.954-7.246-2.106.007-7.707 3.91-7.707 5.371 0 3.752 25.123 31.348 38.5 42.29 17.805 14.565 34.217 25.478 48.5 32.248 11.178 5.3 29.427 12.93 31.114 13.01.887.042 2.8-1.11 4.25-2.56zm405.886-1.13c2.448-2.159 2.18-4.893-.767-7.84-3.302-3.302-7.987-2.967-10.764.77-5.104 6.867 4.846 12.968 11.531 7.07zm-108.8-4.577c1.402-1.84 2.55-4.108 2.55-5.04 0-1.91-20.695-23.58-24.426-25.576-2.107-1.128-2.802-1.014-5.49.9-1.694 1.206-3.372 3.36-3.73 4.786-.583 2.324.728 3.928 12.62 15.434 7.298 7.062 13.867 12.84 14.597 12.84.73 0 2.475-1.505 3.878-3.344zm-358.369-8.737c1.983-1.983 2-2.173.345-4-3.55-3.923-7.328-1.422-5.423 3.59 1.155 3.036 2.355 3.133 5.078.41zM423 371.509c28.697-5.865 58.01-16.627 75-27.534 12.078-7.753 26.118-17.448 27.532-19.01 1.658-1.833 1.622-1.956-.86-2.9-1.427-.542-4.749-1.269-7.383-1.615-4.386-.577-5.168-.34-9.289 2.814-10.675 8.169-35.174 21.345-47.5 25.546-21.504 7.33-36.046 10.88-50.493 12.326-5.779.579-11.034 1.486-11.679 2.016-1.47 1.208-2.74 8.373-1.763 9.953.92 1.488 15.717.595 26.435-1.596zm302.572-4.818c3.308-2.845 2.68-5.993-1.643-8.228-1.61-.833-2.929-2.178-2.929-2.989 0-3.446-5.293-.463-6.96 3.923-1.486 3.905-1.305 5.338.96 7.603 2.668 2.668 7.267 2.534 10.572-.309zm-387.915-3.412c.955-2.286 1.22-4.25.687-5.095-.477-.756-4.462-2.805-8.855-4.554-10.88-4.33-32.158-15.707-41.941-22.424-13.759-9.447-34.552-27.37-44.032-37.956-5.11-5.706-7.413-6.389-12.566-3.724-1.622.839-2.95 1.77-2.95 2.07 0 3.397 20.173 24.333 35.5 36.842 13.154 10.735 18.015 14.1 30 20.77 8.416 4.683 14.905 7.71 36 16.795 4.374 1.884 6.532 1.164 8.157-2.724zm409.82-.374c14.713-4.807 18.951-10.63 12.461-17.12-2.932-2.933-3.323-3.037-9.25-2.462-5.8.563-23.142 5.886-25.053 7.69-.476.45.53 1.538 2.233 2.419 3.46 1.789 6.132 6.155 6.132 10.018 0 3.378 1.679 3.31 13.477-.545zm-107.526-2.502c1.737-1.978 3.021-4.131 2.854-4.784-.421-1.64-23.982-23.619-25.319-23.619-.594 0-2.85 1.812-5.011 4.026-3.219 3.296-3.735 4.339-2.85 5.75C611.92 345.43 632.996 364 634.848 364c1.07 0 3.367-1.619 5.104-3.597zm-206.49-9.388c9.33-2.29 21.03-5.751 26-7.691C478.184 336.017 503 322.299 503 319.258c0-.692-.42-1.258-.934-1.258-1.802 0-18.605-11.88-22.519-15.92-2.174-2.244-4.748-4.08-5.72-4.08-.973 0-3.694 1.283-6.048 2.851a9818.12 9818.12 0 0 1-10.15 6.75 3569.91 3569.91 0 0 0-10.983 7.327c-5.234 3.51-27.009 13.442-38.646 17.627-3.575 1.286-10.301 2.81-14.947 3.388-9.832 1.222-11.517 2.248-7.287 4.436 3.598 1.86 7.59 6.439 10.374 11.896l2.045 4.008 9.157-.552c5.667-.342 15.624-2.14 26.12-4.716zm-87.527-5.24c2.698-2.874 4.73-5.51 4.514-5.859-.215-.349-3.42-.944-7.12-1.323-10.143-1.04-26.59-4.363-38.184-7.718-5.696-1.647-10.537-2.816-10.756-2.596-.921.921 3.982 3.97 18.612 11.576 12.788 6.648 22.731 10.689 27.264 11.08.42.035 2.972-2.286 5.67-5.16zm378.147-1.64 2.303-1.865.37-51.385c.204-28.262.005-54.744-.442-58.85-.798-7.337-.868-7.48-4.105-8.406-2.058-.59-3.646-.59-4.234-.002-1.153 1.152-1.78 119.32-.643 121.123 1.138 1.805 4.095 1.536 6.751-.615zm-60.25-8.466c5.636-5.673 6.987-7.563 5.976-8.361C667.472 325.465 640.946 312 639.65 312c-1.489 0-9.651 5.844-9.651 6.91 0 .954 24.756 24.09 25.777 24.09.425 0 4.05-3.299 8.055-7.33zm84.118 1.153 5.102-1.177 4.09-12.974c2.25-7.135 4.48-15.943 4.955-19.572 1.17-8.935.156-27.235-2.25-40.599-2.167-12.032-7.406-30.325-9.209-32.152-.625-.633-3.049-1.46-5.385-1.837-5.694-.92-6.083.453-2.891 10.204 4.763 14.551 6.803 25.33 7.342 38.785.683 17.084-.72 28.088-5.67 44.48-2.238 7.415-3.85 14.053-3.583 14.75.599 1.56 1.112 1.567 7.5.092zm-401.271-6.336c.383-1.173-9.746-7.486-12.012-7.486-2.038 0-5.98 5.086-4.831 6.235 2.167 2.167 16.202 3.21 16.843 1.251zm52.838-2.87c11.967-3.398 26.52-9.388 35.603-14.653 10.001-5.798 32.21-20.45 33.68-22.22.937-1.13.637-2.782-1.421-7.837-2.479-6.087-2.584-7.079-2.123-19.906.523-14.555 2.075-20.435 7.947-30.11 1.539-2.536 2.798-5.079 2.798-5.65 0-.571 2.72-4.04 6.045-7.709 4.8-5.297 5.91-7.12 5.383-8.85-.364-1.2-4.163-13.206-8.442-26.681-11.322-35.653-13.302-42.611-17.605-61.876-2.134-9.557-4.331-17.995-4.881-18.75-1.586-2.178-14.43-3.32-50-4.446-32.826-1.04-54.945-.442-78.5 2.12-16.057 1.747-33.783 5.313-36.46 7.335-1.059.8-1.671 4.172-2.157 11.867-.803 12.741-1.187 12.482 11.58 7.823 11.849-4.324 17.436-4.769 25.637-2.04 8.468 2.818 13.966 7.731 18.378 16.425 2.836 5.587 3.364 7.796 3.77 15.77.317 6.237-.071 12.217-1.188 18.272a870.72 870.72 0 0 0-3.157 18.5c-.823 5.225-2.62 13.639-3.992 18.697-3.687 13.588-3.277 14.543 8.958 20.883 8.646 4.48 10.147 5.662 12.7 10 3.27 5.555 3.59 7.629 1.447 9.407-1.23 1.02-1.778.719-3.2-1.76-1.286-2.239-4.725-4.47-13.663-8.86-16.415-8.063-17.79-10.66-13.726-25.934 2.603-9.781 4.604-22.235 3.716-23.123-.406-.407-1.32-.305-2.029.225-.71.53-3.174 2.315-5.477 3.965a408.33 408.33 0 0 0-7.8 5.75c-1.986 1.512-4.225 2.75-4.975 2.75-3.246 0-.83-4.252 6.225-10.953 4.173-3.963 7.353-7.44 7.067-7.726-.286-.286-2.013-.028-3.837.573-1.824.602-6.72 1.145-10.88 1.207-6.058.09-8.904-.424-14.299-2.583-9.015-3.606-9.633-3.255-9.105 5.18.234 3.741.642 13.102.906 20.802.522 15.259 2.216 24.613 8.056 44.496 5.834 19.864 17.13 39.534 30.223 52.627 6.32 6.32 21.566 16.023 29.09 18.514 8.294 2.746 27.24 2.02 39.708-1.52zm-52.394-20.54c-2.072-1.281-.904-4.3 2.414-6.237 5.73-3.347 14.682-5.009 21.266-3.948 7.824 1.26 16.198 5.46 16.198 8.126 0 2.428-1.944 2.51-8 .343-2.799-1.002-8.092-1.658-14-1.736-8.175-.107-9.992.182-13.03 2.071-2.167 1.348-4.038 1.88-4.848 1.38zm11.051-17.15c-13.735-1.783-22.106-6.77-16.423-9.784 1.18-.626 4.195-.288 9.25 1.038 8.46 2.217 16.278 1.998 26.838-.753 6.991-1.821 9.624-1.002 7.553 2.35-.953 1.542-17.405 8.185-19.891 8.031-.55-.034-3.847-.431-7.327-.883zm-34.625-11.774c-.322-1.016.312-3.829 1.41-6.25 1.1-2.421 2.008-5.174 2.02-6.117.032-2.471 3.372-3.983 6.323-2.86 1.841.7 3.618.375 7.315-1.334 8.098-3.743 10.122-3.933 16.508-1.545l5.795 2.167 3.722-2.3c4.253-2.629 12.004-3.067 19.13-1.083 3.73 1.039 4.75.945 8.063-.745 2.085-1.064 4.26-1.63 4.834-1.26.573.371 1.614 3.15 2.314 6.175s1.872 6.974 2.604 8.774c2.717 6.68-.391 8.274-8.163 4.185-6.486-3.411-10.776-3.705-19.779-1.355-4.283 1.118-9.628 1.532-17.644 1.365-21.075-.438-21.455-.411-26.135 1.854-5.497 2.661-7.55 2.743-8.317.329zm49.952-40.165c-3.947-1.692-8.09-2.816-9.5-2.577-4.087.692-11-4.504-11-8.268 0-.543 1.165-2.373 2.589-4.065 2.212-2.63 3.27-3.077 7.271-3.077 4.038 0 5.627.688 11.541 5 5.708 4.161 7.58 5 11.157 5 8.764 0 10.17-6.53 2.942-13.657-4.98-4.91-5.202-5.498-2.929-7.772 2.108-2.107 2.386-2.048 7.27 1.544 7.45 5.478 9.768 12.822 6.571 20.813-3.843 9.605-13.704 12.29-25.912 7.059zm29.807-38.65c-16.872-14.035-21.936-20.614-21.035-27.33.43-3.2.01-4.59-2.363-7.816-1.587-2.158-3.003-4.996-3.147-6.307-.232-2.11.142-2.384 3.265-2.384 1.94 0 4.64-.718 6-1.596 6.007-3.877 20.384-9.81 25.202-10.402 7.918-.971 28.355 3.825 38.978 9.148 5.456 2.735 15.876 10.602 15.507 11.71-.833 2.503-4.535 1.582-16.602-4.13-17.648-8.352-26.24-10.674-36.373-9.829-5.441.454-9.468 1.441-12.834 3.147-6.425 3.256-6.255 4.645.345 2.818 9-2.492 23.707-2.922 30.9-.904 8.356 2.345 34.624 15.248 35.902 17.636.697 1.301.684 2.526-.04 3.88-1.756 3.282-4.827 4.3-10.907 3.62-4.552-.511-6.262-.254-9.105 1.369-7.535 4.301-11.937 5.971-20.244 7.681-7.324 1.508-9.665 1.603-15.386.623-3.71-.636-7.157-.903-7.658-.593-.5.31 1.671 3.172 4.827 6.361 3.85 3.89 5.538 6.319 5.13 7.38-1.03 2.687-3.299 1.794-10.362-4.081zM415 181.298c-2.839-1.034-6.904-5.583-7.528-8.426-.766-3.486-2.261-4.585-3.136-2.304-1.515 3.947 5.19 11.41 10.164 11.314 1.409-.027 1.557-.2.5-.585zm-13.566-2.547c-2.291-7.355-2.55-7.565-6.887-5.59-3.434 1.565-3.205 3.468.703 5.851 4.539 2.767 7.094 2.66 6.184-.261zm22.45.62c2.93-2.054 6.596-10.078 4.204-9.203-1.21.442-8.157 10.833-7.243 10.833.39 0 1.758-.734 3.038-1.63zm16.062-1.215c4.486-2.155 4.817-3.596 1.17-5.107-4.135-1.713-6.21-1.05-8.388 2.678-3.218 5.51-.854 6.306 7.218 2.43zM455 144.41c-5.666-2.523-17.968-6.4-25.5-8.038-15.041-3.269-29.212-2.03-43.189 3.778-8.546 3.55-13.635 3.588-14.13.103-.716-5.037 8.246-12.114 21.373-16.88 12.178-4.42 36.075-2.135 48.024 4.592 12.723 7.163 22.545 14.16 22.228 15.833-.43 2.27-4.452 2.55-8.806.612zm143.5 182.656c0-.789-2.475-2.888-5.5-4.664-5.685-3.339-14.491-11.288-19.277-17.401a1874.84 1874.84 0 0 0-5.187-6.592C566.53 295.873 551 268.486 551 267.482c0-.163-1.956-4.501-4.346-9.64-9.819-21.11-27.992-76.783-34.075-104.391-.843-3.823-2.423-10.133-3.513-14.022-1.09-3.889-2.928-11.539-4.085-17-2.348-11.075-4.029-13.429-9.592-13.429-3.157 0-3.39.223-3.39 3.25-.003 6.446 10.873 50.3 17.917 72.25 16.16 50.35 21.687 65.002 35.081 93 7.272 15.2 12.957 24.096 22.411 35.072 7.013 8.14 11.304 11.527 18.194 14.356 5.612 2.305 12.898 2.382 12.898.137zm-272.853-2.632c4.405-3.61 5.338-6.048 3.153-8.233-2.098-2.098-4.15-1.244-10.179 4.233-6.376 5.792-6.59 7.567-.915 7.567 2.633 0 4.746-.95 7.941-3.567zm245.353-.81c0-.758-.701-1.96-1.559-2.672-2.787-2.313-14.715-18.284-18.635-24.951-3.472-5.906-10.295-19.527-16.28-32.5-7.571-16.416-14.443-35.124-22.04-60-2.015-6.6-4.28-13.8-5.034-16-4.796-14-17.862-64.294-19.024-73.232-.857-6.584-2.044-8.153-6.428-8.495-3.123-.244-3.533.012-3.806 2.372-.262 2.262 1.526 12.668 4.874 28.355 4.592 21.52 20.375 73.083 30.38 99.253 11.49 30.056 12.084 31.416 22.238 50.944 14.24 27.384 23.445 38.205 32.564 38.28 1.68.014 2.75-.513 2.75-1.355zm41.418.77c3.071-1.179 1.508-3.155-5.049-6.383-8.38-4.125-19.117-14.23-27.209-25.605-5.856-8.233-17.937-31.601-23.474-45.405-7.196-17.94-21.31-61.17-26.773-82a887.72 887.72 0 0 0-4.404-16c-1.34-4.675-3.797-14.125-5.46-21-3.19-13.191-4.303-15-9.24-15-2.437 0-2.809.386-2.809 2.92 0 5.924 9.32 44.266 18.13 74.58 8.243 28.363 25.407 72.372 33.737 86.5 16 27.137 20.585 32.8 33.849 41.807 7.29 4.95 14.638 7.146 18.702 5.586zm-299.709-4.53c3.492-2.274 7.278-5.44 8.413-7.034 1.933-2.714 1.96-3.054.447-5.363-.888-1.356-2.33-2.466-3.202-2.466-.873 0-4.025 2.228-7.004 4.951-2.98 2.724-7.206 5.957-9.39 7.185-4.162 2.338-5.257 5.382-2.223 6.175 4.333 1.132 7.033.414 12.96-3.447zm237.853.037c.374-.605-.27-2.292-1.431-3.75-10.917-13.706-23.755-39.272-36.482-72.65-6.134-16.086-23.473-69.65-27.031-83.5-5.84-22.732-9.19-37.56-11.296-50-.326-1.925-1.276-4.288-2.112-5.25-1.899-2.186-7.057-2.313-7.87-.195-1.465 3.819 6.794 39.53 15.136 65.445 2.39 7.425 7.339 22.95 10.998 34.5 3.66 11.55 8.167 25.275 10.016 30.5 3.148 8.898 4.747 13.058 12.295 32 6.043 15.164 19.119 40.489 24.326 47.113 4.207 5.352 11.722 8.585 13.45 5.787zm-251.322-7.15c8.083-4.306 14.76-10.379 14.76-13.424 0-1.876-2.786-5.326-4.301-5.326-.546 0-3.108 1.98-5.695 4.399-2.586 2.42-8.387 6.54-12.891 9.157s-8.466 5.206-8.804 5.753c-.92 1.488 2.668 3.691 6.013 3.691 1.618 0 6.53-1.913 10.918-4.25zm402.97 3c1.806-1.418 5.18-12.311 4.269-13.784-.847-1.37-4.045-1.197-5.255.284-1.103 1.351-4.224 11.276-4.224 13.431 0 1.67 3.118 1.711 5.21.069zm-170.542-1.328c.333-.868-.287-2.774-1.378-4.236-1.615-2.162-3.325-2.882-9.177-3.862-11.354-1.9-20.198-6.52-27.3-14.26-3.313-3.61-7.406-9.264-9.094-12.564-6.852-13.39-3.84-34.519 6.584-46.21 1.522-1.707 1.834-3.06 1.368-5.931-.332-2.046-1.226-4.342-1.986-5.103-3.306-3.305-13.264 9.873-17.565 23.244-3.568 11.095-3.728 27.26-.352 35.605 3.45 8.527 7.917 14.59 15.136 20.546 11.451 9.445 23.448 14.086 36.877 14.265 4.853.065 6.42-.275 6.887-1.494zm95.008-.568c2.253-1.87 1.5-2.6-3.426-3.329-11.834-1.747-23.43-11.775-34.164-29.543-10.22-16.918-25.886-52.545-35.17-79.982a6720.224 6720.224 0 0 0-5.355-15.755c-2.5-7.318-10.54-37.69-14.623-55.245-1.216-5.225-2.893-10.287-3.729-11.25-1.662-1.915-6.706-2.373-7.738-.703-.611.989.44 7.116 2.566 14.953.522 1.925 2.556 10.25 4.52 18.5 1.964 8.25 3.946 16.125 4.404 17.5.459 1.375 1.615 5.2 2.57 8.5 4.478 15.478 18.375 55.615 23.198 67 7.173 16.931 11.623 27.073 12.289 28 .394.55 2.19 3.7 3.992 7 5.949 10.9 9.928 16.165 18.256 24.153 11.12 10.668 15.158 12.655 24.16 11.89 3.809-.325 7.521-1.084 8.25-1.689zM288.44 303.2c4.918-2.53 10.912-6.488 13.321-8.797 3.723-3.567 4.332-4.698 4.06-7.541-.483-5.024-3.18-4.9-8.69.4-7.767 7.472-17.409 12.9-30.382 17.108-2.76.895-2.062 2.292 1.943 3.89 4.688 1.869 7.856 1.057 19.748-5.06zm348.849.694c13.344-6.675 18.165-20.107 11.767-32.782-2.251-4.458-3.84-6.256-6.75-7.64-8.601-4.087-19.582-2.5-24.69 3.57-1.341 1.595-2.933 5.202-3.536 8.016-.95 4.428-.836 5.707.843 9.503 3.253 7.354 11.235 10.476 17.931 7.014 2.85-1.473 5.145-5.281 5.145-8.533 0-1.025-1.35-3-3.002-4.39-2.396-2.016-3.707-2.411-6.5-1.958-4.331.703-4.803-1.522-.964-4.542 2.05-1.612 3.148-1.82 5.75-1.09 9.386 2.635 11.764 16.177 4.032 22.966-3.429 3.01-3.976 3.16-10.22 2.786-5.115-.305-7.522-1.013-10.722-3.155-4.856-3.25-13.828-15.346-19.544-26.35-2.23-4.295-5.054-9.609-6.274-11.809-1.22-2.2-2.814-5.575-3.542-7.5-.728-1.925-3.538-8.657-6.243-14.96-8.405-19.582-19.39-48.062-22.772-59.04-4.269-13.855-10.906-38.977-10.964-41.5-.12-5.19-2.106-9.287-5.106-10.53-4.96-2.054-5.446-.537-3.433 10.71 4.028 22.516 14.604 57.671 25.516 84.82a684.288 684.288 0 0 1 5.977 15.5c3.4 9.236 13.625 31.602 16.001 35 .962 1.375 2.745 4.469 3.963 6.875 2.592 5.12 14.679 21.619 18.218 24.868 4.751 4.362 9.888 6.175 17.619 6.217 5.472.03 8.34-.485 11.5-2.066zm-114.83-3.829c.317-.514-.43-3.007-1.66-5.54-1.908-3.928-2.844-4.76-6.354-5.643-2.264-.57-6.328-2.695-9.03-4.722-10.015-7.51-12.949-21.39-7.36-34.82 1.752-4.21-.15-11.34-3.024-11.34-5.064 0-9.46 11.514-9.355 24.5.065 7.98.432 9.737 3.233 15.5 3.58 7.364 10.668 15.16 16.59 18.246 7.61 3.964 15.739 5.795 16.96 3.82zm-248.717-4.15c7.675-2.549 20.08-10.505 23.625-15.153 2.77-3.632 3.334-7.784 1.657-12.197-1.341-3.528-3.462-3.212-5.999.893-3.095 5.007-15.358 16.034-20.83 18.728-3.63 1.788-6.794 2.392-13.946 2.66-10.42.39-11.317 1.237-6.031 5.685 2.966 2.496 3.691 2.66 9.25 2.082 3.317-.344 8.84-1.559 12.274-2.699zm-3.164-12.792c7.54-3.567 16.299-11.975 19.92-19.12 2.273-4.487 2.647-6.265 2.198-10.455-.667-6.222-2.865-13.048-4.201-13.048-.548 0-1.372 1.8-1.833 4-1.932 9.238-4.9 14.966-11.008 21.238-7.389 7.589-13.407 10.717-18.92 9.836-11.486-1.837-15.788-13.982-7.368-20.802 2.534-2.052 5.633-2.305 5.633-.46 0 .722-1.35 2.31-3 3.53-4.547 3.362-4.025 9.06 1.072 11.695 4.707 2.434 8.537 1.848 12.67-1.94 3.05-2.795 3.713-4.087 3.713-7.25 0-5.38-3.377-11.483-7.524-13.595-7.195-3.667-19.43-1.138-23.627 4.881-8.744 12.545-3.135 29.519 10.875 32.91 8.959 2.167 14.609 1.792 21.4-1.42zM514 281.103c0-3.025-9.75-23.07-11.56-23.764-3.845-1.476-4.524 5.688-1.345 14.186 1.555 4.155 3.143 6.359 6.15 8.538 4.694 3.4 6.755 3.718 6.755 1.04zm96.31-8.688c.758-2.644.168-4.491-4.242-13.28-6.465-12.882-14.441-31.26-18.071-41.635-1.54-4.4-4.458-12.5-6.486-18-2.028-5.5-4.127-11.575-4.664-13.5-.536-1.925-1.805-5.75-2.819-8.5-1.536-4.165-6.24-19.23-9.994-32-.485-1.65-1.412-5.654-2.06-8.897-1.33-6.665-4.46-10.603-8.429-10.603-2.232 0-2.545.422-2.545 3.43 0 4.94 5.277 27.31 9.334 39.57 5.74 17.345 12.163 35.044 15.605 43 1.785 4.125 5.193 12.225 7.574 18 4.403 10.679 19.821 42.437 21.747 44.793 1.695 2.074 4.098.943 5.05-2.378zM270.8 218.582c3.832-2.011 9.63-8.368 12.053-13.211 3.941-7.882 4.747-25.171 1.332-28.586-1.327-1.327-2.838 1.846-6.703 14.084-2.43 7.688-7.447 16.131-9.587 16.131-.601 0-2.354-1.35-3.895-3-3.936-4.213-10.097-3.803-13.718.913-1.656 2.157-1.595 8.277.106 10.603 2.969 4.06 15.059 5.876 20.412 3.066zm46.002-35.98c3.436-1.776 5.777-4.365 7.104-7.854 1.637-4.307-1.139-3.506-4.275 1.233-4.535 6.853-11.17 6.742-14.815-.247-2.63-5.041-3.753-2.911-1.415 2.684 2.194 5.25 7.896 7.031 13.401 4.184zm15.505-2.52c5.399-2.314 6.394-3.636 3.787-5.032-3.5-1.872-6.03-1.204-8.057 2.13-1.063 1.748-1.705 3.548-1.426 4 .67 1.084.555 1.106 5.696-1.097zM296 176.5c0-1.833-.533-2.5-2-2.5-3.52 0-2.367 4.54 1.25 4.921.412.043.75-1.046.75-2.421zm-.5-15.387c9.446-4.345 22.539-3.98 36.382 1.015 2.96 1.068 5.592 1.731 5.85 1.474 1.777-1.778-7.177-6.358-17.901-9.158-10.296-2.688-27.232.185-30.501 5.175-1.38 2.108-1.03 4.95.512 4.14.362-.19 2.908-1.38 5.658-2.646zm46.017-5.14c.35-.565-.287-2.928-1.414-5.25-3.353-6.91-15.348-12.861-26.103-12.95-12.682-.107-28.855 8.082-25.041 12.677.902 1.087 2.205.97 7.32-.662 12.915-4.12 29.17-2.346 38.892 4.242 4.789 3.245 5.421 3.439 6.346 1.943zm419.917-4.473c-.036-2.2-1.47-8.725-3.187-14.5-6.359-21.391-7.193-29.018-5.057-46.265 1.051-8.494 1.01-9.963-.311-11.285-1.36-1.36-1.783-1.314-4.011.44-1.37 1.077-3.813 3.867-5.43 6.199-2.89 4.172-2.937 4.45-2.903 17.326.033 11.982.399 14.56 4.344 30.585 5.84 23.72 5.03 22.167 11.373 21.802l5.248-.302-.066-4zM307 67.482c7.425-.851 18.9-2.095 25.5-2.765 11.91-1.208 12.002-1.237 12.309-3.889.17-1.47-1.32-7.994-3.31-14.5C337.804 34.26 329.56 8.714 327.756 3.75 326.76 1.006 326.736 1 316.997 1h-9.76l5.906 17.75c3.247 9.762 6.179 19.651 6.513 21.974.558 3.873.394 4.306-1.965 5.203-1.416.539-5.905 1.28-9.977 1.65-7.242.656-7.462.608-10.093-2.203-1.479-1.58-3.867-4.899-5.307-7.374-1.44-2.475-5.397-8.775-8.794-14a8699.386 8699.386 0 0 1-10.538-16.25L268.62 1H257.34c-13.131 0-12.788-.78-4.898 11.138 19.42 29.331 37.138 55.476 38.016 56.097 1.408.993 1.226 1.002 16.541-.753zM175.598 1248.75c1.323-2.31 13.086-21.129 22.033-35.25 4.88-7.7 9.77-15.747 10.87-17.882 2.77-5.382 7.197-9.618 10.048-9.618 3.112 0 20.476 4.408 23.284 5.91 1.603.858 2.167 2.092 2.167 4.74 0 3.681-3.255 18.299-7.446 33.443-1.308 4.726-2.97 11.139-3.694 14.25l-1.315 5.657h-28.331c-22.38 0-28.182-.263-27.616-1.25zM295 1247.64c0-1.3.908-7.037 2.018-12.75 1.11-5.715 2.45-12.865 2.98-15.89 2.552-14.584 3.216-17.043 4.824-17.87 1.69-.871 10.091-.148 24.178 2.08 4.125.651 16.5 1.218 27.5 1.26 13.429.05 20.69.463 22.102 1.258 2.122 1.195 2.66 2.7 11.648 32.522l3.54 11.75H295v-2.36zm160.724-1.89c-.85-2.337-2.969-8.075-4.706-12.75-1.738-4.675-4.564-12.676-6.281-17.78-3.084-9.167-3.099-9.301-1.18-11.09 1.069-.996 4.418-2.382 7.443-3.08 15.398-3.558 15.242-3.59 20.46 4.229a772.663 772.663 0 0 0 8.037 11.721c2.504 3.575 6.559 9.425 9.01 13a867.236 867.236 0 0 0 8.033 11.5c6.716 9.389 8.48 8.5-16.869 8.5h-22.4l-1.547-4.25zM108 1107.365c-11.543-5.395-28.793-12.03-36-13.846-3.575-.901-7.85-2.065-9.5-2.587C51.672 1087.51 13.556 1081 4.345 1081H0v-39.091l3.25.533c1.788.293 7.75 1.248 13.25 2.122 24.025 3.818 50.46 14.292 66.511 26.352 13.36 10.038 27.35 24.61 33.776 35.18 3.642 5.99 1.866 6.247-8.787 1.269zm-18.582-16.681c2.098-1.534 1.806-4.514-.59-6.023-2.585-1.628-6.828.693-6.828 3.734 0 3.523 4.03 4.766 7.418 2.289zm-16.45-10.992c1.47-2.693 1.417-2.909-1.274-5.25-3.218-2.801-6.846-3.147-9.123-.87-2.102 2.102-1.98 3.638.545 6.848 2.868 3.647 7.66 3.292 9.853-.728zm-25.797-4.347c2.89-2.614 2.467-8.88-.74-10.982-3.397-2.226-8.985-.88-11.738 2.83-1.906 2.568-1.92 2.813-.287 5.304 2.895 4.418 9.421 5.874 12.765 2.848zm-26.64-5.692c2.067-2.952 1.877-8.974-.347-10.986-4.528-4.098-13.037-2.787-15.731 2.424-1.88 3.636-1.808 4.89.45 7.826 1.255 1.633 3.275 2.62 6.227 3.043 5.564.797 7.571.305 9.4-2.307zM.194 542l-.013-44.5 1.828 6.5c1.006 3.575 3.262 11.225 5.013 17 2.706 8.922 3.197 12.153 3.269 21.5.076 9.99-.25 12.057-3.54 22.5-1.992 6.325-4.28 13.75-5.083 16.5C.335 586.067.207 582.644.194 542zM.147 411.5c.007-28.289.316-40.07.996-38 .541 1.65 3.093 7.275 5.67 12.5l4.687 9.5-.028 13c-.024 11.177-.354 13.841-2.354 19-1.279 3.3-3.44 9.375-4.803 13.5s-2.86 8.4-3.329 9.5c-.486 1.143-.846-15.567-.84-39zM756.5 213.946c-10.025-1.12-20.047-3.433-28.052-6.476a3041.765 3041.765 0 0 0-10.879-4.113c-2.162-.81-5.762-2.3-8-3.31a429.665 429.665 0 0 0-7.569-3.324c-4.082-1.73-23.74-15.644-31.785-22.496-11.301-9.626-26.914-28.862-24.988-30.787.351-.351 5.638 1.656 11.749 4.46 6.11 2.805 11.353 5.1 11.65 5.1.296 0 3.764 1.417 7.706 3.148 8.11 3.562 35.851 11.4 45.668 12.904 12.582 1.927 23.595 2.913 32.75 2.93L764 172v21.5c0 11.825-.113 21.439-.25 21.364-.138-.074-3.4-.487-7.25-.918zm1.045-17.4c2.819-2.819 3.137-6.127.898-9.323-2.185-3.12-9.83-3.148-13.129-.049-3.086 2.9-2.917 5.377.61 8.903 3.729 3.73 8.18 3.909 11.621.468zm-28.619-4.957c.644-.776 1.436-3.043 1.76-5.04.473-2.916.135-4.11-1.723-6.088-3.222-3.43-7.346-3.232-11.11.532-3.33 3.33-3.221 5.76.436 9.757 2.388 2.61 8.751 3.111 10.637.84zm-26.035-8.225c1.967-1.378 2.253-2.253 1.812-5.54-.666-4.97-2.23-6.824-5.754-6.824-3.214 0-5.68 2.077-6.542 5.513-.74 2.952-.026 4.138 3.952 6.564 3.804 2.32 3.64 2.312 6.532.287zM683 172c3.493-3.493 2.004-8-2.643-8-2.217 0-5.357 3.313-5.357 5.651 0 1.656 2.83 4.349 4.571 4.349.786 0 2.329-.9 3.429-2zM527.58 61.969c-6.006-1.584-11.6-3.56-12.43-4.39-1.347-1.348-1.014-3.108 3.081-16.295 2.526-8.131 6.043-19.734 7.817-25.784 1.773-6.05 3.61-11.751 4.08-12.67.558-1.088.424-1.843-.386-2.17-.683-.276 11.747-.538 27.623-.581L586.23 0l-1.467 2.25c-3.667 5.626-14.023 22.156-19.576 31.25-6.061 9.927-11.889 18.735-17.73 26.8-3.836 5.297-5.568 5.442-19.877 1.669zm-83.858-13.58c-1.016-1.016-42.644-4.44-51.258-4.216-4.42.115-8.517-.088-9.105-.451-1.313-.812-4.809-10.461-6.238-17.222-.582-2.75-2.37-9.837-3.975-15.75L370.228 0h47.993c37.972 0 47.897.261 47.535 1.25-.252.688-2.83 11.06-5.727 23.048-2.898 11.99-5.922 22.452-6.72 23.25-1.427 1.427-8.39 2.038-9.587.841zM355.75.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm9.52.058c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525z\",\n    style: {\n      fill: \"#1156a1\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.16018 0 0 .15833 22.527 22.739)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M124 1249.428c0-.916 5.085-9.38 9.87-16.428 7.338-10.81 9.645-14.255 13.39-20 1.973-3.025 5.648-8.425 8.169-12 8.197-11.627 13.967-20.07 19.571-28.637 15.024-22.968 25.57-37.7 27.313-38.155 1.694-.443 1.854-1.128 1.322-5.658-.833-7.085-11.534-43.54-18.654-63.55-14.463-40.64-28.491-70.897-33.302-71.823-.95-.183-3.72.633-6.158 1.813-6.882 3.331-14.385 3.738-19.88 1.078-6.076-2.941-12.026-9.073-13.465-13.876-2.791-9.315-.777-19.88 5.39-28.282 1.889-2.573 3.434-5.132 3.434-5.687 0-1.201 2.38-2.223 5.177-2.223 3.258 0 7.489-3.679 9.857-8.57 2.254-4.657 8.204-9.43 11.755-9.43 1.006 0 2.702-.66 3.77-1.468 2.23-1.688 7.028-2.009 7.941-.532.7 1.133 8.554 1.33 13.625.342 2.82-.55 27.43-24.687 149.615-146.75 80.433-80.35 146.245-146.833 146.25-147.738.014-2.252-6.56-7.854-9.216-7.854-1.509 0-15.275 13.128-45.875 43.75-24.046 24.063-57.372 57.3-74.06 73.86-16.686 16.56-40.178 40.073-52.204 52.25C267.58 814.168 263 818.068 263 814.84c0-1.513-54.922-55.852-57.387-56.777-1.358-.51-2-1.948-2.289-5.136-1.065-11.732-.653-17.12 2.404-31.427 5.568-26.06 6.311-34.602 5.918-68-.194-16.5-.861-32.925-1.483-36.5-.621-3.575-1.601-9.875-2.178-14-.576-4.125-1.658-10.65-2.404-14.5-1.245-6.433-2.348-10.713-7.265-28.187-1.643-5.84-1.645-6.293-.028-8.079 2.31-2.552 2.156-5.525-.405-7.829-2.186-1.968-5.908-9.544-8.548-17.405-.832-2.475-2.64-6.975-4.018-10-1.378-3.025-3.321-7.3-4.318-9.5-3.198-7.06-19.834-40.686-24.983-50.5-2.742-5.225-4.992-10.49-5-11.699-.01-1.279 3.434-6.461 8.234-12.393 9.208-11.378 10.957-13.681 15.193-20.01 1.619-2.42 3.945-5.523 5.17-6.898 2.815-3.16 9.387-12.946 9.387-13.978 0-.427.744-1.395 1.654-2.15.91-.754 2.873-4.072 4.363-7.372 1.49-3.3 3.671-6.857 4.846-7.905 1.175-1.048 2.137-2.514 2.137-3.259 0-.744 1.35-3.217 3-5.495 1.65-2.277 3-4.504 3-4.947 0-1.184 7.372-12.366 11.857-17.985l2.357-2.953-4.107-4.455c-2.259-2.451-4.107-4.987-4.107-5.635 0-1.455-16.508-17.866-17.972-17.866-1.3 0-5.02 5.934-5.024 8.018-.002.835-1.062 3.085-2.355 5s-2.891 5.134-3.551 7.152c-.66 2.019-1.889 4.242-2.73 4.94-.843.699-2.957 3.948-4.7 7.221-4 7.513-4.926 9.07-6.59 11.074-.738.89-2.07 2.934-2.96 4.542-2.233 4.034-18.88 28.325-25.051 36.553-1.65 2.2-4.57 6.25-6.487 9-7.548 10.823-18.598 24.069-30.08 36.057-3.3 3.445-6.503 6.867-7.117 7.604-1.458 1.748-20.932 19.33-26.405 23.839-2.336 1.925-7.082 5.975-10.546 9-3.464 3.025-7.646 6.52-9.295 7.768l-2.998 2.269.055 18c.03 9.9.471 18.256.98 18.57.508.315 1.915-.14 3.125-1.01s4.451-3.13 7.201-5.022c2.75-1.892 6.322-4.82 7.937-6.508 1.615-1.687 3.477-3.067 4.136-3.067.66 0 4.008-2.706 7.44-6.013 6.527-6.288 10.055-8.005 12.419-6.044 3.03 2.516 18.203 31.836 23.057 44.557 16.287 42.69 23.041 84.04 20.53 125.695-.985 16.333-3.838 36.836-6.444 46.305-.756 2.75-2.815 10.4-4.574 17-1.76 6.6-4.476 15.15-6.036 19-1.56 3.85-3.137 8.125-3.502 9.5-.778 2.927-15.412 31.565-18.236 35.685-1.06 1.548-3.684 5.515-5.828 8.815-5.022 7.728-14.25 19.5-15.287 19.5-.44 0-1.66-.965-2.707-2.145-2.798-3.15-9.666-5.902-15.335-6.143-5.633-.24-6.999.694-7.963 5.445-.537 2.65-1.223 3.407-3.307 3.651-1.9.223-2.801-.237-3.253-1.66-1.088-3.427-3.167-4.247-11.715-4.623-14.587-.64-23.709 1.691-30.582 7.818L0 831.35V726.508c0-57.663.242-104.6.538-104.304.295.296 1.616 3.858 2.934 7.917A607.182 607.182 0 0 0 8.567 645c2.433 6.762 2.703 8.878 2.745 21.5.042 12.907-.21 14.897-3.243 25.5-4.111 14.374-6.892 29.777-6.575 36.42.37 7.757 2.44 22.276 3.612 25.343 1.59 4.16 4.987 22.679 5.912 32.237.485 5.003.406 13.364-.192 20.322-.558 6.502-.821 12.016-.584 12.253.758.758 9.69-.803 11.213-1.96 1.996-1.516 3.757-13.146 3.683-24.329-.066-10.146-2.057-22.315-5.58-34.105-3.826-12.805-4.89-21.031-4.314-33.338.44-9.42 1.128-13.124 4.048-21.843 4.953-14.785 5.978-20.744 6.019-35 .041-14.56-1.649-23.864-7.327-40.333-6.321-18.336-5.792-34.636 1.84-56.667l4.676-13.5-.122-13.5c-.13-14.419-.285-15.213-8.201-42.23-7.194-24.551-6.458-39.805 2.972-61.566 3.767-8.694 5.947-18.623 6.532-29.75.644-12.264-.528-18.187-5.62-28.402C18.54 379 16.273 372.675 15.025 368c-3.01-11.27-2.39-23.14 2.513-48 2.006-10.175 3.873-22.55 4.15-27.5l.5-9-5.472-5.347c-8.17-7.98-8.67-7.473-9.21 9.347-.346 10.754-1.244 17.826-3.875 30.5L.204 334.5l-.102-39.313L0 255.873l16.96 15.678c11.701 10.816 17.26 16.65 17.925 18.813.601 1.955 1.218 101.398 1.638 264.136.371 143.55.91 261.383 1.198 261.852.288.469 2.102 1.512 4.033 2.318 2.588 1.082 3.803 1.173 4.628.348.82-.82 1.028-72.126.782-267.818-.28-221.578-.565-267.038-1.684-268.7-2.109-3.129-18.913-19.728-37.787-37.324C.34 238.322-.094 237.68.23 234.198c.337-3.607.372-3.637 1.442-1.198.602 1.375 3.58 4.75 6.614 7.5 3.036 2.75 13.584 12.792 23.44 22.315l17.921 17.315.255 58.657c.14 32.26.444 58.964.677 59.34 1.677 2.713 11.69-5.84 22.237-18.996C82.7 366.803 85.7 362.11 86.533 357.673c.814-4.337 1.21-4.605 19.467-13.141 7.975-3.729 24.532-11.674 36.794-17.656C155.056 320.894 165.27 316 165.492 316c.222 0 10.169-4.762 22.104-10.581 11.936-5.82 22.872-11.02 24.303-11.555 6.331-2.37 22.1-12.165 22.086-13.72-.008-.904-.664-3.444-1.456-5.644-1.71-4.746-1.956-14.23-.473-18.185 3.175-8.464 9.306-13.497 18.039-14.806 9.47-1.42 16.865 3.196 20.412 12.741 4.237 11.404 10.835 1.726 14.147-20.75.774-5.256 2.581-11.5 3.328-11.5.719 0 2.987 8 4.962 17.5 5.188 24.96 15.314 47.436 29.17 64.75 7.162 8.95 13.888 14.341 27.889 22.357 8.004 4.581 8.814 5.3 7.345 6.521-1.077.896-5.071 1.491-11.505 1.716-13.39.467-31.036-3.158-59.224-12.167l-4.881-1.56 2.88 3.041c4.387 4.63 9.866 8.12 25.661 16.345 12.465 6.49 26.896 12.497 30.026 12.497 1.03 0 10.37-9.275 12.746-12.656.797-1.134 3.82-3.262 6.717-4.73 4.7-2.379 5.967-2.594 11.75-2.002 4.271.438 6.482 1.103 6.482 1.95 0 .707 1.378 2.333 3.062 3.612 7.176 5.451 10.209 8.617 12.768 13.326l2.718 5 8.476-.15c13.492-.238 41.567-7.104 59.476-14.544 12.957-5.383 31.617-15.231 37.131-19.597 4.87-3.855 4.156-5.962-3.433-10.148-3.467-1.911-10.427-7.103-15.467-11.537-8.743-7.69-9.316-8.45-12.459-16.515-4.2-10.776-5.106-21.102-2.853-32.509 2.112-10.694 9.399-25.182 16.331-32.472 3.464-3.643 5.25-6.372 5.25-8.023 0-1.376-1.986-8.578-4.413-16.004-12.575-38.476-16.186-50.996-21.631-75.001-4.628-20.401-6.017-23.007-12.262-22.993-1.757.004-8.144-.639-14.194-1.428-29.08-3.794-60.922-4.507-91.5-2.05-23.458 1.884-32.94 3.042-39.375 4.808-7.439 2.042-18.865 3.956-21.073 3.53-2.055-.396-7.348-6.341-26.052-29.261-16.67-20.429-18.091-22.185-26-32.146-3.85-4.85-9.066-11.099-11.591-13.888-2.525-2.79-6.987-8.222-9.916-12.072-2.93-3.85-6.826-8.689-8.66-10.753C200.5 2.683 199 .771 199 .497 199 .224 209.038 0 221.306 0h22.306l7.211 10.75c3.967 5.912 14.292 21.398 22.945 34.413 12.014 18.072 16.301 23.777 18.141 24.142 1.326.263 9.2-.335 17.5-1.33 8.3-.996 19.141-2.12 24.091-2.498 4.95-.378 9.787-1.106 10.75-1.618 2.265-1.203 2.222-3.969-.179-11.359-1.072-3.3-4.711-14.775-8.087-25.5a18581.563 18581.563 0 0 0-7.061-22.4C328.415 3.007 328 1.32 328 .85c0-.467 4.941-.85 10.981-.85h10.98l.603 2.75c.33 1.512 1.064 4.1 1.63 5.75.565 1.65 1.394 4.575 1.843 6.5 1.369 5.875 7.586 29.048 9.926 37 3.477 11.813 2.377 11.332 27.79 12.144 11.96.383 27.147 1.174 33.747 1.758 33.938 3.003 39.32 3.36 41.686 2.766 2.44-.612 2.845-1.78 8.133-23.406 3.06-12.52 6.554-27.037 7.763-32.262 3.224-13.935 2.147-13 14.972-13h10.984l-.601 2.75c-.644 2.94-5.058 18.1-6.48 22.25-4.083 11.923-13.05 46.308-12.277 47.08.992.992 8.59 3.23 26.82 7.901 6.05 1.55 14.988 3.989 19.862 5.419 4.874 1.43 10.83 2.6 13.237 2.6 4.062 0 4.567-.304 7.047-4.25 4.004-6.373 23.552-36.548 32.876-50.75 4.514-6.875 8.776-13.625 9.473-15 .696-1.375 3.547-5.987 6.336-10.25L610.4 0h15.8C636.614 0 642 .36 642 1.055c0 1.496-7.844 12.9-11.193 16.272-1.544 1.555-2.807 3.427-2.807 4.16 0 1.718-21.217 33.983-32.75 49.802-2.888 3.96-5.25 7.575-5.25 8.032 0 .457-2.138 3.587-4.75 6.956-2.612 3.37-5.65 7.592-6.75 9.383-1.1 1.792-5.457 8.338-9.683 14.549l-7.683 11.291.93 5c2.767 14.871 9.256 37.156 18.926 64.998 8.208 23.63 28.267 70.307 30.918 71.945.634.392 3.172-.472 5.642-1.92 5.152-3.019 12.675-5.496 16.74-5.512 7.022-.027 16.379 8.306 18.842 16.78 1.972 6.787 1.576 14.9-.97 19.893-2.016 3.951-4.2 6.398-4.13 4.625.019-.445.904-3.284 1.968-6.309 2.784-7.915 2.544-12.98-.943-19.888-2.251-4.458-3.84-6.256-6.75-7.64-8.601-4.087-19.582-2.5-24.69 3.57-1.341 1.595-2.933 5.202-3.536 8.016-.95 4.428-.836 5.707.843 9.503 3.253 7.354 11.235 10.476 17.931 7.014 2.85-1.473 5.145-5.281 5.145-8.533 0-1.025-1.35-3-3.002-4.39-2.396-2.016-3.707-2.411-6.5-1.958-4.331.703-4.803-1.522-.964-4.542 2.05-1.612 3.148-1.82 5.75-1.09 9.386 2.635 11.764 16.177 4.032 22.966-3.429 3.01-3.976 3.16-10.22 2.786-5.115-.305-7.522-1.013-10.722-3.154-4.856-3.25-13.828-15.347-19.544-26.351-2.23-4.295-5.054-9.609-6.274-11.809-1.22-2.2-2.814-5.575-3.542-7.5-.728-1.925-3.538-8.657-6.243-14.96-8.405-19.582-19.39-48.062-22.772-59.04-4.269-13.855-10.906-38.977-10.964-41.5-.12-5.19-2.106-9.287-5.106-10.53-4.96-2.054-5.446-.537-3.433 10.71 4.028 22.516 14.604 57.671 25.516 84.82a684.288 684.288 0 0 1 5.977 15.5c3.4 9.236 13.625 31.602 16.001 35 .962 1.375 2.745 4.469 3.963 6.875 3.079 6.081 15.066 22.122 19.016 25.445 5.002 4.21 9.534 5.682 17.403 5.657 6.165-.02 7.972-.477 13.378-3.39 3.438-1.854 6.247-3.08 6.243-2.728-.011 1.097-15.039 14.47-20.11 17.895-2.65 1.79-5.292 4.143-5.873 5.228-.58 1.085-2.051 2.505-3.267 3.156-3.414 1.827-17.694 5.096-22.994 5.263l-4.752.15-44.735 44.475c-24.605 24.46-49.017 48.75-54.249 53.978-5.232 5.227-29.988 29.611-55.013 54.187-89.609 88.002-143 141.38-143 142.965 0 1.768 7.318 8.844 9.147 8.844.628 0 14.294-13.162 30.37-29.25 16.075-16.087 35.697-35.592 43.605-43.344 7.908-7.751 23.914-23.85 35.569-35.773 21.418-21.912 58.153-57.807 75.612-73.883 8.449-7.78 12.697-10.432 12.697-7.926 0 1.287 55.824 56.567 57.9 57.335 3.35 1.239 3.917 5.577 1.944 14.841-.996 4.675-2.248 10.975-2.782 14-.534 3.025-1.943 10.675-3.131 17-1.188 6.325-2.286 13.075-2.44 15-1.288 16.105-1.6 25.607-1.511 45.913.057 12.877.337 23.79.623 24.253.285.462.934 5.002 1.44 10.087 1.129 11.33 3.284 22.992 7.564 40.935 2.724 11.417 3.08 14.183 2.142 16.667-1.291 3.42.363 10.209 3.325 13.645.949 1.1 2.447 4.16 3.33 6.8 1.389 4.15 5.422 13.791 10.123 24.2.745 1.65 2.75 6.15 4.455 10 5.92 13.368 25.15 48.846 27.144 50.078 3.096 1.913-1.126 9.325-15.338 26.922-4.108 5.086-11.996 15.95-15.261 21.018a477.233 477.233 0 0 1-8.122 12.116c-2.252 3.226-4.42 7.186-4.815 8.799-.396 1.613-1.703 4.144-2.905 5.624-1.202 1.48-3.085 4.194-4.185 6.032-1.1 1.837-2.775 4.482-3.722 5.876a61.012 61.012 0 0 0-7.91 16.502l-1.816 5.966 3.776 4.534c2.077 2.493 4.857 6.333 6.178 8.533 1.321 2.2 3.323 4.664 4.448 5.476 1.125.812 3.046 2.552 4.27 3.867 2.34 2.517 5.276 2.356 5.276-.29 0-2.15 6.48-13.876 17.5-31.667.55-.888 2.063-3.588 3.363-6 1.3-2.412 3.154-5.286 4.12-6.386.967-1.1 2.379-3.207 3.138-4.683.758-1.475 3.291-5.407 5.629-8.738 2.337-3.331 4.25-6.442 4.25-6.913 0-.47.956-1.713 2.125-2.761s4.431-5.198 7.25-9.222c7.152-10.212 8.788-12.38 11.483-15.208 1.296-1.361 3.39-4.05 4.652-5.975 3.922-5.983 18.839-22.206 35.74-38.87 7.012-6.914 12.75-13.147 12.75-13.85 0-.704 1.012-1.29 2.25-1.302 2.665-.027 6.05-2.569 7.697-5.781.649-1.267 3.615-3.86 6.59-5.764 2.976-1.904 7.287-5.3 9.581-7.549l4.17-4.087-.639-9.649c-.351-5.306-.641-12.46-.644-15.898-.003-3.542-.443-6.25-1.016-6.25-1.113 0-18.066 10.493-30.278 18.74-4.283 2.893-8.62 5.26-9.635 5.26-1.675 0-3.226-1.715-6.78-7.5-2.328-3.788-19.296-38.41-19.296-39.371 0-.53-.935-3.138-2.077-5.796-4.413-10.27-11.248-36.194-14.33-54.355-8.09-47.66-2.57-96.165 16.157-141.978 5.48-13.403 19.837-41.218 24.653-47.761 2.412-3.277 4.996-7.108 5.741-8.514.746-1.407 4.035-5.97 7.31-10.141 6.543-8.335 9.028-9.352 13.758-5.632 2.8 2.203 10.243 5.011 13.338 5.033 3.72.027 4.45-1.92 4.465-11.935.02-11.975.367-12.615 5.941-10.945l4.237 1.27-.686 6.403c-.62 5.79-.469 6.634 1.578 8.813 1.706 1.815 3.315 2.409 6.53 2.409 2.347 0 4.545-.45 4.885-1 .34-.55 2.334-1 4.431-1 6.647 0 19.216-4.638 22.319-8.236l2.75-3.188V1003.223l-11.227-10.362c-6.175-5.698-14.981-13.961-19.57-18.361l-8.343-8 .135-66c.423-206.706.992-361.291 1.501-407.5l.578-52.5-4.992-5.227c-2.746-2.874-5.231-4.84-5.523-4.369-.735 1.19-1.385 540.781-.652 541.853.326.478 8.018 7.568 17.093 15.757s18.171 16.53 20.214 18.534c2.043 2.005 5.303 4.727 7.243 6.049 2.596 1.767 3.531 3.13 3.536 5.153.004 1.513-.276 2.75-.622 2.75-.828 0-5.854-4.522-23.371-21.025-7.975-7.514-17.274-16.094-20.663-19.068-3.39-2.974-6.512-6.307-6.939-7.407-.426-1.1-.911-20-1.078-42-.38-49.93-.372-47.985-.228-60.119.074-6.278-.344-10.984-1.102-12.4-1.204-2.249-1.302-2.197-6.952 3.62-8.854 9.114-13.628 14.75-24.056 28.399l-5.733 7.5c-5.332 6.956-7.576 9.258-10.404 10.675-12.998 6.508-54.373 26.309-64.845 31.032-7.185 3.241-33.498 15.944-39 18.827-1.925 1.009-6.2 3.288-9.5 5.064-3.3 1.777-9.15 4.455-13 5.95l-7 2.721.296 3.866c.163 2.126.343 7.977.401 13.002.09 7.742-.226 9.673-2.061 12.644-7.153 11.572-21.392 13.559-30.475 4.251-2.288-2.345-5.097-5.523-6.24-7.062-1.214-1.634-2.563-2.5-3.239-2.083-2.524 1.56-6.465 10.036-9.156 19.69-2.86 10.264-5.115 14.234-7.008 12.342-.547-.548-1.92-5.929-3.052-11.958-3.001-15.994-8.887-36.324-12.727-43.961-4.055-8.063-15.538-23.732-22.33-30.468-7.191-7.134-12.674-10.567-27.909-17.475-3.094-1.403-3.491-5.195-.5-4.778 1.1.153 7.85.496 15 .76 15.434.573 24.566 1.692 41.838 5.13 9.42 1.874 13.135 2.258 13.95 1.443 1.627-1.627.491-2.432-12.336-8.739C451.398 913.2 426.432 904 422.235 904c-1.708 0-4 1.318-6.443 3.703-5.035 4.917-4.801 2.558.555-5.59 2.39-3.637 6.14-10.663 8.334-15.613 3.501-7.903 9.291-17.429 15.486-25.478 6.99-9.084 7.822-10.433 6.96-11.295-.571-.571-2.304-.431-4.503.364-1.965.711-3.861 1.005-4.213.654-.351-.352-1.07-4.376-1.599-8.942-1.642-14.2-1.786-14.803-3.537-14.803-1.835 0-9.81 8.156-11.733 12-1.5 2.997-3.248 12.076-4.043 21-1.392 15.622-2.855 22.008-6.931 30.262-3.36 6.806-4.913 8.803-8.931 11.488-5.62 3.756-7.903 3.995-12.338 1.29-7.351-4.481-8.38-12.73-3.016-24.156 3.532-7.522 4.667-9.151 15.217-21.838 11.922-14.337 13.497-16.63 15.042-21.893 1.739-5.922 1.615-11.653-.251-11.653-.665 0-4.345 3.038-8.178 6.75-3.833 3.712-7.396 6.75-7.918 6.75-.522 0-1.917-2.25-3.1-5-2.869-6.67-4.678-6.492-5.557.544-.964 7.717-6.07 21.483-14.052 37.894-5.736 11.79-6.852 14.949-7.25 20.503-.75 10.499 3.989 19.065 13.187 23.832 6.722 3.483 16.56 3.782 21.077.64 6.763-4.706 8.223-3.35 1.99 1.85-6.278 5.238-14.2 5.312-24.322.227-7.52-3.777-11.543-7.665-14.592-14.104l-2.656-5.61-6.71.664c-18.384 1.819-42.456 7.498-55.71 13.144-13.483 5.744-19.787 8.708-27 12.697-4.848 2.68-17.112 10.195-18.274 11.197-1.267 1.093 2.139 3.908 8.339 6.892 5.765 2.775 9.16 5.374 15.154 11.603 4.25 4.415 8.3 8.027 9.003 8.027.703 0 1.283.788 1.29 1.75.007.963 1.362 5.774 3.011 10.692 4.22 12.587 4.706 19.916 2.055 31.017-2.726 11.414-7.654 20.26-15.888 28.517-6.297 6.316-6.427 6.552-5.237 9.5.67 1.663 1.891 5.499 2.712 8.524.82 3.025 3.01 10.11 4.866 15.746 4.354 13.222 20.529 79.033 20.485 83.349-.043 4.272 5.749 6.215 19.484 6.535 5.5.128 14.5.545 20 .928 15.978 1.112 41.042 1.229 53.5.248 10.723-.843 33.058-2.027 39.2-2.076 1.484-.012 2.934-.637 3.222-1.388.347-.905 1.965-1.3 4.801-1.171 2.352.106 8.102-.375 12.777-1.068 17.299-2.567 21.001-2.79 23.004-1.388 1.044.732 5.389 5.482 9.655 10.558a1326.285 1326.285 0 0 0 15.298 17.82c4.149 4.725 10.693 12.562 14.543 17.416 3.85 4.853 8.125 9.976 9.5 11.382 1.375 1.407 3.175 3.528 4 4.714.825 1.186 7.6 9.298 15.057 18.026 7.457 8.728 13.896 16.431 14.31 17.119.59.982-3.297 1.25-18.16 1.25h-18.911l-12.637-18.25c-12.69-18.326-25.474-36.294-33.443-47-5.018-6.743-5.618-6.856-20.356-3.826-5.148 1.058-16.258 2.854-24.689 3.99-8.431 1.136-15.743 2.322-16.25 2.635-1.558.962-1.066 3.224 2.993 13.776 2.152 5.596 6.937 18.275 10.631 28.175 3.695 9.9 6.937 18.576 7.205 19.28.384 1.01-2.238 1.222-12.333 1l-12.82-.28-1.274-4.5c-13.06-46.177-15.163-52.84-17.37-55.047-1.768-1.768-3.398-1.952-17.203-1.94-19.364.017-44.839-1.579-64.935-4.07-19.604-2.429-22.473-2.452-23.679-.193-.898 1.684-3.199 14.654-8.643 48.73-1.404 8.79-2.914 16.341-3.355 16.782-.441.441-6.39.675-13.22.52-10.461-.238-12.355-.518-12.018-1.782 6.168-23.116 16.053-63.17 16.073-65.128.015-1.445-.535-3.073-1.223-3.618-.687-.545-6.65-1.974-13.25-3.176-6.6-1.202-18.887-3.775-27.304-5.718-8.417-1.943-15.955-3.283-16.752-2.977-.797.306-2.802 2.707-4.455 5.337-1.653 2.629-7.085 11.08-12.073 18.78-9.467 14.617-18.588 28.85-30.416 47.465l-7 11.017-15.25.01c-8.387.01-15.25-.249-15.25-.563zm173.924-97.837c1.66-2-.429-17.3-4.45-32.591-.795-3.025-2.385-9.522-3.533-14.437-8.626-36.948-30.78-101.52-44.108-128.563-9.239-18.745-20.87-37.968-23.933-39.552-3.553-1.837-5.9-1.85-5.9-.03 0 .779 2.084 4.941 4.631 9.25 16.697 28.238 37.737 80.095 48.713 120.06 8.249 30.034 10.97 40.654 13.695 53.438 3.11 14.593 5.68 25.937 6.588 29.078 1.231 4.26 5.957 6.167 8.297 3.347zm-13.104-3.994c.175-2.147-.367-6.647-1.206-10-.84-3.353-2.922-12.847-4.629-21.097-2.8-13.533-10.157-41.038-18.188-68-9.276-31.14-31.955-83.16-45.632-104.668-5.443-8.559-11.203-13.832-15.109-13.832-1.616 0-3.215.448-3.554.996-.338.548 3.282 6.934 8.045 14.19C211.316 955.5 229 989.02 229 991.537c0 .27 2.476 6.371 5.503 13.56 8.924 21.197 19.711 54.523 29.571 91.356 2.474 9.244 11.926 50.4 11.926 51.93 0 1.558 3.644 3.681 5.876 3.422 2.266-.262 2.668-.837 2.944-4.207zm-13.986.103c2.886-3.477-14.786-73.451-28.34-112.215-13.999-40.037-31.356-75.98-45.941-95.133C191.757 934.055 183.85 929 178.796 929c-5.671 0-4.91 2.242 3.537 10.409 14.64 14.156 20.383 24.717 44.286 81.445 7.27 17.255 21.286 61.775 25.862 82.146 1.116 4.973 8.055 32.054 10.551 41.18 1.192 4.358 5.495 6.3 7.802 3.52zm-13.167-3.275c.332-.866-.126-4.128-1.018-7.25-.892-3.121-2.989-12.103-4.66-19.96-4.408-20.74-6.519-29.251-9.807-39.553-1.609-5.04-4.624-14.787-6.7-21.662-5.266-17.433-21.188-57.87-30.516-77.5-5.102-10.738-15.957-26.847-22.787-33.816-10.589-10.805-19.966-15.188-27.929-13.054-4.008 1.074-2.419 3.378 4.456 6.463 14.012 6.286 31.976 29.22 44.527 56.843 1.64 3.61 3.343 7.689 3.784 9.064.441 1.375 2.898 7.9 5.459 14.5 6.916 17.82 10.056 26.808 14.547 41.634 2.227 7.351 5.352 17.641 6.946 22.866 5.441 17.843 11.05 39.757 14.528 56.76.366 1.793 1.337 3.93 2.156 4.75 1.96 1.96 6.25 1.908 7.014-.085zm-13.283-2.984c.33-.857.131-3.67-.44-6.25-2.28-10.302-6.073-25.965-7.433-30.691-.792-2.75-2.838-10.175-4.549-16.5-6.401-23.675-19.203-60.562-29.845-86-7.423-17.742-22.605-42.578-31.165-50.983-4.837-4.75-14.004-10.064-20.075-11.639-6.17-1.6-12.377-.073-12.377 3.047 0 1.523 1.223 2.195 5.95 3.268 14.347 3.259 27.422 15.813 37.384 35.898 11.832 23.856 30.495 69.545 34.682 84.909.75 2.75 2.756 9.725 4.458 15.5 1.702 5.775 4.236 14.775 5.631 20 1.395 5.225 3.44 12.875 4.545 17a902.201 902.201 0 0 1 3.821 14.874c.997 4.056 2.424 7.762 3.171 8.235 2.186 1.385 5.594 1.02 6.242-.668zm-12.973-2.296c.29-.47-.12-3.508-.911-6.75a2871.37 2871.37 0 0 1-4.028-16.872c-1.424-6.038-3.952-15.488-5.619-21-1.667-5.513-4.53-14.973-6.361-21.023-8.645-28.556-18.787-54.588-31.556-81-10.598-21.92-18.457-32.68-27.936-38.244-4.563-2.679-14.88-5.256-21.043-5.256-4.267 0-5.548.542-10.17 4.303-14.589 11.874-12.245 35.143 3.994 39.653 11.29 3.135 20.098-.288 24.329-9.456 5.046-10.934-1.284-20.826-13.355-20.868-3.873-.014-5.294.51-7.737 2.85-6.94 6.65-4.12 14.518 5.203 14.518 4.365 0 5.05-.311 6.576-2.994.936-1.646 2.055-2.996 2.484-3 1.862-.015 1.748 3.21-.226 6.405-3.922 6.346-12.129 6.766-18.217.934-3.759-3.602-4.404-7.726-2.154-13.785 1.485-4 2.628-5.328 6.225-7.23 5.656-2.991 10.457-2.949 16.67.147 9.624 4.796 14.613 11.932 29.389 42.034 4.322 8.807 8.748 18.257 9.834 21 1.087 2.744 3.567 8.949 5.51 13.789 6.48 16.13 20.851 61.8 24.764 78.7 3.507 15.15 6.092 22.879 7.805 23.336 2.899.774 5.99.683 6.53-.191zm-14.714-4.797c.851-2.22-7.653-35.774-14.409-56.848-9.958-31.066-15.718-45.713-29.979-76.243-3.856-8.254-11.435-21.257-12.39-21.257-1.287 0-3.923 5.554-3.893 8.2.015 1.265 1.82 5.675 4.014 9.8 7.537 14.177 19.498 42.36 28.433 67 3.474 9.577 13.086 41.591 16.922 56.359 1.837 7.072 3.962 13.253 4.722 13.735 2.268 1.436 5.9 1.024 6.58-.746zm64.564-105.294c5.684-6.321 11.287-17.747 12.754-26.008 3.121-17.566-4.76-39.345-18.22-50.35-5.304-4.337-16.973-10.268-22.88-11.63-2.428-.56-7.902-1.028-12.165-1.042-8.37-.026-8.885.391-6.62 5.361 1.302 2.86 4.317 4.211 11.37 5.1 18.326 2.312 33.077 15.951 38.098 35.229 1.784 6.851 1.763 13.34-.066 20.214-1.542 5.794-7.129 14.756-10.492 16.83-2.218 1.368-2.614 4.601-1.065 8.677 1.475 3.879 4.312 3.151 9.286-2.38zm-7.11-12.804c5.035-5.484 6.349-9.883 6.349-21.25 0-9.675-.244-11.016-3.109-17.06-3.714-7.84-12.46-17.199-18.616-19.921-2.384-1.055-7.36-2.228-11.055-2.607-6.687-.685-6.72-.676-6.72 1.815 0 3.797 3.543 7.6 7.793 8.367 4.653.84 6.528 1.78 12.463 6.247 6.167 4.641 9.098 9.233 10.664 16.705 1.537 7.334.494 12.202-3.917 18.291-3.502 4.835-3.402 4.273-1.554 8.695 1.779 4.258 4.24 4.487 7.702.718zm204.366-5.848c4.443-11.378 9.055-19.064 15.05-25.081 7.59-7.617 13.941-8.326 20.782-2.32 5.855 5.141 5.613 15.53-.42 18.028-2.137.885-3.355.946-4.098.203-1.27-1.272-.257-3.232 1.671-3.232 1.896 0 4.498-3.933 4.498-6.8 0-1.294-1.315-3.67-2.923-5.277-3.283-3.283-7.447-3.817-11.879-1.525-8.554 4.423-9.121 13.703-1.288 21.071 2.73 2.567 4.067 3.02 9.874 3.337 5.76.315 7.202.034 10.124-1.97 6.622-4.54 7.592-6.843 7.592-18.024v-10.04l-4.314-3.829c-14.154-12.56-38.391-2.932-48.681 19.34-4.573 9.899-4.947 11.92-3.482 18.823 1.73 8.15 3.505 7.51 7.494-2.704zm-211.59-8.037c5.81-7.387-1.303-26.025-11.62-30.448-4.536-1.944-6.307-1.82-6.307.439 0 1.185 10.5 25.974 12.91 30.475 1.513 2.827 2.5 2.735 5.017-.466zm205.344-13.015c12.47-17.953 24.324-25.385 38.223-23.96 6.788.695 7.92.253 6.441-2.511-2.042-3.816-6.222-4.945-15.627-4.223-9.518.732-17.277 3.592-24.993 9.214-4.75 3.46-12.315 13.969-12.315 17.107 0 2.928 2.682 9.023 3.97 9.023.589 0 2.524-2.092 4.3-4.65zm281.946-11.452c-.156-2.969-.738-8.59-1.294-12.49-1.21-8.48-.063-17.14 3.534-26.698 3.5-9.297 5.583-18.903 6.227-28.71.66-10.06-.72-16.675-7.2-34.5-2.4-6.6-4.612-13.8-4.916-16-1.537-11.112-1.559-15.899-.108-24.14 1.634-9.285 2.407-12.583 7.35-31.36 5.059-19.215 5.036-27.917-.128-49.5-5.078-21.222-6.764-29.767-7.285-36.915-.626-8.589-1.047-6.45 7.698-39.085 2.837-10.585 3.225-13.592 3.29-25.5.06-11.151-.295-14.63-2.037-20-7.805-24.044-7.866-24.376-7.595-41.148.218-13.501.613-16.864 2.874-24.5 6.841-23.1 6.708-22.4 6.745-35.352.037-12.965-.406-15.5-5.595-32-2.404-7.647-3.144-12.26-3.792-23.646-.442-7.781-.503-17.681-.133-22 .842-9.861.317-18.077-1.194-18.649-1.488-.563-10.48 1.717-11.74 2.977-.548.548-.989 9.945-1.027 21.89-.073 22.99.98 31.488 6.065 48.928 4.835 16.582 5.63 24.415 3.613 35.545-.943 5.2-3.224 13.055-5.07 17.455-6.115 14.587-6.684 17.13-6.708 30-.024 12.51 1.092 18.686 5.72 31.65 4.879 13.668 6.877 32.726 4.518 43.086-8.197 35.987-8.699 39.364-7.923 53.264.445 7.986 1.84 17.184 4.168 27.5 7.456 33.022 7.413 40.904-.37 68-1.186 4.125-3.282 12.225-4.66 18-2.343 9.82-2.434 11.16-1.41 20.688.84 7.822 2.13 12.933 5.55 22 10.106 26.79 10.32 34.938 1.512 57.812-3.88 10.081-4.239 11.794-4.288 20.5-.03 5.225.544 11.874 1.275 14.775 1.11 4.404 2.022 5.751 5.53 8.165 2.311 1.59 4.806 3.62 5.545 4.509 2.353 2.835 3.558 1.152 3.259-4.551zm-284.112-9.112c6.353-7.304 15.763-12.236 26.11-13.685 9.838-1.377 10.666-2.276 6.045-6.56-1.507-1.398-3.82-2.541-5.142-2.541-3.535 0-15.876 3.852-21.567 6.731-6.654 3.367-18.551 13.089-18.551 15.16 0 1.708 2.626 6.094 4.351 7.266 1.64 1.115 3.282-.08 8.754-6.37zm62.21-.936c4.849-2.552 4.339-3.84-6.241-15.752-13.415-15.106-25.595-26.343-36.074-33.283-14.861-9.841-33.822-18.764-53.91-25.37l-8.412-2.766-1.839 2.271c-3.704 4.575-2.526 6.37 6.161 9.388 18.826 6.539 35.278 14.503 50.5 24.447 7.861 5.136 13.743 10.327 27.5 24.272 9.625 9.757 18.092 17.785 18.816 17.841.723.056 2.298-.415 3.5-1.048zm-71.38-9.677c6.495-5.445 18.505-12.214 22.86-12.882 7.569-1.162 9.515-4.091 4.186-6.299-4.526-1.874-10.366-.638-19.78 4.188-14.295 7.329-20.7 14.682-15.451 17.74 2.684 1.563 3.285 1.362 8.186-2.747zm100.538-4.372c2.717-1.32 4.527-2.876 4.527-3.89 0-3.274-9.47-14.585-25.898-30.93-14.287-14.215-18.624-17.852-31.102-26.087-20.037-13.223-29.566-17.876-53.924-26.33l-10.425-3.618-3.364 3.26c-4.238 4.108-4.012 6.79.713 8.45 33.278 11.695 48.173 19.55 70.173 37.01 7.53 5.977 25.865 24.027 31.015 30.535 1.871 2.365 5.1 6.437 7.174 9.049 2.075 2.613 4.405 4.75 5.178 4.75.774 0 3.444-.99 5.933-2.2zM453.9 947.388c3.08-2.537 8.639-6.143 12.351-8.013 3.713-1.87 6.75-4.048 6.75-4.84 0-1.326-5.523-3.516-8.9-3.53-2.806-.01-22.1 13.115-22.1 15.034 0 1.254 4.123 5.961 5.221 5.961.592 0 3.597-2.076 6.678-4.612zm129.566-4.17c6.906-3.686 7.04-3.837 15.675-17.718 14.44-23.208 21-33.255 28.65-43.877 4.01-5.568 9.065-12.675 11.234-15.794 12.292-17.678 39.091-46.504 57.146-61.467 6.968-5.776 12.93-11.181 13.25-12.013.88-2.295.693-16.16-.226-16.729-1.294-.8-4.26 1.29-16.326 11.502-30.468 25.789-57.974 57.448-86.34 99.378-4.837 7.15-9.368 13.675-10.07 14.5-2.4 2.826-17.167 29.494-20.36 36.772-4.61 10.512-3.567 11.284 7.367 5.446zm-135.58-7.393c6.77-4.724 7.234-5.265 5.56-6.49-1.005-.734-3.99-1.335-6.633-1.335-4.118 0-5.38.518-8.81 3.616-4.104 3.709-4.914 6.072-2.802 8.184 2.185 2.185 5.22 1.234 12.685-3.975zm-191.115-4.667c7.403-5.026 33.26-18.269 44.27-22.674 16.793-6.719 33.067-10.872 50.269-12.83 12.428-1.413 14.386-2.298 14.72-6.654.38-4.956.316-5-7.279-4.996-16.203.009-43.197 6.676-67.75 16.732-22.917 9.386-56.163 29.424-53.409 32.191.849.853 10.71 2.84 12.179 2.454.698-.183 3.848-2.084 7-4.223zm362.968-5.027 14.037-7.032 10.108-15.12c15.291-22.874 29.723-40.606 49.065-60.286l17.501-17.806-.282-12.131c-.154-6.673-.506-12.496-.78-12.94-.944-1.526-6.072 2.077-15.474 10.87-27.685 25.893-61.218 66.148-79.814 95.814-2.413 3.85-5.145 8.125-6.07 9.5-.925 1.375-3.4 5.584-5.5 9.352-2.943 5.287-3.516 7.038-2.506 7.662 1.676 1.036 2.841.57 19.715-7.883zm-187.295 3.932c2.723-3.009 1.036-4.063-6.502-4.063-8.06 0-9.368 1.78-3.191 4.342 5.065 2.1 7.606 2.028 9.693-.279zm-216.419-9.095c29.398-24.392 71.277-44.066 110.476-51.9 6.05-1.208 13.025-2.655 15.5-3.214 2.475-.56 11.177-1.275 19.338-1.59l14.839-.574 2.06-4.24c1.132-2.33 1.803-4.904 1.49-5.718-1.175-3.062-11.432-3.23-35.727-.583-45.144 4.918-99.939 29.697-137.055 61.98-8.35 7.263-8.829 8.362-4.727 10.862 1.805 1.1 3.743 2.003 4.306 2.005.564.002 4.839-3.16 9.5-7.028zm440.097-12.157c4.058-1.754 8.369-3.891 9.579-4.75 1.21-.859 5.806-6.465 10.214-12.458 7.666-10.423 14.545-18.505 27.518-32.33 5.2-5.542 6.02-6.969 6.639-11.548.937-6.937.182-10.725-2.138-10.725-5.449 0-31.595 28.417-50.605 55-15.216 21.279-15.334 22.916-1.207 16.811zm-254.888-11.518c4.892-4.417 9.874-17.77 12.16-32.587 2.532-16.414 1.058-16.601-11.18-1.417-8.562 10.623-15.21 21.983-15.212 25.993-.001 2.44 2.804 8.963 4.288 9.97 1.818 1.232 7.691.076 9.944-1.96zM555.854 885.9l7.354-12.099-.565-23.65c-.311-13.009-.875-47.052-1.253-75.652l-.686-52-7.207-7.399c-4.918-5.05-7.62-7.143-8.511-6.592-1.066.658-1.182 16.238-.631 84.899.706 88.054 1.187 104.592 3.042 104.592.607 0 4.412-5.445 8.457-12.099zM524.358 810c-.078-47.575-.469-95.262-.868-105.971l-.725-19.471-5.741-5.94c-8.717-9.02-9.125-8.459-8.832 12.149l.24 16.811-4.466 7.215c-2.456 3.969-6.153 9.545-8.216 12.392-2.063 2.847-3.75 5.995-3.75 6.996 0 1-.413 1.819-.918 1.819-.506 0-1.922 1.687-3.148 3.75-1.226 2.062-3.29 4.875-4.588 6.25s-3.218 3.625-4.267 5c-1.049 1.375-2.25 2.158-2.67 1.74-.42-.419.449-2.026 1.93-3.573 1.482-1.546 4.15-5.134 5.928-7.973a346.47 346.47 0 0 1 6.861-10.428c1.996-2.896 6.158-10.163 9.25-16.148 4.887-9.458 5.62-11.616 5.607-16.5-.02-7.019-1.078-9.115-3.564-7.054-.952.79-2.34 2.893-3.084 4.674-.745 1.78-4.786 8.98-8.98 16-7.144 11.952-11.455 17.925-30.406 42.123-12.252 15.645-13.185 17.223-11.367 19.232.845.934 2.933 1.903 4.639 2.153 2.491.366 3.86-.23 6.953-3.024 2.117-1.913 4.096-4.457 4.396-5.654.508-2.024 10.428-12.687 10.428-11.21 0 .369-1.913 3.097-4.25 6.063-2.337 2.966-5.996 8.216-8.13 11.666l-3.881 6.273 1.855 3.444c1.02 1.894 2.878 4.115 4.13 4.935 1.252.82 2.276 2.357 2.276 3.416 0 1.058.837 3.594 1.86 5.635 2.115 4.22 3.556 16.966 2.169 19.182-1.223 1.953-1.679.531-2.406-7.498-.724-7.992-5.325-17.872-10.792-23.173-7.953-7.712-21.257-12.117-31.008-10.267-11.073 2.1-22.706 9.895-26.83 17.981-3.074 6.024-5.249 16.021-4.674 21.485.551 5.25 3.926 13.915 5.892 15.13.7.432 4.638-2.923 9.988-8.507 4.9-5.114 9.314-8.924 9.912-8.555.717.444.847 3.255.389 8.432-.986 11.133 1.335 11.787 8.566 2.414 4.18-5.418 7.187-6.802 8.327-3.832.334.87.66 5.257.725 9.75.168 11.606.843 14.112 3.887 14.425 1.372.14 4.97-.998 7.995-2.53 4.137-2.097 6.676-4.391 10.243-9.257 8.368-11.416 7.925-10.985 7.168-6.97-.831 4.41-3.212 7.935-10.47 15.5-5.723 5.966-9.941 12.554-9.941 15.526 0 1.587 9.432 6.974 12.21 6.974.83 0 4.038 1.35 7.13 3 3.092 1.65 6.817 3 8.276 3 1.523 0 3.61 1.031 4.897 2.42 1.233 1.33 3.859 2.865 5.836 3.41 1.976.546 4.871 1.903 6.433 3.015 1.562 1.112 4.017 2.318 5.457 2.679 1.439.361 2.869 1.314 3.177 2.117.308.804 2.478 2.331 4.822 3.395s6.512 3.959 9.262 6.433c2.975 2.677 5.81 4.405 7 4.265 1.984-.232 1.999-.926 1.858-86.734zM272.8 869c5.334-2.199 12.399-5.367 15.699-7.04 3.3-1.672 8.331-3.4 11.18-3.84 2.85-.44 6.322-1.547 7.716-2.46 1.393-.913 4.237-1.663 6.319-1.666 2.082-.003 5.09-.687 6.687-1.52 1.595-.832 3.646-1.276 4.556-.987.91.289 3.88.03 6.598-.573 11.033-2.45 32.074-4.132 48.942-3.912 4.024.053 5.664-2.445 5.369-8.174-.15-2.911.3-5.324 1.196-6.401.954-1.149 1.499-4.515 1.622-10.022.101-4.56.595-9.105 1.096-10.099 1.802-3.57 3.445-11.27 2.885-13.515-.401-1.606.128-2.964 1.77-4.54 1.288-1.236 3.245-4.16 4.349-6.5 1.326-2.809 3.537-5.213 6.517-7.086 2.48-1.56 4.742-3.725 5.026-4.812.284-1.087 1.114-1.895 1.845-1.796 3.385.46 4.894-.286 6.374-3.147.879-1.7 1.337-3.77 1.018-4.6-.349-.91.425-2.3 1.948-3.499 2.922-2.298 5.487-6.83 5.487-9.694 0-1.108.887-2.264 2.012-2.62 2.313-.735 6.988-7.162 6.988-9.608 0-.905 1.328-2.196 2.951-2.869 3.307-1.37 5.693-4.471 6.206-8.068.189-1.321 1.352-2.903 2.586-3.516 3.723-1.848 6.11-4.486 6.767-7.48.393-1.793 1.886-3.582 4.056-4.863 1.962-1.157 3.434-2.826 3.434-3.892 0-1.026 1.8-3.313 4-5.08 3.055-2.456 4-3.92 4-6.2 0-1.64.618-3.22 1.373-3.51.755-.29 2.592-2.767 4.082-5.505 2.18-4.005 2.58-5.734 2.054-8.851-.872-5.164.716-7.951 9.417-16.528 3.89-3.835 7.074-7.414 7.074-7.953 0-2.073-6.448-7.574-8.878-7.574-1.967 0-25.502 23.057-112.804 110.517C311.643 820.302 262 870.702 262 871.517c0 1.983-.253 2.042 10.801-2.516zm-.951-74.986L282.2 794l3.55-3.55c2.355-2.355 3.215-3.885 2.555-4.545-.548-.548-4.23-1.267-8.183-1.598-3.952-.331-7.455-1.036-7.782-1.567-.886-1.433 1.75-2.79 5.16-2.655 1.65.065 6.472.072 10.715.016 7.157-.094 7.975-.329 11.296-3.245 6.002-5.27 3.69-7.559-7.834-7.756-4.982-.086-5.774-.353-5.479-1.85.306-1.552 1.722-1.75 12.515-1.75h12.17l3.559-3.446c5.827-5.644 4.697-6.94-6.312-7.243-6.685-.184-10.777-2.019-8.234-3.691.77-.507 6.663-.675 13.17-.376l11.773.543 3.575-3.894c1.967-2.14 3.428-4.343 3.248-4.893-.437-1.337-4.918-2.238-11.853-2.382-5.668-.118-7.984-1.268-5.575-2.768.696-.434 6.315-.668 12.485-.52l11.22.268 4.53-4.176c6.99-6.443 6.124-7.642-5.89-8.165-3.652-.158-6.079-.736-6.333-1.507-.314-.952 2.344-1.25 11.136-1.25 11.491 0 11.566-.015 15.083-3.104 3.832-3.364 4.563-5.827 1.785-6.014-.963-.065-7.806-.403-15.208-.75-15.934-.748-14.78.573-14.958-17.132-.063-6.325-.481-12.078-.93-12.784-1.171-1.847-3.648-.569-6.731 3.474l-2.682 3.516.715 13.487c.675 12.75.614 13.467-1.12 13.137-1.558-.297-1.915-1.636-2.358-8.84-.778-12.644-2.207-13.72-8.77-6.6-3.584 3.889-3.995 4.832-3.59 8.25 1.531 12.897 1.891 19.486 1.139 20.83-1.602 2.862-2.757 1.542-2.817-3.22-.08-6.473-1.414-14.124-2.682-15.392-.727-.727-2.337.122-5.282 2.783l-4.237 3.828.69 14.35c.649 13.509.583 14.33-1.12 14.007-1.516-.288-1.97-1.948-2.809-10.255-.646-6.398-1.452-10.06-2.276-10.333-1.732-.573-9.574 7.408-8.929 9.088.283.738.843 6.412 1.245 12.607.694 10.702.636 11.248-1.155 10.905-1.6-.305-1.977-1.588-2.488-8.457-.864-11.59-1.858-12.58-7.224-7.2l-3.173 3.182v14.068c0 19.566-2.08 19.697-4.066.257-.802-7.855-2.481-8.338-8.143-2.346-4.107 4.347-4.375 4.963-3.883 8.914.292 2.334.81 9.061 1.154 14.949.362 6.205 1.116 11.113 1.794 11.675 1.317 1.094 8.104 1.998 11.144 1.485 1.1-.186 6.658-.344 12.35-.351zm-24.138-42.222c6.625-6.502 6.28-6.851-8.199-8.276-6.531-.643-8.943-1.973-6.505-3.586 1.387-.918 8.589-.673 20.15.685 4.31.507 4.961.272 8.75-3.15 3.729-3.37 5.242-6.334 3.342-6.55-16.927-1.932-19.746-2.51-20.051-4.108-.488-2.555 5.045-3.182 16.798-1.904 6.896.75 10.73.778 12.024.086 2.416-1.293 7.454-7.847 6.65-8.651-.334-.334-5.001-1.012-10.372-1.505-9.933-.914-12.117-1.7-10.77-3.88.569-.92 4.154-1.047 14.644-.514l13.89.705 2.969-3.178c1.632-1.748 2.968-3.749 2.968-4.447 0-1.605-4.51-2.519-12.434-2.519-3.502 0-6.956-.565-7.965-1.303-1.638-1.197-1.65-1.41-.155-2.652 1.278-1.06 4.441-1.207 14.784-.683l13.158.665 3.806-3.716c2.093-2.044 3.806-4.234 3.806-4.866 0-.739-3.84-1.47-10.75-2.047-8.49-.71-10.75-1.213-10.75-2.398 0-1.252 2.41-1.546 14.579-1.776l14.579-.276 3.369-3.476c2.29-2.362 3.042-3.803 2.35-4.496-.562-.56-7.629-1.305-15.706-1.654-8.888-.384-15.053-1.078-15.618-1.758-.512-.618-1.251-7.972-1.64-16.344-.816-17.5-1.392-18.306-7.924-11.076l-3.744 4.144.703 13.25c.454 8.57.346 13.471-.304 13.873-1.683 1.04-2.25-1.04-2.864-10.512-.708-10.93-1.734-11.796-7.445-6.283l-4.023 3.884.344 12.911c.237 8.898-.003 13.028-.773 13.289-1.383.468-2.383-4.251-2.383-11.243 0-10.03-1.438-10.627-8.445-3.513l-4.87 4.945.647 13.503c.436 9.077.302 13.716-.409 14.155-1.823 1.127-2.185-.225-2.702-10.104-.59-11.305-1.606-12.388-6.869-7.325-5.487 5.278-5.624 5.847-4.333 18.061.818 7.744.851 11.35.11 12.091-1.592 1.593-3.129-3.389-3.129-10.144 0-3.192-.589-6.55-1.326-7.557-1.25-1.709-1.54-1.625-5.038 1.446-5.573 4.893-5.746 5.59-4.105 16.524 1.81 12.055 1.81 12.461.03 12.461-.962 0-1.646-1.574-2.064-4.75-1.113-8.449-1.658-10.363-2.838-9.97-1.692.561-7.534 29.094-6.746 32.947.79 3.863 2.463 4.398 14.587 4.66 4.95.108 10.575.581 12.5 1.052 6.092 1.49 7.324 1.16 11.712-3.147zm-24.776-55.226c4.197-4.33 3.673-7.138-1.152-6.173-3.65.73-4.747 2.038-4.769 5.69-.029 4.928 1.492 5.052 5.921.483zm334.064.32c0-1.044-1.325-7.183-2.944-13.642-1.619-6.46-3.502-14.669-4.186-18.244-.683-3.575-1.84-7.219-2.573-8.097-.903-1.084-4.584-1.992-11.45-2.824l-10.12-1.227-4.364 4.282c-2.4 2.356-4.363 4.803-4.363 5.44 0 .751 4.474 1.593 12.75 2.398 7.013.683 13.313 1.698 14 2.257.892.725 1.254 5.066 1.265 15.143.008 7.77.352 14.657.763 15.304.743 1.168 7.582 2.182 9.972 1.478.688-.202 1.25-1.223 1.25-2.267zm-320.478-14.013c3.651-3.366 5.583-6.54 4.228-6.948-.138-.041-3.813-.604-8.167-1.25-8-1.187-10.802-3.08-6.252-4.222 1.36-.341 6.21-.17 10.776.383 6.57.794 8.834.722 10.848-.347 2.603-1.381 8.045-7.66 8.045-9.284 0-.496-3.934-1.307-8.743-1.803-7.052-.728-8.806-1.236-9.069-2.629-.295-1.565.841-1.718 12.1-1.633 13.196.099 16.398-.817 18.845-5.389 1.522-2.843.216-3.572-7.633-4.26-9.776-.858-11.5-1.313-11.5-3.035 0-1.298 1.832-1.419 13.25-.87l13.25.638 3.293-3.454c2.63-2.76 3.028-3.673 1.978-4.545-.724-.6-7.457-1.41-14.963-1.8-7.506-.389-14.246-1.076-14.978-1.527-.97-.598-1.465-4.801-1.83-15.528-.338-9.954-.878-14.834-1.67-15.096-.644-.213-2.67.95-4.5 2.584l-3.33 2.971-.5 14.255c-.613 17.474-2.38 20.02-3.448 4.965-.39-5.516-1.197-10.33-1.792-10.697-.595-.368-2.595.983-4.446 3.002l-3.364 3.67.684 13.625c.57 11.362.455 13.547-.697 13.163-1.929-.643-2.721-4.135-2.837-12.503-.102-7.352-1.248-9.636-3.6-7.177-.998 1.042-1.392 8.041-1.655 29.368l-.345 28 3.5.618c8.168 1.443 9.842 1.07 14.522-3.245zm283.687-29.7c5.664-5.403 5.688-5.508 4.46-19.423-.642-7.258-.531-8.75.648-8.75 1.507 0 2.653 4.77 2.672 11.128.016 5.39 2.064 6.54 5.9 3.313l3.111-2.619v-12.91c0-7.102.402-12.912.893-12.912 1.493 0 2.106 2.84 2.122 9.832.016 6.779.983 9.905 2.73 8.826.778-.481 1.81-21.154 2.517-50.493.098-4.032-.956-4.771-8.072-5.66-3.027-.379-6.078-.909-6.78-1.178-1.483-.57-10.41 7.315-10.41 9.193 0 1.706 1.848 2.306 9.51 3.091 7.32.75 11.005 2.653 8.49 4.383-.825.568-2.4.794-3.5.503-1.1-.29-6.407-.816-11.794-1.166l-9.794-.638-3.456 3.35c-5.731 5.554-5.158 6.125 7.94 7.908 7.166.976 9.335 2.057 8.109 4.04-.745 1.206-4.2.987-17.785-1.127-5.762-.896-7.148-.813-9.236.555-3.408 2.232-6.036 6.429-4.8 7.665.54.54 5.106 1.488 10.148 2.11 6.933.853 9.168 1.49 9.168 2.612 0 1.274-1.911 1.386-13.457.787l-13.458-.698-3.708 3.399c-6.12 5.608-4.842 6.375 12.027 7.218 9.884.494 14.893 1.14 15.62 2.017.588.709 1.3 7.292 1.581 14.63.282 7.337.696 13.904.922 14.591.72 2.196 2.498 1.368 7.682-3.577zm25.671-3.078c1.033-.654 1.202-2.066.67-5.612-1.38-9.202-2.457-9.521-9.593-2.846-5.653 5.288-6.35 8.02-2.207 8.647 5.087.77 9.74.692 11.13-.189zM226.384 615.15c4.933-5.092 4.424-7.15-1.77-7.15-6.888 0-7.614.564-7.614 5.907 0 8.195 2.347 8.506 9.384 1.243zm255.632-2.88 4.22-4.77-.611-10c-.337-5.5-.215-10.62.27-11.378 1.802-2.817 3.105.106 3.105 6.968 0 8.85 1.5 9.781 7.041 4.37l3.9-3.809.28-11.994c.337-14.494 2.129-17.003 3.176-4.448.38 4.553 1.123 8.71 1.65 9.239.615.614 2.561-.61 5.395-3.391l4.434-4.352-.188-12.448c-.19-12.62.198-15.063 2.2-13.826.672.415 1.112 3.98 1.112 9.006 0 11.09 1.373 12.425 6.997 6.8l4.003-4.002v-13.2c0-10.116.292-13.105 1.25-12.788.79.262 1.546 3.701 2.054 9.334.442 4.905 1.257 9.369 1.811 9.919.674.669 2.313-.396 4.946-3.211l3.939-4.212v-12.122c0-9.252.296-12.024 1.25-11.707.77.255 1.525 3.412 1.964 8.214.393 4.29.963 8.048 1.267 8.352 1.15 1.15 3.013-2.055 4.123-7.09 4.842-21.95 4.732-20.828 2.525-25.724l-2.028-4.5-11.428-1.066c-15.94-1.487-21.874-.704-25.96 3.427-3.117 3.15-3.155 3.29-1.272 4.693 1.068.795 3.993 1.45 6.5 1.457 7.106.017 12.059 1.093 12.059 2.62 0 1.655.38 1.618-14.5 1.4l-12-.174-3.951 4.07c-4.914 5.061-3.949 6.69 3.753 6.33 7.703-.358 13.698.624 13.698 2.245 0 2.528-2.403 2.943-15.51 2.682l-13.011-.258-3.983 4.078c-5.086 5.208-4.09 5.955 8.004 5.996 9.719.033 12.908.99 10.695 3.208-.898.9-5.589 1.392-15.449 1.621-12.093.281-14.559.613-16.894 2.276-3.3 2.35-4.63 5.788-2.709 7.005.746.472 5.182.873 9.857.89 9.678.035 12.678 1.14 9.559 3.519-1.5 1.144-5.104 1.481-15.827 1.481h-13.886l-2.989 2.989c-1.644 1.644-2.748 3.379-2.453 3.855.294.476 5.161 1.183 10.815 1.57 11.077.758 13.543 1.771 10.281 4.225-1.612 1.212-3.939 1.383-12 .88-5.5-.343-11.146-.84-12.546-1.106-1.955-.37-3.545.44-6.853 3.494-2.369 2.187-4.112 4.565-3.873 5.284.316.953 4.46 1.512 15.245 2.055 8.384.422 15.4 1.234 16.17 1.872 1.026.852 1.357 4.588 1.357 15.338 0 7.816.284 14.495.631 14.842 1.06 1.06 3.955-1.022 8.385-6.029zm-179.95-25.02c12.879-13.063 45.92-46.257 73.425-73.765C458.774 430.193 501 387.145 501 385.532c0-.843-.529-1.532-1.174-1.532-1.102 0-20.488 7.914-29.326 11.973-4.248 1.95-19.074 5.922-31.5 8.437-12.89 2.61-24.884 3.736-42.929 4.03-20.034.326-20.466.518-21.676 9.642-.842 6.344-2.729 6.499-2.058.168.698-6.595 2.749-11.838 10.065-25.737 11.204-21.283 12.86-29.114 8.249-39.016-2.568-5.514-7.31-9.404-14.651-12.017-5.733-2.04-11.521-1.255-19.155 2.598-7.239 3.654-9.718 7.214-18.053 25.922-5.885 13.207-8.712 17.93-18.542 30.984-4.191 5.566-4.165 7.016.128 7.016 4.291 0 5.048 1.04 6.545 9 .673 3.575 1.424 7.513 1.67 8.75.74 3.741 3.856 2.61 8.824-3.204 5.078-5.945 4.898-5.334 9.633-32.546 3.659-21.028 6.563-27.945 13.971-33.27 4.381-3.149 7.482-3.411 12.43-1.052 2.594 1.237 3.957 2.825 5.183 6.033 1.57 4.114 1.56 4.698-.21 10.572-2.073 6.88-9.104 17.853-19.364 30.217-12.277 14.796-12.359 14.945-12.854 23.51-.587 10.124.695 10.725 8.434 3.953 3.12-2.73 6.139-4.963 6.71-4.963.573 0 2.286 1.194 3.81 2.652 2.16 2.071 3.07 2.402 4.146 1.51.758-.63 1.617-.906 1.908-.614.598.597-.239 18.692-.898 19.423-.8.888-2.285-2.47-2.3-5.2-.024-4.18-2.97-10.621-5.177-11.322-2.383-.756-7.486 2.578-13.814 9.025-6.365 6.486-7.18 6.112-7.018-3.224.074-4.262.102-8.312.064-9-.14-2.479-2.616-1.148-8.266 4.443-3.164 3.13-6.029 5.417-6.366 5.08-.337-.338-.97-3.462-1.404-6.943-.969-7.748-2.935-14.86-4.623-16.719-1.073-1.181-1.906-1.132-5.587.334-5.26 2.095-7.027 3.605-11.764 10.055-5.75 7.827-6.564 10.69-6.538 23 .021 9.939.279 11.482 2.666 16 3.56 6.737 10.05 12.81 17.311 16.2 5.277 2.463 7.144 2.796 15.5 2.763 7.934-.031 10.324-.434 14.5-2.444 5.433-2.615 16.5-12.476 16.5-14.703 0-1.704 3.85-13.266 5.1-15.316.58-.951.684.513.283 4-.347 3.025-1.026 5.928-1.507 6.45-.482.523-.876 1.554-.876 2.293 0 1.874-7.039 11.206-11.223 14.88-3.096 2.718-9.303 6.146-13.902 7.677-1.13.376-1.84 2.319-2.332 6.37-.389 3.207-1.795 7.8-3.125 10.206-1.33 2.407-2.418 5.025-2.418 5.82 0 1.703-6.972 10.418-19.664 24.58-5.04 5.623-10.89 12.622-13 15.552-2.11 2.93-5.411 7.016-7.336 9.08-4.553 4.88-14 20.385-14 22.978 0 6.634-2.25 12.044-7.061 16.984-2.717 2.789-4.939 5.625-4.939 6.302 0 2.077 6.261 7.828 8.522 7.828 1.455 0 9.54-7.517 25.544-23.75zm-61.51 13.695c1.894-1.835 3.444-3.874 3.444-4.53 0-1.56-5.267-2.497-16.393-2.916-7.213-.272-9.277-.694-10.312-2.11-.9-1.23-1.295-5.664-1.295-14.515 0-15.722-.663-17.874-5.507-17.874-2.16 0-3.771.561-4.104 1.43-.302.786.432 4.948 1.632 9.25 1.2 4.3 3.403 13.67 4.897 20.82l2.715 13 5.934.633c11.166 1.19 15.165.519 18.99-3.188zm13.48-36.957c.295-12.918.88-24.207 1.299-25.086.42-.879 2.09-2.58 3.714-3.78 1.95-1.442 2.951-3.062 2.951-4.78 0-1.835 1.687-4.268 5.75-8.292 6.984-6.917 10.424-11.254 16.698-21.05 2.642-4.125 7.897-10.432 11.678-14.015 7.57-7.176 8.826-10.908 4.874-14.485-1.1-.995-2-2.352-2-3.015 0-.663-1.125-2.864-2.5-4.89-1.628-2.399-2.5-5.068-2.5-7.653 0-2.183-.539-4.832-1.197-5.886-.935-1.497-.91-3.36.111-8.5.934-4.701 1.002-6.952.238-7.872-.781-.942-.546-2.152.874-4.487 1.07-1.758 2.365-3.197 2.878-3.197.513 0 1.951-1.688 3.196-3.75 1.244-2.063 4.118-6.227 6.386-9.254 2.267-3.027 4.925-7.955 5.904-10.95 2.07-6.33 1.823-6.71-6.303-9.684-2.523-.924-8.786-3.633-13.918-6.02-5.132-2.388-9.567-4.342-9.855-4.342-.288 0-2.524-1.35-4.97-3-2.444-1.65-4.69-3-4.989-3-.3 0-3.54-1.962-7.2-4.36-3.66-2.397-8.098-5.21-9.863-6.25-1.764-1.04-6.398-4.546-10.297-7.792-4.76-3.962-7.421-5.572-8.097-4.896-.676.676-.668 18.891.023 55.402.566 29.918 1.275 73.971 1.575 97.896.3 23.925.812 49.543 1.137 56.928l.591 13.429 5.07 5.36c8.094 8.559 8.12 8.502 8.742-18.729zm185.81 11.669 5.276-5.343-.311-13.407c-.264-11.389-.085-13.407 1.189-13.407 1.214 0 1.555 1.905 1.79 9.99.158 5.493.722 10.422 1.253 10.953.62.62 2.563-.603 5.435-3.421l4.47-4.387.276-13.985c.183-9.275.656-14.112 1.405-14.36.767-.256 1.262 2.679 1.546 9.163.23 5.247.914 10.036 1.52 10.642 1.787 1.787 5.205.026 8.336-4.296 2.851-3.936 2.909-4.259 2.438-13.665-.512-10.244.304-16.225 2.307-16.893.912-.304 1.224 2.173 1.224 9.707 0 12.411 1.066 13.454 7.343 7.184l4.157-4.153.5-13.66c.354-9.669.865-13.779 1.75-14.072.945-.313 1.25 2.055 1.25 9.701 0 11.933 1.084 13.302 6.428 8.121l3.297-3.195.716-13.183c.395-7.25.877-13.342 1.072-13.537.194-.195.834-.058 1.42.305.627.387 1.067 4.346 1.067 9.6 0 8.136.172 8.941 1.911 8.941 1.051 0 3.076-1.385 4.5-3.077 2.268-2.695 2.585-3.967 2.558-10.25-.017-3.945-.462-10.548-.988-14.673-1.197-9.373-2.782-10.986-10.842-11.033-3.101-.018-8.74-.432-12.532-.92-7.783-1.003-10.68-.28-14.857 3.704-5.002 4.772-3.526 6.008 7.75 6.492 4.552.195 6 .619 6 1.757 0 1.235-2.133 1.55-12.082 1.78l-12.083.279-3.3 3.405c-4.932 5.088-3.77 6.536 5.242 6.536 4.633 0 8.031.505 9.212 1.368 1.805 1.32 1.792 1.411-.37 2.569-1.604.858-5.482 1-13.6.5l-11.358-.699-4.744 4.483c-3.448 3.257-4.561 4.961-4.073 6.234.593 1.545 1.584 1.672 8.414 1.072 8.128-.714 13.742.465 12.993 2.73-.293.884-4.631 1.387-15.027 1.743l-14.615.5-3.554 3.446c-4.704 4.56-4.648 6.708.195 7.463 2.062.321 6.034.51 8.826.421 6.167-.198 8.544.878 6.017 2.726-1.24.906-4.925 1.11-13.402.738l-11.691-.513-3.362 3.523c-1.85 1.938-3.097 3.953-2.772 4.479.325.526 4.676 1.275 9.67 1.666 7.73.605 9.031.959 8.754 2.38-.285 1.46-1.992 1.671-13.534 1.671h-13.209l-3.74 3.733c-5.413 5.403-4.074 6.159 11.991 6.767 7.261.275 13.764.864 14.452 1.309.758.49 1.252 3.05 1.255 6.5.011 11.893 1.294 25.191 2.43 25.191.623 0 3.508-2.404 6.41-5.343zm106.032-7.907c1.519-4.123 2.126-11.63.998-12.327-1.05-.648-12.876 10.216-12.876 11.828 0 1.212 4.056 2.614 7.775 2.686 2.516.048 3.467-.458 4.103-2.187zm-282.752-6.5c5.052-8.874 11.713-19.018 17.819-27.135 3.055-4.062 6.426-8.562 7.49-10 1.065-1.438 4.246-5.09 7.07-8.115 10.176-10.904 21.279-27.515 20.225-30.26-.788-2.054-7.452-4.997-9.142-4.038-1.19.675-9.513 11.473-14.615 18.96-.81 1.19-4.947 6.428-9.193 11.641-16.542 20.311-24.856 35.077-25.577 45.426-.762 10.954 1.072 12.044 5.923 3.521zm-45.442-11.869c.68-1.774-1.51-176.49-2.26-180.131-.254-1.238-.878-2.25-1.386-2.25-.509 0-3.691 4.612-7.073 10.25l-6.149 10.25.593 34c.327 18.7.857 51.775 1.178 73.5.342 23.079 1.024 40.932 1.64 42.944 1.173 3.827 9.26 13.056 11.441 13.056.767 0 1.674-.728 2.016-1.619zM62.05 477.208c2.998-2.636 8.825-7.543 12.95-10.905 16.079-13.105 40.662-39.666 59.978-64.803 14.904-19.396 42.075-61.676 52.519-81.725 5.718-10.978 4.852-11.78-6.874-6.363-8.091 3.737-9.556 5.29-17.065 18.088-9.99 17.024-10.415 17.697-25.96 41-21.594 32.372-41.176 55.131-70.525 81.968L53 467.338v7.33c0 9.114 1.194 9.449 9.05 2.54zm-2.435-21.451c6.398-4.974 37.384-36.874 43.057-44.326 3.336-4.383 6.805-8.582 7.71-9.332 4.553-3.78 33.056-44.62 43.61-62.49 6.833-11.567 8.541-15.609 6.6-15.609-2.665 0-34.074 15.72-36.203 18.12-1.162 1.31-3.672 5.08-5.58 8.38-14.96 25.884-35.03 51.28-55.94 70.784-11.403 10.636-10.318 7.659-10.012 27.466.128 8.31.333 9.25 2.008 9.25 1.026 0 3.163-1.01 4.75-2.243zm8.256-45.487c13.513-13.987 22.617-24.696 30.835-36.27 8.17-11.508 15.294-23.378 15.294-25.485 0-2.316-3.24-1.48-12.867 3.315-6.637 3.306-7.82 4.364-11.928 10.67-6.302 9.675-19.055 25.412-28.514 35.186l-7.922 8.187.01 6.313c.016 9.482.082 9.812 1.971 9.834.962.01 6.867-5.277 13.12-11.75zm292.442-14.52c4.635-5.638 10.36-13.948 12.725-18.467 4.107-7.851 4.245-8.395 3.1-12.214-2.848-9.51-11.11-9.346-17.532.348-4.42 6.672-6.246 12.316-8.525 26.35-2.914 17.948-1.652 18.44 10.232 3.983zm59.263 8.172c40.645-4.012 79.977-20.036 118.98-48.474 13.618-9.93 27.444-22.02 27.444-23.997 0-2.107-4.121-4.451-7.826-4.451-2.614 0-4.547 1.05-8.527 4.635-2.83 2.55-6.272 5.34-7.647 6.201-1.375.862-5.2 3.668-8.5 6.236-40.351 31.4-90.255 49.693-136.807 50.15-10.24.101-10.908.236-12.75 2.577-2.436 3.097-2.533 6.9-.193 7.512 3.456.903 25.117.668 35.826-.39zm-97.212-12.558c4.296-4.297 3.53-5.903-4.011-8.413-8.162-2.716-30.063-12.622-36.853-16.668-6.79-4.046-20.63-13.581-29.607-20.396-8.461-6.423-28.744-26.927-37.232-37.637-3.16-3.988-6.29-7.248-6.954-7.246-2.106.007-7.707 3.91-7.707 5.371 0 3.752 25.123 31.348 38.5 42.29 17.805 14.565 34.217 25.478 48.5 32.248 11.178 5.3 29.427 12.93 31.114 13.01.887.042 2.8-1.11 4.25-2.56zM423 371.509c28.697-5.865 58.01-16.627 75-27.534 12.078-7.753 26.118-17.448 27.532-19.01 1.658-1.833 1.622-1.956-.86-2.9-1.427-.542-4.749-1.269-7.383-1.615-4.386-.577-5.168-.34-9.289 2.814-10.675 8.169-35.174 21.345-47.5 25.546-21.504 7.33-36.046 10.88-50.493 12.326-5.779.579-11.034 1.486-11.679 2.016-1.47 1.208-2.74 8.373-1.763 9.953.92 1.488 15.717.595 26.435-1.596zm-85.343-8.23c.955-2.286 1.22-4.25.687-5.095-.477-.756-4.462-2.805-8.855-4.554-10.88-4.33-32.158-15.707-41.941-22.424-13.759-9.447-34.552-27.37-44.032-37.956-5.11-5.706-7.413-6.389-12.566-3.724-1.622.839-2.95 1.77-2.95 2.07 0 3.397 20.173 24.333 35.5 36.842 13.154 10.735 18.015 14.1 30 20.77 8.416 4.683 14.905 7.71 36 16.795 4.374 1.884 6.532 1.164 8.157-2.724zm9.02-32.793c.384-1.173-9.745-7.486-12.01-7.486-2.039 0-5.98 5.086-4.832 6.235 2.167 2.167 16.202 3.21 16.843 1.251zm252.004-3.875c-.279-.727-2.909-2.69-5.844-4.363-5.478-3.12-14.255-11.041-19.114-17.248a1874.84 1874.84 0 0 0-5.187-6.592C566.53 295.873 551 268.486 551 267.482c0-.163-1.956-4.501-4.346-9.64-9.819-21.11-27.992-76.783-34.075-104.391-.843-3.823-2.423-10.133-3.513-14.022-1.09-3.889-2.928-11.539-4.085-17-2.348-11.075-4.029-13.429-9.592-13.429-3.157 0-3.39.223-3.39 3.25-.002 4.132 6.432 32.073 12.377 53.75 4.329 15.785 19.24 61.204 24.131 73.5 10.845 27.265 21.202 49.102 27.984 59 4.733 6.907 15.117 19.322 19.009 22.728 3.494 3.057 12.779 7.024 17.978 7.68 5.045.638 6.143.153 5.203-2.297zm-273.034-2.178c4.405-3.61 5.338-6.048 3.153-8.233-2.098-2.098-4.15-1.244-10.179 4.233-6.376 5.792-6.59 7.567-.915 7.567 2.633 0 4.746-.95 7.941-3.567zm245.353-.81c0-.758-.701-1.96-1.559-2.672-2.787-2.313-14.715-18.284-18.635-24.951-3.472-5.906-10.295-19.527-16.28-32.5-7.571-16.416-14.443-35.124-22.04-60-2.015-6.6-4.28-13.8-5.034-16-4.796-14-17.862-64.294-19.024-73.232-.857-6.584-2.044-8.153-6.428-8.495-3.123-.244-3.533.012-3.806 2.372-.262 2.262 1.526 12.668 4.874 28.355 4.592 21.52 20.375 73.083 30.38 99.253 11.49 30.056 12.084 31.416 22.238 50.944 14.24 27.384 23.445 38.205 32.564 38.28 1.68.014 2.75-.513 2.75-1.355zm41.418.77c3.071-1.179 1.508-3.155-5.049-6.383-8.38-4.125-19.117-14.23-27.209-25.605-5.856-8.233-17.937-31.601-23.474-45.405-7.196-17.94-21.31-61.17-26.773-82a887.72 887.72 0 0 0-4.404-16c-1.34-4.675-3.797-14.125-5.46-21-3.19-13.191-4.303-15-9.24-15-2.437 0-2.809.386-2.809 2.92 0 5.924 9.32 44.266 18.13 74.58 8.243 28.363 25.407 72.372 33.737 86.5 16 27.137 20.585 32.8 33.849 41.807 7.29 4.95 14.638 7.146 18.702 5.586zm-299.709-4.53c3.492-2.274 7.278-5.44 8.413-7.034 1.933-2.714 1.96-3.054.447-5.363-.888-1.356-2.33-2.466-3.202-2.466-.873 0-4.025 2.228-7.004 4.951-2.98 2.724-7.206 5.957-9.39 7.185-4.162 2.338-5.257 5.382-2.223 6.175 4.333 1.132 7.033.414 12.96-3.447zm237.853.037c.374-.605-.27-2.292-1.431-3.75-10.917-13.706-23.755-39.272-36.482-72.65-6.134-16.086-23.473-69.65-27.031-83.5-5.84-22.732-9.19-37.56-11.296-50-.326-1.925-1.276-4.288-2.112-5.25-1.899-2.186-7.057-2.313-7.87-.195-1.465 3.819 6.794 39.53 15.136 65.445 2.39 7.425 7.339 22.95 10.998 34.5 3.66 11.55 8.167 25.275 10.016 30.5 3.148 8.898 4.747 13.058 12.295 32 6.043 15.164 19.119 40.489 24.326 47.113 4.207 5.352 11.722 8.585 13.45 5.787zm-251.322-7.15c8.083-4.306 14.76-10.379 14.76-13.424 0-1.876-2.786-5.326-4.301-5.326-.546 0-3.108 1.98-5.695 4.399-2.586 2.42-8.387 6.54-12.891 9.157s-8.466 5.206-8.804 5.753c-.92 1.488 2.668 3.691 6.013 3.691 1.618 0 6.53-1.913 10.918-4.25zm232.428 1.672c.333-.868-.287-2.774-1.378-4.236-1.615-2.162-3.325-2.882-9.177-3.862-11.354-1.9-20.198-6.52-27.3-14.26-3.313-3.61-7.406-9.264-9.094-12.564-6.852-13.39-3.84-34.519 6.584-46.21 1.522-1.707 1.834-3.06 1.368-5.931-.332-2.046-1.226-4.342-1.986-5.103-3.306-3.305-13.264 9.873-17.565 23.244-3.568 11.095-3.728 27.26-.352 35.605 3.45 8.527 7.917 14.59 15.136 20.546 11.451 9.445 23.448 14.086 36.877 14.265 4.853.065 6.42-.275 6.887-1.494zm95.008-.568c2.253-1.87 1.5-2.6-3.426-3.329-11.834-1.747-23.43-11.775-34.164-29.543-10.22-16.918-25.886-52.545-35.17-79.982a6720.224 6720.224 0 0 0-5.355-15.755c-2.5-7.318-10.54-37.69-14.623-55.245-1.216-5.225-2.893-10.287-3.729-11.25-1.662-1.915-6.706-2.373-7.738-.703-.611.989.44 7.116 2.566 14.953.522 1.925 2.556 10.25 4.52 18.5 1.964 8.25 3.946 16.125 4.404 17.5.459 1.375 1.615 5.2 2.57 8.5 4.478 15.478 18.375 55.615 23.198 67 7.173 16.931 11.623 27.073 12.289 28 .394.55 2.19 3.7 3.992 7 5.949 10.9 9.928 16.165 18.256 24.153 11.12 10.668 15.158 12.655 24.16 11.89 3.809-.325 7.521-1.084 8.25-1.689zM288.44 303.2c4.918-2.53 10.912-6.488 13.321-8.797 3.723-3.567 4.332-4.698 4.06-7.541-.483-5.024-3.18-4.9-8.69.4-7.767 7.472-17.409 12.9-30.382 17.108-2.76.895-2.062 2.292 1.943 3.89 4.688 1.869 7.856 1.057 19.748-5.06zm234.019-3.135c.317-.514-.43-3.007-1.66-5.54-1.908-3.928-2.844-4.76-6.354-5.643-2.264-.57-6.328-2.695-9.03-4.722-10.015-7.51-12.949-21.39-7.36-34.82 1.752-4.21-.15-11.34-3.024-11.34-5.064 0-9.46 11.514-9.355 24.5.065 7.98.432 9.737 3.233 15.5 3.58 7.364 10.668 15.16 16.59 18.246 7.61 3.964 15.739 5.795 16.96 3.82zm-248.717-4.15c7.675-2.549 20.08-10.505 23.625-15.153 2.77-3.632 3.334-7.784 1.657-12.197-1.341-3.528-3.462-3.212-5.999.893-3.095 5.007-15.358 16.034-20.83 18.728-3.63 1.788-6.794 2.392-13.946 2.66-10.42.39-11.317 1.237-6.031 5.685 2.966 2.496 3.691 2.66 9.25 2.082 3.317-.344 8.84-1.559 12.274-2.699zm-3.164-12.792c7.54-3.567 16.299-11.975 19.92-19.12 2.273-4.487 2.647-6.265 2.198-10.455-.667-6.222-2.865-13.048-4.201-13.048-.548 0-1.372 1.8-1.833 4-1.932 9.238-4.9 14.966-11.008 21.238-7.389 7.589-13.407 10.717-18.92 9.836-11.486-1.837-15.788-13.982-7.368-20.802 2.534-2.052 5.633-2.305 5.633-.46 0 .722-1.35 2.31-3 3.53-4.547 3.362-4.025 9.06 1.072 11.695 4.717 2.44 8.537 1.849 12.693-1.964 3.472-3.185 3.726-3.805 3.612-8.8-.2-8.731-6.166-13.798-16.192-13.751-14.195.066-22.511 12.86-17.644 27.143 2.149 6.307 7.091 10.793 13.638 12.377 8.959 2.168 14.609 1.793 21.4-1.42zM514 281.103c0-3.025-9.75-23.07-11.56-23.764-3.845-1.476-4.524 5.688-1.345 14.186 1.555 4.155 3.143 6.359 6.15 8.538 4.694 3.4 6.755 3.718 6.755 1.04zm96.31-8.688c.758-2.644.168-4.491-4.242-13.28-6.465-12.882-14.441-31.26-18.071-41.635-1.54-4.4-4.458-12.5-6.486-18-2.028-5.5-4.127-11.575-4.664-13.5-.536-1.925-1.805-5.75-2.819-8.5-1.536-4.165-6.24-19.23-9.994-32-.485-1.65-1.412-5.654-2.06-8.897-1.33-6.665-4.46-10.603-8.429-10.603-2.232 0-2.545.422-2.545 3.43 0 4.94 5.277 27.31 9.334 39.57 5.74 17.345 12.163 35.044 15.605 43 1.785 4.125 5.193 12.225 7.574 18 4.403 10.679 19.821 42.437 21.747 44.793 1.695 2.074 4.098.943 5.05-2.378zM176.16 1249.16c.49-1.26 6.08-10.252 16.127-25.939 4.833-7.546 11.54-18.354 14.901-24.017 3.363-5.663 7.017-10.78 8.122-11.37 2.553-1.367 9.587-.541 18.912 2.22 8.331 2.467 9.777 3.388 9.777 6.231 0 2.374-10.228 43.302-12.3 49.215l-1.4 4-27.239.266c-15.208.149-27.089-.119-26.9-.606zm118.839.448c0-.216.855-4.828 1.9-10.25a2189.576 2189.576 0 0 0 4.142-22.358c1.233-6.875 2.627-13.255 3.097-14.178.93-1.825 5.06-1.748 19.361.358 3.85.567 17.671 1.321 30.714 1.676 19.179.52 23.985.93 25.13 2.144.778.825 2.55 5.325 3.939 10 1.388 4.675 3.96 13.225 5.716 19a5000.731 5000.731 0 0 1 3.713 12.25c.491 1.65-2.286 1.75-48.595 1.75-27.015 0-49.117-.176-49.117-.392zm158.782-10.358a3744.623 3744.623 0 0 0-7.477-21.509c-4.98-14.157-5.397-13.492 10.873-17.306 8.578-2.01 9.174-1.821 13.205 4.186 3.383 5.043 14.017 20.471 17.492 25.379 7.302 10.313 13.125 18.945 13.125 19.455 0 .3-9.793.545-21.763.545h-21.762l-3.693-10.75zM0 1218.09c0-1.638 6.68-8.844 24.033-25.929l24.034-23.661-.1-30.816c-.093-29.06-.209-30.926-2.033-32.75-1.064-1.064-3.244-1.934-4.845-1.934-2.862 0-2.918.106-3.311 6.25-.22 3.438.045 15.25.588 26.25.544 11 .652 21.35.24 23-.51 2.04-6.801 9.077-19.67 22l-18.922 19-.007-54.259L0 1090.983l5.75.569c18.795 1.86 55.747 9.397 70.315 14.342 19.83 6.732 38.122 15.457 58.174 27.749 9.626 5.9 13.329 6.84 12.24 3.107-.362-1.238-3.35-7.773-6.64-14.523-16.615-34.09-39.269-58.446-67.021-72.056-17.58-8.622-32.98-13.466-54.177-17.043-9.823-1.657-18.04-3.193-18.258-3.412-.22-.22-.283-27.288-.14-60.154L.5 909.807l2.664 2.47c5.418 5.02 10.693 4.501 32.836-3.237 6.325-2.21 12.287-4.024 13.25-4.03 2.117-.012 1.908-6.522 2.249 70.245.28 62.954.198 61.89 4.841 63.343 1.188.372 5.985 2.466 10.66 4.653 4.675 2.188 9.523 4.369 10.773 4.847 3.773 1.444 13.347 7.879 19.721 13.255 22.271 18.783 37.99 40.066 49.226 66.647 9.047 21.405 8.143 23.208-6.776 13.513-9.376-6.092-9.523-6.173-29.934-16.503-14.638-7.407-48.707-20.01-54.094-20.01-1.541 0-2.963.68-3.309 1.582-.334.87-.607 15.661-.607 32.87v31.287l-9.683 8.88c-9.406 8.627-20.184 18.954-35.067 33.602-6.103 6.007-7.25 6.777-7.25 4.868zm19.902-43.595c4.5-4.209 4.9-4.996 6.09-11.953 1.651-9.647.706-20.542-3.125-36.042-2.258-9.136-2.894-13.79-2.666-19.5l.299-7.5-5.393-.914c-4.733-.803-5.56-.688-6.75.94-1.522 2.082-1.765 12.593-.438 18.974.457 2.2 1.787 8.46 2.956 13.91 2.412 11.247 2.821 27.08.961 37.175-.927 5.033-.902 6.63.123 7.865 1.891 2.28 2.647 1.998 7.943-2.955zm27.25-148.505c1.045-8.819.935-113.303-.122-114.975-.83-1.313-1.435-1.313-5.234 0L37.5 912.5l-.198 58.17c-.208 61.096-.32 59.483 4.198 60.617 4.232 1.062 4.98.361 5.651-5.297zM26 1025.386c0-3.782-3.26-21.698-5.074-27.886-1.504-5.133-2.202-11.144-2.615-22.533-.574-15.848.691-27.458 5.27-48.37.832-3.797 1.141-7.275.687-7.73-.9-.9-10.353-.05-12.209 1.097-.631.39-2.705 8.488-4.608 17.995-4.814 24.05-4.887 37.713-.312 58.041a3274.208 3274.208 0 0 1 3.983 18c1.139 5.225 2.75 10.263 3.58 11.196 1.43 1.605 7.336 2.756 10.048 1.958.688-.202 1.25-.998 1.25-1.768zm82 81.979c-11.543-5.395-28.793-12.03-36-13.846-3.575-.901-7.85-2.065-9.5-2.587C51.672 1087.51 13.556 1081 4.345 1081H0v-39.091l3.25.533c1.788.293 7.75 1.248 13.25 2.122 24.025 3.818 50.46 14.292 66.511 26.352 13.36 10.038 27.35 24.61 33.776 35.18 3.642 5.99 1.866 6.247-8.787 1.269zm-18.582-16.681c2.098-1.534 1.806-4.514-.59-6.023-2.585-1.628-6.828.693-6.828 3.734 0 3.523 4.03 4.766 7.418 2.289zm-16.45-10.992c1.47-2.693 1.417-2.909-1.274-5.25-3.218-2.801-6.846-3.147-9.123-.87-2.102 2.102-1.98 3.638.545 6.848 2.868 3.647 7.66 3.292 9.853-.728zm-25.797-4.347c2.89-2.614 2.467-8.88-.74-10.982-3.397-2.226-8.985-.88-11.738 2.83-1.906 2.568-1.92 2.813-.287 5.304 2.895 4.418 9.421 5.874 12.765 2.848zm-26.64-5.692c2.067-2.952 1.877-8.974-.347-10.986-4.528-4.098-13.037-2.787-15.731 2.424-1.88 3.636-1.808 4.89.45 7.826 1.255 1.633 3.275 2.62 6.227 3.043 5.564.797 7.571.305 9.4-2.307zm320.219 40.641c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zm135.779-15.89c-1.281-1.955-1.865-5.306-2.144-12.296-.21-5.284-.347-10.283-.303-11.108.043-.825.195-3.525.337-6 .142-2.475.33-6.21.42-8.301.121-2.87.973-4.585 3.473-7 1.822-1.76 5.012-5.35 7.09-7.978 6.186-7.823 17.154-12.035 24.57-9.437 4.047 1.417 7.986 7.474 8.012 12.318.022 4.157-3.622 9.28-8.328 11.708-3.196 1.65-4.554 1.821-8.052 1.02-2.315-.529-4.76-.778-5.437-.552-2.204.734-5.762 9.476-9.045 22.222-3.602 13.987-4.974 17.348-7.262 17.788-.864.167-2.363-.906-3.331-2.384zm5.272-9.654c.626-1.238 2.31-6.525 3.741-11.75 2.629-9.592 7.175-18.243 10.532-20.04 1.298-.694 2.819-.502 5.268.666 3.24 1.545 3.666 1.53 7.236-.242 2.086-1.036 4.646-3.052 5.688-4.48 2.742-3.757.985-10.143-3.278-11.909-4.673-1.935-13.156-.812-17.982 2.382-10.803 7.15-17.203 26.698-14.364 43.873.71 4.302 1.541 4.696 3.159 1.5zm-106.551-66.44c.963-.25 2.538-.25 3.5 0 .963.252.175.458-1.75.458s-2.712-.206-1.75-.457zm26-36c.963-.25 2.538-.25 3.5 0 .963.252.175.458-1.75.458s-2.712-.206-1.75-.457zM416 952.06c0-.582.45-1.059 1-1.059s1 .198 1 .441-.45.72-1 1.059c-.55.34-1 .141-1-.441zm-45.73-26.663c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525zm6-1c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525zM87.485 907.974c-.36-.584-.344-4.81.038-9.391.515-6.181.302-9.717-.826-13.706-.835-2.958-1.812-7.223-2.17-9.48-.606-3.815-.455-4.185 2.161-5.287 7.115-2.997 32.76-37.676 46.419-62.77 1.748-3.212 4.274-7.865 5.613-10.34 8.589-15.873 18.965-42.48 24.373-62.5 5.055-18.707 8.748-38.75 9.883-53.63 3.658-47.953-3.28-94.834-21.22-143.37-7.04-19.044-23.76-53.572-27.286-56.346-4.456-3.504-3.116-9.12 3.914-16.404 3.753-3.89 5.217-4.75 8.086-4.75 3.755 0 3.113-.679 11.936 12.616 5.234 7.887 13.991 24.524 18.237 34.648 2.97 7.081 6.65 17.107 14.771 40.236 2.177 6.2 9.012 33.728 10.553 42.5.628 3.575 1.77 9.2 2.538 12.5 1.768 7.597 2.332 15.522 3.487 48.999.559 16.21.57 29.597.026 33.5a480.754 480.754 0 0 0-1.5 12.001c-1.159 10.72-2.547 18.628-5.09 29-3.727 15.196-8.003 30.278-9.498 33.5-.51 1.1-1.774 4.475-2.807 7.5-4.674 13.682-7.147 19.988-10.39 26.5-1.917 3.85-4.533 9.475-5.812 12.5-2.804 6.631-12.474 23.754-19.1 33.823-2.651 4.028-4.82 7.588-4.82 7.911 0 .324-2.582 4.003-5.738 8.177-3.155 4.174-7.318 9.877-9.25 12.673-4.979 7.207-7.802 10.804-13.543 17.26a1189.12 1189.12 0 0 0-10.816 12.385c-6.613 7.692-11.178 11.348-12.169 9.745zM0 895c0-4.748.352-6.9 1.057-6.465 1.182.73.919 12.362-.297 13.113-.418.259-.76-2.733-.76-6.648zm.11-22.75C.037 867.33.376 865 1.168 865c.641 0 .87.296.508.658-.362.362-.238 1.164.275 1.781.584.704.435 3.166-.398 6.592L.222 879.5l-.111-7.25zm-.047-23.2c-.043-2.368.26-3.127.967-2.42.683.683.704 1.848.064 3.45-.909 2.274-.971 2.212-1.03-1.03zM0 833.5c0-.825.436-1.5.969-1.5.532 0 .71.675.393 1.5-.317.825-.753 1.5-.969 1.5-.216 0-.393-.675-.393-1.5zm617.655-35.329c-.91-1.006-1.655-2.16-1.655-2.566 0-.406-1.238-2.354-2.75-4.33-3.008-3.927-4.704-7.058-13.91-25.668-5.427-10.974-7.4-15.279-12.877-28.107-3.654-8.558-6.645-16.376-7.46-19.5-3.583-13.731-9.81-35.879-10.325-36.722-.863-1.412-4.747-21.042-5.735-28.983-6.041-48.537-5.292-83.552 2.487-116.295 7.451-31.36 19.618-64.656 30.693-84 1.417-2.475 5.192-9.225 8.387-15 3.196-5.775 7.089-12.14 8.65-14.144 1.562-2.004 2.84-4.039 2.84-4.522 0-.483 1.28-2.443 2.847-4.356 1.565-1.913 3.369-4.467 4.007-5.677.639-1.209 3.97-5.865 7.404-10.346 3.433-4.48 6.896-9.116 7.694-10.3.8-1.186 3.937-5.08 6.974-8.655 3.036-3.575 6.433-7.603 7.547-8.952 1.115-1.349 6.592-7.128 12.171-12.842 9.347-9.573 10.318-10.297 12.35-9.21 1.731.927 2.072 1.753 1.586 3.843-1.472 6.329-1.795 19.096-.608 24.044 1.203 5.016 1.16 5.25-1.618 8.711-12.668 15.785-33.19 45.401-41.51 59.906-29.624 51.64-43.473 94.839-46.966 146.5-2.092 30.946 1.48 62.604 10.778 95.5 1.399 4.95 2.994 10.8 3.545 13 .55 2.2 1.66 5.48 2.466 7.29.805 1.808 2.15 5.633 2.988 8.5 3.372 11.526 21.782 51.546 26.779 58.21 3.63 4.841 3.897 7.754 1.069 11.622a298.125 298.125 0 0 0-4.237 5.953c-2.461 3.588-8.735 8.925-10.493 8.925-.805 0-2.208-.823-3.118-1.829zM.195 542 .18 497.5l1.828 6.5c1.006 3.575 3.262 11.225 5.013 17 2.706 8.922 3.197 12.153 3.269 21.5.076 9.99-.25 12.057-3.54 22.5-1.992 6.325-4.28 13.75-5.083 16.5C.335 586.067.207 582.644.194 542zM.146 411.5c.007-28.289.316-40.07.996-38 .541 1.65 3.093 7.275 5.67 12.5l4.687 9.5-.028 13c-.024 11.177-.354 13.841-2.354 19-1.279 3.3-3.44 9.375-4.803 13.5s-2.86 8.4-3.329 9.5c-.486 1.143-.846-15.567-.84-39zM146.5 429c1.1-.473 3.35-.838 5-.811l3 .048-3 .763c-1.65.42-3.9.785-5 .811-2 .048-2 .048 0-.811zm615.25-14.853c-2.17-4.716-2.16-5.066.25-8.147l1.956-2.5.022 7.25c.012 3.987-.09 7.238-.228 7.224-.138-.014-1.038-1.736-2-3.827zm-.12-23.397c-1.008-3.762-.707-6.441.87-7.75 1.303-1.081 1.5-.507 1.5 4.378 0 5.693-1.265 7.493-2.37 3.372zm-.043-26.384c-.762-1.985.296-8.176 1.526-8.936.488-.301.887 1.954.887 5.011 0 5.398-1.138 7.249-2.413 3.925zm-48.542-14.317c-1.823-1.153-3.118-13.836-1.934-18.93 1.04-4.472 1.01-14.8-.064-22.119-.443-3.025-.405-7.975.086-11 .49-3.025.881-21.895.868-41.933-.025-39.35.019-39.022-5.383-40.657-4.272-1.293-25.794-14.621-35.628-22.064-12.074-9.139-28.08-25.762-35.525-36.895-5.824-8.71-15.278-26.742-18.475-35.239-2.323-6.173-2.604-12.039-.613-12.803.757-.29 4.47 1.472 8.25 3.917 10.147 6.562 28.371 16.326 40.852 21.887C677.755 139.683 704.956 149 708.65 149c4.037 0 4.463-3.294 4.287-33.132l-.164-27.738 4.804-5.565c2.642-3.06 5.098-5.565 5.456-5.565.359 0 3.01-2.789 5.893-6.197 2.882-3.408 11.953-13.152 20.157-21.652C763.94 33.758 764 33.711 764 37.25c0 3.14-1.25 4.883-10.75 15.003-21.133 22.509-31.784 34.136-34 37.113-2.209 2.968-2.25 3.535-2.235 31.08.008 15.43.346 28.544.75 29.143 1.131 1.674 5.477 2.456 6.933 1.248 1.01-.839 1.304-7.156 1.31-28.208l.009-27.128 18.94-19.5 18.939-19.5.052 53.25L764 163h-4.833c-2.659 0-7.271-.428-10.25-.95-2.98-.524-11.042-1.93-17.917-3.124-15.417-2.679-38.73-9.543-54-15.9-6.325-2.633-13.525-5.552-16-6.487-4.808-1.816-25.383-12.804-33.253-17.759-5.069-3.191-7.747-3.12-7.747.204 0 3.076 10.981 24.367 17.82 34.55 15.922 23.708 42.891 45.411 73.505 59.152 13.794 6.191 22.469 8.773 34.675 10.318 4.675.592 10.637 1.346 13.25 1.675l4.75.6-.04 61.61c-.035 54.35-.21 61.297-1.488 58.945-3.224-5.936-16.712-7.326-23.883-2.46-1.81 1.23-5.947 2.827-9.19 3.55-3.245.724-7.317 1.937-9.05 2.696-3.667 1.606-5.293 1.701-7.304.429zm11.036-5.914 2.303-1.865.37-51.385c.204-28.262.005-54.744-.442-58.85-.798-7.337-.868-7.48-4.105-8.406-2.058-.59-3.646-.59-4.234-.002-1.153 1.152-1.78 119.32-.643 121.123 1.138 1.805 4.095 1.536 6.751-.615zm23.868-7.313 5.102-1.177 4.09-12.974c2.25-7.135 4.48-15.943 4.955-19.572 1.17-8.935.156-27.235-2.25-40.599-2.167-12.032-7.406-30.325-9.209-32.152-.625-.633-3.048-1.46-5.385-1.837-5.694-.92-6.083.453-2.891 10.204 4.763 14.551 6.803 25.33 7.342 38.785.683 17.084-.72 28.088-5.67 44.48-2.238 7.415-3.85 14.053-3.583 14.75.599 1.56 1.112 1.567 7.5.092zM761.434 151.5c-.036-2.2-1.47-8.725-3.187-14.5-6.359-21.391-7.193-29.018-5.057-46.265 1.051-8.494 1.01-9.963-.311-11.285-1.36-1.36-1.783-1.314-4.011.44-1.37 1.077-3.813 3.867-5.43 6.199-2.89 4.172-2.937 4.45-2.903 17.326.033 11.982.399 14.56 4.344 30.585 5.84 23.72 5.03 22.167 11.373 21.802l5.248-.302-.066-4zM358.27 285.396c.332-.332 1.195-.368 1.916-.08.798.32.561.557-.604.605-1.054.043-1.644-.193-1.312-.525zm-102.302-62.932c-2.491-.768-5.866-2.791-7.5-4.496-2.62-2.735-2.969-3.807-2.969-9.116 0-5.57.25-6.24 3.37-9.028 3.577-3.195 2.925-3.139 15.133-1.299 3.755.567 4.8.35 6.297-1.304 2.225-2.459 8.677-19.994 9.8-26.637.98-5.787 2.193-7.416 4.252-5.707 1.639 1.36 2.217 4.33 3.745 19.256.925 9.024.862 11.067-.417 13.5-1.478 2.813-1.502 2.753-1.239-3.133.284-6.356-.883-17.275-1.962-18.354-1.183-1.183-3.12 2.7-6.328 12.689-3.05 9.493-7.946 18.165-10.256 18.165-.6 0-2.354-1.35-3.895-3-3.936-4.213-10.097-3.803-13.718.913-1.815 2.364-1.547 8.562.468 10.864 3.373 3.851 14.697 5.632 19.566 3.077C274.67 216.568 282 209.77 282 208.018c0-2 3.914-7.229 3.967-5.299.13 4.75-9.607 16.306-16.299 19.345-4.892 2.22-7.541 2.298-13.699.4zm500.531-8.518c-10.025-1.12-20.047-3.433-28.052-6.476a3041.765 3041.765 0 0 0-10.879-4.113c-2.162-.81-5.762-2.3-8-3.31a429.665 429.665 0 0 0-7.569-3.324c-4.082-1.73-23.74-15.644-31.785-22.496-11.301-9.626-26.914-28.862-24.988-30.787.351-.351 5.638 1.656 11.749 4.46 6.11 2.805 11.353 5.1 11.65 5.1.296 0 3.764 1.417 7.706 3.148 8.11 3.562 35.851 11.4 45.668 12.904 12.582 1.927 23.595 2.913 32.75 2.93L764 172v21.5c0 11.825-.113 21.439-.25 21.364-.138-.074-3.4-.487-7.25-.918zm1.045-17.4c2.819-2.819 3.137-6.127.898-9.323-2.185-3.12-9.83-3.148-13.129-.049-3.086 2.9-2.917 5.377.61 8.903 3.729 3.73 8.18 3.909 11.621.468zm-28.619-4.957c.644-.776 1.436-3.043 1.76-5.04.473-2.916.135-4.11-1.723-6.088-3.222-3.43-7.346-3.232-11.11.532-3.33 3.33-3.221 5.76.436 9.757 2.388 2.61 8.751 3.111 10.637.84zm-26.035-8.225c1.967-1.378 2.253-2.253 1.812-5.54-.666-4.97-2.23-6.824-5.754-6.824-3.214 0-5.68 2.077-6.542 5.513-.74 2.952-.026 4.138 3.952 6.564 3.804 2.32 3.64 2.312 6.532.287zM683 172c3.493-3.493 2.004-8-2.643-8-2.217 0-5.357 3.313-5.357 5.651 0 1.656 2.83 4.349 4.571 4.349.786 0 2.329-.9 3.429-2zm-270.25-25.706c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zM535.5 63.435c-2.75-.786-8.02-2.15-11.71-3.032-3.69-.88-7.262-2.267-7.936-3.08-1.421-1.711-2.003.64 8.194-33.073L531.382 0h53.669l-1.52 2.75c-.836 1.512-3.542 5.9-6.014 9.75-2.472 3.85-5.235 8.35-6.14 10-4.105 7.478-25.446 39.844-27.2 41.25-1.888 1.513-2.342 1.497-8.677-.315zM436 46.895c-15.27-1.95-27.295-2.83-39.128-2.861-8.88-.024-12.917-.405-13.604-1.284-1.415-1.809-3.215-7.185-5.276-15.75a848.271 848.271 0 0 0-3.898-15.41C372.942 7.24 372 2.852 372 1.84 372 .08 374.014 0 418.5 0c33.804 0 46.5.307 46.5 1.126 0 1.518-9.998 41.74-11.088 44.605-.757 1.99-1.51 2.252-6.137 2.132-2.901-.075-8.2-.51-11.775-.967zm-137.673-1.378c-1.164-.816-3.57-4.078-5.347-7.25-1.777-3.172-6.395-10.717-10.262-16.767-3.867-6.05-8.178-12.8-9.58-15-1.4-2.2-2.96-4.563-3.465-5.25-.726-.988 3.033-1.249 17.955-1.245L306.5.011l6.728 20.969c3.701 11.533 6.469 21.647 6.15 22.475-1.29 3.366-16.993 4.904-21.05 2.062z\",\n    style: {\n      fill: \"#df0000\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.16018 0 0 .15833 22.527 22.739)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M124 1249.428c0-.916 5.085-9.38 9.87-16.428 7.338-10.81 9.645-14.255 13.39-20 1.973-3.025 5.648-8.425 8.169-12 8.197-11.627 13.967-20.07 19.571-28.637 15.024-22.968 25.57-37.7 27.313-38.155 1.694-.443 1.854-1.128 1.322-5.658-.833-7.085-11.534-43.54-18.654-63.55-14.463-40.64-28.491-70.897-33.302-71.823-.95-.183-3.72.633-6.158 1.813-6.882 3.331-14.385 3.738-19.88 1.078-6.076-2.941-12.026-9.073-13.465-13.876-2.791-9.315-.777-19.88 5.39-28.282 1.889-2.573 3.434-5.132 3.434-5.687 0-1.201 2.38-2.223 5.177-2.223 3.258 0 7.489-3.679 9.857-8.57 2.254-4.657 8.204-9.43 11.755-9.43 1.006 0 2.702-.66 3.77-1.468 2.23-1.688 7.028-2.009 7.941-.532.7 1.133 8.554 1.33 13.625.342 2.82-.55 27.43-24.687 149.615-146.75 80.433-80.35 146.245-146.833 146.25-147.738.014-2.252-6.56-7.854-9.216-7.854-1.509 0-15.275 13.128-45.875 43.75-24.046 24.063-57.372 57.3-74.06 73.86-16.686 16.56-40.178 40.073-52.204 52.25C267.58 814.168 263 818.068 263 814.84c0-1.513-54.922-55.852-57.387-56.777-1.358-.51-2-1.948-2.289-5.136-1.065-11.732-.653-17.12 2.404-31.427 5.568-26.06 6.311-34.602 5.918-68-.194-16.5-.861-32.925-1.483-36.5-.621-3.575-1.601-9.875-2.178-14-.576-4.125-1.658-10.65-2.404-14.5-1.245-6.433-2.348-10.713-7.265-28.187-1.643-5.84-1.645-6.293-.028-8.079 2.31-2.552 2.156-5.525-.405-7.829-2.186-1.968-5.908-9.544-8.548-17.405-.832-2.475-2.64-6.975-4.018-10-1.378-3.025-3.321-7.3-4.318-9.5-3.198-7.06-19.834-40.686-24.983-50.5-2.742-5.225-4.992-10.49-5-11.699-.01-1.279 3.434-6.461 8.234-12.393 9.208-11.378 10.957-13.681 15.193-20.01 1.619-2.42 3.945-5.523 5.17-6.898 2.815-3.16 9.387-12.946 9.387-13.978 0-.427.744-1.395 1.654-2.15.91-.754 2.873-4.072 4.363-7.372 1.49-3.3 3.671-6.857 4.846-7.905 1.175-1.048 2.137-2.514 2.137-3.259 0-.744 1.35-3.217 3-5.495 1.65-2.277 3-4.504 3-4.947 0-1.184 7.372-12.366 11.857-17.985l2.357-2.953-4.107-4.455c-2.259-2.451-4.107-4.987-4.107-5.635 0-1.455-16.508-17.866-17.972-17.866-1.3 0-5.02 5.934-5.024 8.018-.002.835-1.062 3.085-2.355 5s-2.891 5.134-3.551 7.152c-.66 2.019-1.889 4.242-2.73 4.94-.843.699-2.957 3.948-4.7 7.221-4 7.513-4.926 9.07-6.59 11.074-.738.89-2.07 2.934-2.96 4.542-2.233 4.034-18.88 28.325-25.051 36.553-1.65 2.2-4.57 6.25-6.487 9-7.548 10.823-18.598 24.069-30.08 36.057-3.3 3.445-6.503 6.867-7.117 7.604-1.458 1.748-20.932 19.33-26.405 23.839-2.336 1.925-7.082 5.975-10.546 9-3.464 3.025-7.646 6.52-9.295 7.768l-2.998 2.269.055 18c.03 9.9.471 18.256.98 18.57.508.315 1.915-.14 3.125-1.01s4.451-3.13 7.201-5.022c2.75-1.892 6.322-4.82 7.937-6.508 1.615-1.687 3.477-3.067 4.136-3.067.66 0 4.008-2.706 7.44-6.013 6.527-6.288 10.055-8.005 12.419-6.044 3.03 2.516 18.203 31.836 23.057 44.557 16.287 42.69 23.041 84.04 20.53 125.695-.985 16.333-3.838 36.836-6.444 46.305-.756 2.75-2.815 10.4-4.574 17-1.76 6.6-4.476 15.15-6.036 19-1.56 3.85-3.137 8.125-3.502 9.5-.778 2.927-15.412 31.565-18.236 35.685-1.06 1.548-3.684 5.515-5.828 8.815-5.022 7.728-14.25 19.5-15.287 19.5-.44 0-1.66-.965-2.707-2.145-2.798-3.15-9.666-5.902-15.335-6.143-5.633-.24-6.999.694-7.963 5.445-.537 2.65-1.223 3.407-3.307 3.651-1.9.223-2.801-.237-3.253-1.66-1.088-3.427-3.167-4.247-11.715-4.623-14.587-.64-23.709 1.691-30.582 7.818L0 831.35V726.508c0-57.663.242-104.6.538-104.304.295.296 1.616 3.858 2.934 7.917A607.182 607.182 0 0 0 8.567 645c2.433 6.762 2.703 8.878 2.745 21.5.042 12.907-.21 14.897-3.243 25.5-4.111 14.374-6.892 29.777-6.575 36.42.37 7.757 2.44 22.276 3.612 25.343 1.59 4.16 4.987 22.679 5.912 32.237.485 5.003.406 13.364-.192 20.322-.558 6.502-.821 12.016-.584 12.253.758.758 9.69-.803 11.213-1.96 1.996-1.516 3.757-13.146 3.683-24.329-.066-10.146-2.057-22.315-5.58-34.105-3.826-12.805-4.89-21.031-4.314-33.338.44-9.42 1.128-13.124 4.048-21.843 4.953-14.785 5.978-20.744 6.019-35 .041-14.56-1.649-23.864-7.327-40.333-6.321-18.336-5.792-34.636 1.84-56.667l4.676-13.5-.122-13.5c-.13-14.419-.285-15.213-8.201-42.23-7.194-24.551-6.458-39.805 2.972-61.566 3.767-8.694 5.947-18.623 6.532-29.75.644-12.264-.528-18.187-5.62-28.402C18.54 379 16.273 372.675 15.025 368c-3.01-11.27-2.39-23.14 2.513-48 2.006-10.175 3.873-22.55 4.15-27.5l.5-9-5.472-5.347c-8.17-7.98-8.67-7.473-9.21 9.347-.346 10.754-1.244 17.826-3.875 30.5L.204 334.5l-.102-39.313L0 255.873l16.96 15.678c11.701 10.816 17.26 16.65 17.925 18.813.601 1.955 1.218 101.398 1.638 264.136.371 143.55.91 261.383 1.198 261.852.288.469 2.102 1.512 4.033 2.318 2.588 1.082 3.803 1.173 4.628.348.82-.82 1.028-72.126.782-267.818-.28-221.578-.565-267.038-1.684-268.7-2.109-3.129-18.913-19.728-37.787-37.324C.34 238.322-.094 237.68.23 234.198c.337-3.607.372-3.637 1.442-1.198.602 1.375 3.58 4.75 6.614 7.5 3.036 2.75 13.584 12.792 23.44 22.315l17.921 17.315.255 58.657c.14 32.26.444 58.964.677 59.34 1.677 2.713 11.69-5.84 22.237-18.996C82.7 366.803 85.7 362.11 86.533 357.673c.814-4.337 1.21-4.605 19.467-13.141 7.975-3.729 24.532-11.674 36.794-17.656C155.056 320.894 165.27 316 165.492 316c.222 0 10.169-4.762 22.104-10.581 11.936-5.82 22.872-11.02 24.303-11.555 6.331-2.37 22.1-12.165 22.086-13.72-.008-.904-.664-3.444-1.456-5.644-1.71-4.746-1.956-14.23-.473-18.185 3.175-8.464 9.306-13.497 18.039-14.806 9.47-1.42 16.865 3.196 20.412 12.741 4.237 11.404 10.835 1.726 14.147-20.75.774-5.256 2.581-11.5 3.328-11.5.719 0 2.987 8 4.962 17.5 5.188 24.96 15.314 47.436 29.17 64.75 7.162 8.95 13.888 14.341 27.889 22.357 8.004 4.581 8.814 5.3 7.345 6.521-1.077.896-5.071 1.491-11.505 1.716-13.39.467-31.036-3.158-59.224-12.167l-4.881-1.56 2.88 3.041c4.387 4.63 9.866 8.12 25.661 16.345 12.465 6.49 26.896 12.497 30.026 12.497 1.03 0 10.37-9.275 12.746-12.656.797-1.134 3.82-3.262 6.717-4.73 4.7-2.379 5.967-2.594 11.75-2.002 4.271.438 6.482 1.103 6.482 1.95 0 .707 1.378 2.333 3.062 3.612 7.176 5.451 10.209 8.617 12.768 13.326l2.718 5 8.476-.15c13.492-.238 41.567-7.104 59.476-14.544 12.957-5.383 31.617-15.231 37.131-19.597 4.87-3.855 4.156-5.962-3.433-10.148-3.467-1.911-10.427-7.103-15.467-11.537-8.743-7.69-9.316-8.45-12.459-16.515-4.2-10.776-5.106-21.102-2.853-32.509 2.112-10.694 9.399-25.182 16.331-32.472 3.464-3.643 5.25-6.372 5.25-8.023 0-1.376-1.986-8.578-4.413-16.004-12.575-38.476-16.186-50.996-21.631-75.001-4.628-20.401-6.017-23.007-12.262-22.993-1.757.004-8.144-.639-14.194-1.428-29.08-3.794-60.922-4.507-91.5-2.05-23.458 1.884-32.94 3.042-39.375 4.808-7.439 2.042-18.865 3.956-21.073 3.53-2.055-.396-7.348-6.341-26.052-29.261-16.67-20.429-18.091-22.185-26-32.146-3.85-4.85-9.066-11.099-11.591-13.888-2.525-2.79-6.987-8.222-9.916-12.072-2.93-3.85-6.826-8.689-8.66-10.753C200.5 2.683 199 .771 199 .497c0-.273 3.487-.49 7.75-.482 4.98.01 7.242.337 6.33.915-1.863 1.179-.519 3.242 11.448 17.57 8.344 9.99 13.03 15.796 33.472 41.47a3314.67 3314.67 0 0 0 10 12.504c1.925 2.386 5.498 6.968 7.94 10.182C283.467 92.565 287.126 96 290.152 96c1.51 0 7.607-.889 13.547-1.975 20.744-3.794 21.382-3.882 41.301-5.703 3.025-.277 18.914-.61 35.31-.741 28.72-.23 57.987 1.338 80.69 4.322 20.405 2.682 59.066 11.183 78.338 17.226 10.754 3.372 16.594 4.386 18.2 3.162 1.382-1.054 17.06-22.777 21.5-29.791 1.044-1.65 5.248-7.725 9.342-13.5 14.38-20.282 24.144-34.227 26.62-38.015 1.375-2.104 4.75-7.047 7.5-10.985 6.316-9.044 10.142-14.876 11.645-17.75C635.007.6 636.213 0 638.66 0 640.497 0 642 .475 642 1.055c0 1.496-7.844 12.9-11.193 16.272-1.544 1.555-2.807 3.427-2.807 4.16 0 1.718-21.217 33.983-32.75 49.802-2.888 3.96-5.25 7.575-5.25 8.032 0 .457-2.138 3.587-4.75 6.956-2.612 3.37-5.65 7.592-6.75 9.383-1.1 1.792-5.457 8.338-9.683 14.549l-7.683 11.291.93 5c2.767 14.871 9.256 37.156 18.926 64.998 8.208 23.63 28.267 70.307 30.918 71.945.634.392 3.172-.472 5.642-1.92 5.152-3.019 12.675-5.496 16.74-5.512 7.022-.027 16.379 8.306 18.842 16.78 1.972 6.787 1.576 14.9-.97 19.893-2.016 3.951-4.2 6.398-4.13 4.625.019-.445.904-3.284 1.968-6.309 2.784-7.915 2.544-12.98-.943-19.888-2.251-4.458-3.84-6.256-6.75-7.64-8.601-4.087-19.582-2.5-24.69 3.57-1.341 1.595-2.933 5.202-3.536 8.016-.95 4.428-.836 5.707.843 9.503 3.253 7.354 11.235 10.476 17.931 7.014 2.85-1.473 5.145-5.281 5.145-8.533 0-1.025-1.35-3-3.002-4.39-2.396-2.016-3.707-2.411-6.5-1.958-4.331.703-4.803-1.522-.964-4.542 2.05-1.612 3.148-1.82 5.75-1.09 9.386 2.635 11.764 16.177 4.032 22.966-3.429 3.01-3.976 3.16-10.22 2.786-5.115-.305-7.522-1.013-10.722-3.154-4.856-3.25-13.828-15.347-19.544-26.351-2.23-4.295-5.054-9.609-6.274-11.809-1.22-2.2-2.814-5.575-3.542-7.5-.728-1.925-3.538-8.657-6.243-14.96-8.405-19.582-19.39-48.062-22.772-59.04-4.269-13.855-10.906-38.977-10.964-41.5-.12-5.19-2.106-9.287-5.106-10.53-4.96-2.054-5.446-.537-3.433 10.71 4.028 22.516 14.604 57.671 25.516 84.82a684.288 684.288 0 0 1 5.977 15.5c3.4 9.236 13.625 31.602 16.001 35 .962 1.375 2.745 4.469 3.963 6.875 3.079 6.081 15.066 22.122 19.016 25.445 5.002 4.21 9.534 5.682 17.403 5.657 6.165-.02 7.972-.477 13.378-3.39 3.438-1.854 6.247-3.08 6.243-2.728-.011 1.097-15.039 14.47-20.11 17.895-2.65 1.79-5.292 4.143-5.873 5.228-.58 1.085-2.051 2.505-3.267 3.156-3.414 1.827-17.694 5.096-22.994 5.263l-4.752.15-44.735 44.475c-24.605 24.46-49.017 48.75-54.249 53.978-5.232 5.227-29.988 29.611-55.013 54.187-89.609 88.002-143 141.38-143 142.965 0 1.768 7.318 8.844 9.147 8.844.628 0 14.294-13.162 30.37-29.25 16.075-16.087 35.697-35.592 43.605-43.344 7.908-7.751 23.914-23.85 35.569-35.773 21.418-21.912 58.153-57.807 75.612-73.883 8.449-7.78 12.697-10.432 12.697-7.926 0 1.287 55.824 56.567 57.9 57.335 3.35 1.239 3.917 5.577 1.944 14.841-.996 4.675-2.248 10.975-2.782 14-.534 3.025-1.943 10.675-3.131 17-1.188 6.325-2.286 13.075-2.44 15-1.288 16.105-1.6 25.607-1.511 45.913.057 12.877.337 23.79.623 24.253.285.462.934 5.002 1.44 10.087 1.129 11.33 3.284 22.992 7.564 40.935 2.724 11.417 3.08 14.183 2.142 16.667-1.291 3.42.363 10.209 3.325 13.645.949 1.1 2.447 4.16 3.33 6.8 1.389 4.15 5.422 13.791 10.123 24.2.745 1.65 2.75 6.15 4.455 10 5.92 13.368 25.15 48.846 27.144 50.078 3.096 1.913-1.126 9.325-15.338 26.922-4.108 5.086-11.996 15.95-15.261 21.018a477.233 477.233 0 0 1-8.122 12.116c-2.252 3.226-4.42 7.186-4.815 8.799-.396 1.613-1.703 4.144-2.905 5.624-1.202 1.48-3.085 4.194-4.185 6.032-1.1 1.837-2.775 4.482-3.722 5.876a61.012 61.012 0 0 0-7.91 16.502l-1.816 5.966 3.776 4.534c2.077 2.493 4.857 6.333 6.178 8.533 1.321 2.2 3.323 4.664 4.448 5.476 1.125.812 3.046 2.552 4.27 3.867 2.34 2.517 5.276 2.356 5.276-.29 0-2.15 6.48-13.876 17.5-31.667.55-.888 2.063-3.588 3.363-6 1.3-2.412 3.154-5.286 4.12-6.386.967-1.1 2.379-3.207 3.138-4.683.758-1.475 3.291-5.407 5.629-8.738 2.337-3.331 4.25-6.442 4.25-6.913 0-.47.956-1.713 2.125-2.761s4.431-5.198 7.25-9.222c7.152-10.212 8.788-12.38 11.483-15.208 1.296-1.361 3.39-4.05 4.652-5.975 3.922-5.983 18.839-22.206 35.74-38.87 7.012-6.914 12.75-13.147 12.75-13.85 0-.704 1.012-1.29 2.25-1.302 2.665-.027 6.05-2.569 7.697-5.781.649-1.267 3.615-3.86 6.59-5.764 2.976-1.904 7.287-5.3 9.581-7.549l4.17-4.087-.639-9.649c-.351-5.306-.641-12.46-.644-15.898-.003-3.542-.443-6.25-1.016-6.25-1.113 0-18.066 10.493-30.278 18.74-4.283 2.893-8.62 5.26-9.635 5.26-1.675 0-3.226-1.715-6.78-7.5-2.328-3.788-19.296-38.41-19.296-39.371 0-.53-.935-3.138-2.077-5.796-4.413-10.27-11.248-36.194-14.33-54.355-8.09-47.66-2.57-96.165 16.157-141.978 5.48-13.403 19.837-41.218 24.653-47.761 2.412-3.277 4.996-7.108 5.741-8.514.746-1.407 4.035-5.97 7.31-10.141 6.543-8.335 9.028-9.352 13.758-5.632 2.8 2.203 10.243 5.011 13.338 5.033 3.72.027 4.45-1.92 4.465-11.935.02-11.975.367-12.615 5.941-10.945l4.237 1.27-.686 6.403c-.62 5.79-.469 6.634 1.578 8.813 1.706 1.815 3.315 2.409 6.53 2.409 2.347 0 4.545-.45 4.885-1 .34-.55 2.334-1 4.431-1 6.647 0 19.216-4.638 22.319-8.236l2.75-3.188V1003.223l-11.227-10.362c-6.175-5.698-14.981-13.961-19.57-18.361l-8.343-8 .135-66c.423-206.706.992-361.291 1.501-407.5l.578-52.5-4.992-5.227c-2.746-2.874-5.231-4.84-5.523-4.369-.735 1.19-1.385 540.781-.652 541.853.326.478 8.018 7.568 17.093 15.757s18.171 16.53 20.214 18.534c2.043 2.005 5.303 4.727 7.243 6.049 2.596 1.767 3.531 3.13 3.536 5.153.004 1.513-.276 2.75-.622 2.75-.828 0-5.854-4.522-23.371-21.025-7.975-7.514-17.274-16.094-20.663-19.068-3.39-2.974-6.512-6.307-6.939-7.407-.426-1.1-.911-20-1.078-42-.38-49.93-.372-47.985-.228-60.119.074-6.278-.344-10.984-1.102-12.4-1.204-2.249-1.302-2.197-6.952 3.62-8.854 9.114-13.628 14.75-24.056 28.399l-5.733 7.5c-5.332 6.956-7.576 9.258-10.404 10.675-12.998 6.508-54.373 26.309-64.845 31.032-7.185 3.241-33.498 15.944-39 18.827-1.925 1.009-6.2 3.288-9.5 5.064-3.3 1.777-9.15 4.455-13 5.95l-7 2.721.296 3.866c.163 2.126.343 7.977.401 13.002.09 7.742-.226 9.673-2.061 12.644-7.153 11.572-21.392 13.559-30.475 4.251-2.288-2.345-5.097-5.523-6.24-7.062-1.214-1.634-2.563-2.5-3.239-2.083-2.524 1.56-6.465 10.036-9.156 19.69-2.86 10.264-5.115 14.234-7.008 12.342-.547-.548-1.92-5.929-3.052-11.958-3.001-15.994-8.887-36.324-12.727-43.961-4.055-8.063-15.538-23.732-22.33-30.468-7.191-7.134-12.674-10.567-27.909-17.475-3.094-1.403-3.491-5.195-.5-4.778 1.1.153 7.85.496 15 .76 15.434.573 24.566 1.692 41.838 5.13 9.42 1.874 13.135 2.258 13.95 1.443 1.627-1.627.491-2.432-12.336-8.739C451.398 913.2 426.432 904 422.235 904c-1.708 0-4 1.318-6.443 3.703-5.035 4.917-4.801 2.558.555-5.59 2.39-3.637 6.14-10.663 8.334-15.613 3.501-7.903 9.291-17.429 15.486-25.478 6.99-9.084 7.822-10.433 6.96-11.295-.571-.571-2.304-.431-4.503.364-1.965.711-3.861 1.005-4.213.654-.351-.352-1.07-4.376-1.599-8.942-1.642-14.2-1.786-14.803-3.537-14.803-1.835 0-9.81 8.156-11.733 12-1.5 2.997-3.248 12.076-4.043 21-1.392 15.622-2.855 22.008-6.931 30.262-3.36 6.806-4.913 8.803-8.931 11.488-5.62 3.756-7.903 3.995-12.338 1.29-7.351-4.481-8.38-12.73-3.016-24.156 3.532-7.522 4.667-9.151 15.217-21.838 11.922-14.337 13.497-16.63 15.042-21.893 1.739-5.922 1.615-11.653-.251-11.653-.665 0-4.345 3.038-8.178 6.75-3.833 3.712-7.396 6.75-7.918 6.75-.522 0-1.917-2.25-3.1-5-2.869-6.67-4.678-6.492-5.557.544-.964 7.717-6.07 21.483-14.052 37.894-5.736 11.79-6.852 14.949-7.25 20.503-.75 10.499 3.989 19.065 13.187 23.832 6.722 3.483 16.56 3.782 21.077.64 6.763-4.706 8.223-3.35 1.99 1.85-6.278 5.238-14.2 5.312-24.322.227-7.52-3.777-11.543-7.665-14.592-14.104l-2.656-5.61-6.71.664c-18.384 1.819-42.456 7.498-55.71 13.144-13.483 5.744-19.787 8.708-27 12.697-4.848 2.68-17.112 10.195-18.274 11.197-1.267 1.093 2.139 3.908 8.339 6.892 5.765 2.775 9.16 5.374 15.154 11.603 4.25 4.415 8.3 8.027 9.003 8.027.703 0 1.283.788 1.29 1.75.007.963 1.362 5.774 3.011 10.692 4.22 12.587 4.706 19.916 2.055 31.017-2.726 11.414-7.654 20.26-15.888 28.517-6.297 6.316-6.427 6.552-5.237 9.5.67 1.663 1.891 5.499 2.712 8.524.82 3.025 3.01 10.11 4.866 15.746 4.354 13.222 20.529 79.033 20.485 83.349-.043 4.272 5.749 6.215 19.484 6.535 5.5.128 14.5.545 20 .928 15.978 1.112 41.042 1.229 53.5.248 10.723-.843 33.058-2.027 39.2-2.076 1.484-.012 2.934-.637 3.222-1.388.347-.905 1.965-1.3 4.801-1.171 2.352.106 8.102-.375 12.777-1.068 17.299-2.567 21.001-2.79 23.004-1.388 1.044.732 5.389 5.482 9.655 10.558a1326.285 1326.285 0 0 0 15.298 17.82c4.149 4.725 10.693 12.562 14.543 17.416 3.85 4.853 8.125 9.976 9.5 11.382 1.375 1.407 3.175 3.528 4 4.714.825 1.186 7.6 9.298 15.057 18.026 7.457 8.728 13.896 16.431 14.31 17.119.56.933-.505 1.25-4.2 1.25-4.307 0-5.024-.294-5.518-2.262-.312-1.244-2.498-4.554-4.858-7.355a708.765 708.765 0 0 1-9.291-11.342c-2.75-3.437-7.925-9.734-11.5-13.993a1359.5 1359.5 0 0 1-12-14.525c-5.784-7.132-22.12-26.658-29.153-34.847-2.279-2.653-5.093-5.447-6.255-6.208-2.226-1.458-2.873-1.405-23.092 1.9-9.42 1.539-22.164 2.944-41.5 4.576-14.883 1.257-62.753 1.327-75 .11-38.793-3.854-52.585-5.53-75.5-9.18-14.702-2.34-17.527-2.963-36.184-7.98-10.551-2.837-19.838-4.908-20.637-4.601-1.255.481-5.244 5.85-20.179 27.152-1.65 2.354-4.9 6.929-7.223 10.167-7.12 9.928-10.267 14.432-18.678 26.731-4.454 6.514-9.449 13.79-11.099 16.168-1.65 2.378-6.15 9.074-10 14.88l-7 10.558-4.25.026c-2.338.014-4.25-.232-4.25-.547zm173.924-97.837c1.66-2-.429-17.3-4.45-32.591-.795-3.025-2.385-9.522-3.533-14.437-8.626-36.948-30.78-101.52-44.108-128.563-9.239-18.745-20.87-37.968-23.933-39.552-3.553-1.837-5.9-1.85-5.9-.03 0 .779 2.084 4.941 4.631 9.25 16.697 28.238 37.737 80.095 48.713 120.06 8.249 30.034 10.97 40.654 13.695 53.438 3.11 14.593 5.68 25.937 6.588 29.078 1.231 4.26 5.957 6.167 8.297 3.347zm-13.104-3.994c.175-2.147-.367-6.647-1.206-10-.84-3.353-2.922-12.847-4.629-21.097-2.8-13.533-10.157-41.038-18.188-68-9.276-31.14-31.955-83.16-45.632-104.668-5.443-8.559-11.203-13.832-15.109-13.832-1.616 0-3.215.448-3.554.996-.338.548 3.282 6.934 8.045 14.19C211.316 955.5 229 989.02 229 991.537c0 .27 2.476 6.371 5.503 13.56 8.924 21.197 19.711 54.523 29.571 91.356 2.474 9.244 11.926 50.4 11.926 51.93 0 1.558 3.644 3.681 5.876 3.422 2.266-.262 2.668-.837 2.944-4.207zm-13.986.103c2.886-3.477-14.786-73.451-28.34-112.215-13.999-40.037-31.356-75.98-45.941-95.133C191.757 934.055 183.85 929 178.796 929c-5.671 0-4.91 2.242 3.537 10.409 14.64 14.156 20.383 24.717 44.286 81.445 7.27 17.255 21.286 61.775 25.862 82.146 1.116 4.973 8.055 32.054 10.551 41.18 1.192 4.358 5.495 6.3 7.802 3.52zm-13.167-3.275c.332-.866-.126-4.128-1.018-7.25-.892-3.121-2.989-12.103-4.66-19.96-4.408-20.74-6.519-29.251-9.807-39.553-1.609-5.04-4.624-14.787-6.7-21.662-5.266-17.433-21.188-57.87-30.516-77.5-5.102-10.738-15.957-26.847-22.787-33.816-10.589-10.805-19.966-15.188-27.929-13.054-4.008 1.074-2.419 3.378 4.456 6.463 14.012 6.286 31.976 29.22 44.527 56.843 1.64 3.61 3.343 7.689 3.784 9.064.441 1.375 2.898 7.9 5.459 14.5 6.916 17.82 10.056 26.808 14.547 41.634 2.227 7.351 5.352 17.641 6.946 22.866 5.441 17.843 11.05 39.757 14.528 56.76.366 1.793 1.337 3.93 2.156 4.75 1.96 1.96 6.25 1.908 7.014-.085zm-13.283-2.984c.33-.857.131-3.67-.44-6.25-2.28-10.302-6.073-25.965-7.433-30.691-.792-2.75-2.838-10.175-4.549-16.5-6.401-23.675-19.203-60.562-29.845-86-7.423-17.742-22.605-42.578-31.165-50.983-4.837-4.75-14.004-10.064-20.075-11.639-6.17-1.6-12.377-.073-12.377 3.047 0 1.523 1.223 2.195 5.95 3.268 14.347 3.259 27.422 15.813 37.384 35.898 11.832 23.856 30.495 69.545 34.682 84.909.75 2.75 2.756 9.725 4.458 15.5 1.702 5.775 4.236 14.775 5.631 20 1.395 5.225 3.44 12.875 4.545 17a902.201 902.201 0 0 1 3.821 14.874c.997 4.056 2.424 7.762 3.171 8.235 2.186 1.385 5.594 1.02 6.242-.668zm-12.973-2.296c.29-.47-.12-3.508-.911-6.75a2871.37 2871.37 0 0 1-4.028-16.872c-1.424-6.038-3.952-15.488-5.619-21-1.667-5.513-4.53-14.973-6.361-21.023-8.645-28.556-18.787-54.588-31.556-81-10.598-21.92-18.457-32.68-27.936-38.244-4.563-2.679-14.88-5.256-21.043-5.256-4.267 0-5.548.542-10.17 4.303-14.589 11.874-12.245 35.143 3.994 39.653 11.29 3.135 20.098-.288 24.329-9.456 5.046-10.934-1.284-20.826-13.355-20.868-3.873-.014-5.294.51-7.737 2.85-6.94 6.65-4.12 14.518 5.203 14.518 4.365 0 5.05-.311 6.576-2.994.936-1.646 2.055-2.996 2.484-3 1.862-.015 1.748 3.21-.226 6.405-3.922 6.346-12.129 6.766-18.217.934-3.759-3.602-4.404-7.726-2.154-13.785 1.485-4 2.628-5.328 6.225-7.23 5.656-2.991 10.457-2.949 16.67.147 9.624 4.796 14.613 11.932 29.389 42.034 4.322 8.807 8.748 18.257 9.834 21 1.087 2.744 3.567 8.949 5.51 13.789 6.48 16.13 20.851 61.8 24.764 78.7 3.507 15.15 6.092 22.879 7.805 23.336 2.899.774 5.99.683 6.53-.191zm-14.714-4.797c.851-2.22-7.653-35.774-14.409-56.848-9.958-31.066-15.718-45.713-29.979-76.243-3.856-8.254-11.435-21.257-12.39-21.257-1.287 0-3.923 5.554-3.893 8.2.015 1.265 1.82 5.675 4.014 9.8 7.537 14.177 19.498 42.36 28.433 67 3.474 9.577 13.086 41.591 16.922 56.359 1.837 7.072 3.962 13.253 4.722 13.735 2.268 1.436 5.9 1.024 6.58-.746zm64.564-105.294c5.684-6.321 11.287-17.747 12.754-26.008 3.121-17.566-4.76-39.345-18.22-50.35-5.304-4.337-16.973-10.268-22.88-11.63-2.428-.56-7.902-1.028-12.165-1.042-8.37-.026-8.885.391-6.62 5.361 1.302 2.86 4.317 4.211 11.37 5.1 18.326 2.312 33.077 15.951 38.098 35.229 1.784 6.851 1.763 13.34-.066 20.214-1.542 5.794-7.129 14.756-10.492 16.83-2.218 1.368-2.614 4.601-1.065 8.677 1.475 3.879 4.312 3.151 9.286-2.38zm-7.11-12.804c5.035-5.484 6.349-9.883 6.349-21.25 0-9.675-.244-11.016-3.109-17.06-3.714-7.84-12.46-17.199-18.616-19.921-2.384-1.055-7.36-2.228-11.055-2.607-6.687-.685-6.72-.676-6.72 1.815 0 3.797 3.543 7.6 7.793 8.367 4.653.84 6.528 1.78 12.463 6.247 6.167 4.641 9.098 9.233 10.664 16.705 1.537 7.334.494 12.202-3.917 18.291-3.502 4.835-3.402 4.273-1.554 8.695 1.779 4.258 4.24 4.487 7.702.718zm204.366-5.848c4.443-11.378 9.055-19.064 15.05-25.081 7.59-7.617 13.941-8.326 20.782-2.32 5.855 5.141 5.613 15.53-.42 18.028-2.137.885-3.355.946-4.098.203-1.27-1.272-.257-3.232 1.671-3.232 1.896 0 4.498-3.933 4.498-6.8 0-1.294-1.315-3.67-2.923-5.277-3.283-3.283-7.447-3.817-11.879-1.525-8.554 4.423-9.121 13.703-1.288 21.071 2.73 2.567 4.067 3.02 9.874 3.337 5.76.315 7.202.034 10.124-1.97 6.622-4.54 7.592-6.843 7.592-18.024v-10.04l-4.314-3.829c-14.154-12.56-38.391-2.932-48.681 19.34-4.573 9.899-4.947 11.92-3.482 18.823 1.73 8.15 3.505 7.51 7.494-2.704zm-211.59-8.037c5.81-7.387-1.303-26.025-11.62-30.448-4.536-1.944-6.307-1.82-6.307.439 0 1.185 10.5 25.974 12.91 30.475 1.513 2.827 2.5 2.735 5.017-.466zm205.344-13.015c12.47-17.953 24.324-25.385 38.223-23.96 6.788.695 7.92.253 6.441-2.511-2.042-3.816-6.222-4.945-15.627-4.223-9.518.732-17.277 3.592-24.993 9.214-4.75 3.46-12.315 13.969-12.315 17.107 0 2.928 2.682 9.023 3.97 9.023.589 0 2.524-2.092 4.3-4.65zm281.946-11.452c-.156-2.969-.738-8.59-1.294-12.49-1.21-8.48-.063-17.14 3.534-26.698 3.5-9.297 5.583-18.903 6.227-28.71.66-10.06-.72-16.675-7.2-34.5-2.4-6.6-4.612-13.8-4.916-16-1.537-11.112-1.559-15.899-.108-24.14 1.634-9.285 2.407-12.583 7.35-31.36 5.059-19.215 5.036-27.917-.128-49.5-5.078-21.222-6.764-29.767-7.285-36.915-.626-8.589-1.047-6.45 7.698-39.085 2.837-10.585 3.225-13.592 3.29-25.5.06-11.151-.295-14.63-2.037-20-7.805-24.044-7.866-24.376-7.595-41.148.218-13.501.613-16.864 2.874-24.5 6.841-23.1 6.708-22.4 6.745-35.352.037-12.965-.406-15.5-5.595-32-2.404-7.647-3.144-12.26-3.792-23.646-.442-7.781-.503-17.681-.133-22 .842-9.861.317-18.077-1.194-18.649-1.488-.563-10.48 1.717-11.74 2.977-.548.548-.989 9.945-1.027 21.89-.073 22.99.98 31.488 6.065 48.928 4.835 16.582 5.63 24.415 3.613 35.545-.943 5.2-3.224 13.055-5.07 17.455-6.115 14.587-6.684 17.13-6.708 30-.024 12.51 1.092 18.686 5.72 31.65 4.879 13.668 6.877 32.726 4.518 43.086-8.197 35.987-8.699 39.364-7.923 53.264.445 7.986 1.84 17.184 4.168 27.5 7.456 33.022 7.413 40.904-.37 68-1.186 4.125-3.282 12.225-4.66 18-2.343 9.82-2.434 11.16-1.41 20.688.84 7.822 2.13 12.933 5.55 22 10.106 26.79 10.32 34.938 1.512 57.812-3.88 10.081-4.239 11.794-4.288 20.5-.03 5.225.544 11.874 1.275 14.775 1.11 4.404 2.022 5.751 5.53 8.165 2.311 1.59 4.806 3.62 5.545 4.509 2.353 2.835 3.558 1.152 3.259-4.551zm-284.112-9.112c6.353-7.304 15.763-12.236 26.11-13.685 9.838-1.377 10.666-2.276 6.045-6.56-1.507-1.398-3.82-2.541-5.142-2.541-3.535 0-15.876 3.852-21.567 6.731-6.654 3.367-18.551 13.089-18.551 15.16 0 1.708 2.626 6.094 4.351 7.266 1.64 1.115 3.282-.08 8.754-6.37zm62.21-.936c4.849-2.552 4.339-3.84-6.241-15.752-13.415-15.106-25.595-26.343-36.074-33.283-14.861-9.841-33.822-18.764-53.91-25.37l-8.412-2.766-1.839 2.271c-3.704 4.575-2.526 6.37 6.161 9.388 18.826 6.539 35.278 14.503 50.5 24.447 7.861 5.136 13.743 10.327 27.5 24.272 9.625 9.757 18.092 17.785 18.816 17.841.723.056 2.298-.415 3.5-1.048zm-71.38-9.677c6.495-5.445 18.505-12.214 22.86-12.882 7.569-1.162 9.515-4.091 4.186-6.299-4.526-1.874-10.366-.638-19.78 4.188-14.295 7.329-20.7 14.682-15.451 17.74 2.684 1.563 3.285 1.362 8.186-2.747zm100.538-4.372c2.717-1.32 4.527-2.876 4.527-3.89 0-3.274-9.47-14.585-25.898-30.93-14.287-14.215-18.624-17.852-31.102-26.087-20.037-13.223-29.566-17.876-53.924-26.33l-10.425-3.618-3.364 3.26c-4.238 4.108-4.012 6.79.713 8.45 33.278 11.695 48.173 19.55 70.173 37.01 7.53 5.977 25.865 24.027 31.015 30.535 1.871 2.365 5.1 6.437 7.174 9.049 2.075 2.613 4.405 4.75 5.178 4.75.774 0 3.444-.99 5.933-2.2zM453.9 947.388c3.08-2.537 8.639-6.143 12.351-8.013 3.713-1.87 6.75-4.048 6.75-4.84 0-1.326-5.523-3.516-8.9-3.53-2.806-.01-22.1 13.115-22.1 15.034 0 1.254 4.123 5.961 5.221 5.961.592 0 3.597-2.076 6.678-4.612zm129.566-4.17c6.906-3.686 7.04-3.837 15.675-17.718 14.44-23.208 21-33.255 28.65-43.877 4.01-5.568 9.065-12.675 11.234-15.794 12.292-17.678 39.091-46.504 57.146-61.467 6.968-5.776 12.93-11.181 13.25-12.013.88-2.295.693-16.16-.226-16.729-1.294-.8-4.26 1.29-16.326 11.502-30.468 25.789-57.974 57.448-86.34 99.378-4.837 7.15-9.368 13.675-10.07 14.5-2.4 2.826-17.167 29.494-20.36 36.772-4.61 10.512-3.567 11.284 7.367 5.446zm-135.58-7.393c6.77-4.724 7.234-5.265 5.56-6.49-1.005-.734-3.99-1.335-6.633-1.335-4.118 0-5.38.518-8.81 3.616-4.104 3.709-4.914 6.072-2.802 8.184 2.185 2.185 5.22 1.234 12.685-3.975zm-191.115-4.667c7.403-5.026 33.26-18.269 44.27-22.674 16.793-6.719 33.067-10.872 50.269-12.83 12.428-1.413 14.386-2.298 14.72-6.654.38-4.956.316-5-7.279-4.996-16.203.009-43.197 6.676-67.75 16.732-22.917 9.386-56.163 29.424-53.409 32.191.849.853 10.71 2.84 12.179 2.454.698-.183 3.848-2.084 7-4.223zm362.968-5.027 14.037-7.032 10.108-15.12c15.291-22.874 29.723-40.606 49.065-60.286l17.501-17.806-.282-12.131c-.154-6.673-.506-12.496-.78-12.94-.944-1.526-6.072 2.077-15.474 10.87-27.685 25.893-61.218 66.148-79.814 95.814-2.413 3.85-5.145 8.125-6.07 9.5-.925 1.375-3.4 5.584-5.5 9.352-2.943 5.287-3.516 7.038-2.506 7.662 1.676 1.036 2.841.57 19.715-7.883zm-187.295 3.932c2.723-3.009 1.036-4.063-6.502-4.063-8.06 0-9.368 1.78-3.191 4.342 5.065 2.1 7.606 2.028 9.693-.279zm-216.419-9.095c29.398-24.392 71.277-44.066 110.476-51.9 6.05-1.208 13.025-2.655 15.5-3.214 2.475-.56 11.177-1.275 19.338-1.59l14.839-.574 2.06-4.24c1.132-2.33 1.803-4.904 1.49-5.718-1.175-3.062-11.432-3.23-35.727-.583-45.144 4.918-99.939 29.697-137.055 61.98-8.35 7.263-8.829 8.362-4.727 10.862 1.805 1.1 3.743 2.003 4.306 2.005.564.002 4.839-3.16 9.5-7.028zm440.097-12.157c4.058-1.754 8.369-3.891 9.579-4.75 1.21-.859 5.806-6.465 10.214-12.458 7.666-10.423 14.545-18.505 27.518-32.33 5.2-5.542 6.02-6.969 6.639-11.548.937-6.937.182-10.725-2.138-10.725-5.449 0-31.595 28.417-50.605 55-15.216 21.279-15.334 22.916-1.207 16.811zm-254.888-11.518c4.892-4.417 9.874-17.77 12.16-32.587 2.532-16.414 1.058-16.601-11.18-1.417-8.562 10.623-15.21 21.983-15.212 25.993-.001 2.44 2.804 8.963 4.288 9.97 1.818 1.232 7.691.076 9.944-1.96zM555.854 885.9l7.354-12.099-.565-23.65c-.311-13.009-.875-47.052-1.253-75.652l-.686-52-7.207-7.399c-4.918-5.05-7.62-7.143-8.511-6.592-1.066.658-1.182 16.238-.631 84.899.706 88.054 1.187 104.592 3.042 104.592.607 0 4.412-5.445 8.457-12.099zM524.358 810c-.078-47.575-.469-95.262-.868-105.971l-.725-19.471-5.741-5.94c-8.717-9.02-9.125-8.459-8.832 12.149l.24 16.811-4.466 7.215c-2.456 3.969-6.153 9.545-8.216 12.392-2.063 2.847-3.75 5.995-3.75 6.996 0 1-.413 1.819-.918 1.819-.506 0-1.922 1.687-3.148 3.75-1.226 2.062-3.29 4.875-4.588 6.25s-3.218 3.625-4.267 5c-1.049 1.375-2.25 2.158-2.67 1.74-.42-.419.449-2.026 1.93-3.573 1.482-1.546 4.15-5.134 5.928-7.973a346.47 346.47 0 0 1 6.861-10.428c1.996-2.896 6.158-10.163 9.25-16.148 4.887-9.458 5.62-11.616 5.607-16.5-.02-7.019-1.078-9.115-3.564-7.054-.952.79-2.34 2.893-3.084 4.674-.745 1.78-4.786 8.98-8.98 16-7.144 11.952-11.455 17.925-30.406 42.123-12.252 15.645-13.185 17.223-11.367 19.232.845.934 2.933 1.903 4.639 2.153 2.491.366 3.86-.23 6.953-3.024 2.117-1.913 4.096-4.457 4.396-5.654.508-2.024 10.428-12.687 10.428-11.21 0 .369-1.913 3.097-4.25 6.063-2.337 2.966-5.996 8.216-8.13 11.666l-3.881 6.273 1.855 3.444c1.02 1.894 2.878 4.115 4.13 4.935 1.252.82 2.276 2.357 2.276 3.416 0 1.058.837 3.594 1.86 5.635 2.115 4.22 3.556 16.966 2.169 19.182-1.223 1.953-1.679.531-2.406-7.498-.724-7.992-5.325-17.872-10.792-23.173-7.953-7.712-21.257-12.117-31.008-10.267-11.073 2.1-22.706 9.895-26.83 17.981-3.074 6.024-5.249 16.021-4.674 21.485.551 5.25 3.926 13.915 5.892 15.13.7.432 4.638-2.923 9.988-8.507 4.9-5.114 9.314-8.924 9.912-8.555.717.444.847 3.255.389 8.432-.986 11.133 1.335 11.787 8.566 2.414 4.18-5.418 7.187-6.802 8.327-3.832.334.87.66 5.257.725 9.75.168 11.606.843 14.112 3.887 14.425 1.372.14 4.97-.998 7.995-2.53 4.137-2.097 6.676-4.391 10.243-9.257 8.368-11.416 7.925-10.985 7.168-6.97-.831 4.41-3.212 7.935-10.47 15.5-5.723 5.966-9.941 12.554-9.941 15.526 0 1.587 9.432 6.974 12.21 6.974.83 0 4.038 1.35 7.13 3 3.092 1.65 6.817 3 8.276 3 1.523 0 3.61 1.031 4.897 2.42 1.233 1.33 3.859 2.865 5.836 3.41 1.976.546 4.871 1.903 6.433 3.015 1.562 1.112 4.017 2.318 5.457 2.679 1.439.361 2.869 1.314 3.177 2.117.308.804 2.478 2.331 4.822 3.395s6.512 3.959 9.262 6.433c2.975 2.677 5.81 4.405 7 4.265 1.984-.232 1.999-.926 1.858-86.734zM272.8 869c5.334-2.199 12.399-5.367 15.699-7.04 3.3-1.672 8.331-3.4 11.18-3.84 2.85-.44 6.322-1.547 7.716-2.46 1.393-.913 4.237-1.663 6.319-1.666 2.082-.003 5.09-.687 6.687-1.52 1.595-.832 3.646-1.276 4.556-.987.91.289 3.88.03 6.598-.573 11.033-2.45 32.074-4.132 48.942-3.912 4.024.053 5.664-2.445 5.369-8.174-.15-2.911.3-5.324 1.196-6.401.954-1.149 1.499-4.515 1.622-10.022.101-4.56.595-9.105 1.096-10.099 1.802-3.57 3.445-11.27 2.885-13.515-.401-1.606.128-2.964 1.77-4.54 1.288-1.236 3.245-4.16 4.349-6.5 1.326-2.809 3.537-5.213 6.517-7.086 2.48-1.56 4.742-3.725 5.026-4.812.284-1.087 1.114-1.895 1.845-1.796 3.385.46 4.894-.286 6.374-3.147.879-1.7 1.337-3.77 1.018-4.6-.349-.91.425-2.3 1.948-3.499 2.922-2.298 5.487-6.83 5.487-9.694 0-1.108.887-2.264 2.012-2.62 2.313-.735 6.988-7.162 6.988-9.608 0-.905 1.328-2.196 2.951-2.869 3.307-1.37 5.693-4.471 6.206-8.068.189-1.321 1.352-2.903 2.586-3.516 3.723-1.848 6.11-4.486 6.767-7.48.393-1.793 1.886-3.582 4.056-4.863 1.962-1.157 3.434-2.826 3.434-3.892 0-1.026 1.8-3.313 4-5.08 3.055-2.456 4-3.92 4-6.2 0-1.64.618-3.22 1.373-3.51.755-.29 2.592-2.767 4.082-5.505 2.18-4.005 2.58-5.734 2.054-8.851-.872-5.164.716-7.951 9.417-16.528 3.89-3.835 7.074-7.414 7.074-7.953 0-2.073-6.448-7.574-8.878-7.574-1.967 0-25.502 23.057-112.804 110.517C311.643 820.302 262 870.702 262 871.517c0 1.983-.253 2.042 10.801-2.516zm301.962-16.171c3.593-5.287 9.836-13.979 13.164-18.329C597.82 821.572 605 811.33 605 810.151c0-.744-2.995-6.595-6.656-13.002-5.874-10.279-9.151-16.606-18.983-36.649-1.35-2.75-4.364-9.725-6.7-15.5-6.546-16.187-7.161-15.112-7.161 12.5 0 41.289 1.171 101.16 2.005 102.509.866 1.4 2.572-.287 7.258-7.18zM79.134 817.75c.834-.688 3.52-3.725 5.966-6.75 24.718-30.553 44.381-84.956 48.018-132.85 1.146-15.086.58-41.436-1.185-55.15-4.045-31.45-14.186-64.947-29.641-97.916-5.607-11.96-7.898-15.085-11.055-15.078-2.593.006-9.827 5.211-31.737 22.837l-6 4.827-.126 135.415c-.104 112.037.107 135.79 1.223 137.588.898 1.448 3.112 2.556 6.626 3.316 2.902.628 7.302 1.966 9.777 2.973 5.594 2.276 6.252 2.34 8.134.788zm192.716-23.736L282.2 794l3.55-3.55c2.355-2.355 3.215-3.885 2.555-4.545-.548-.548-4.23-1.267-8.183-1.598-3.952-.331-7.455-1.036-7.782-1.567-.886-1.433 1.75-2.79 5.16-2.655 1.65.065 6.472.072 10.715.016 7.157-.094 7.975-.329 11.296-3.245 6.002-5.27 3.69-7.559-7.834-7.756-4.982-.086-5.774-.353-5.479-1.85.306-1.552 1.722-1.75 12.515-1.75h12.17l3.559-3.446c5.827-5.644 4.697-6.94-6.312-7.243-6.685-.184-10.777-2.019-8.234-3.691.77-.507 6.663-.675 13.17-.376l11.773.543 3.575-3.894c1.967-2.14 3.428-4.343 3.248-4.893-.437-1.337-4.918-2.238-11.853-2.382-5.668-.118-7.984-1.268-5.575-2.768.696-.434 6.315-.668 12.485-.52l11.22.268 4.53-4.176c6.99-6.443 6.124-7.642-5.89-8.165-3.652-.158-6.079-.736-6.333-1.507-.314-.952 2.344-1.25 11.136-1.25 11.491 0 11.566-.015 15.083-3.104 3.832-3.364 4.563-5.827 1.785-6.014-.963-.065-7.806-.403-15.208-.75-15.934-.748-14.78.573-14.958-17.132-.063-6.325-.481-12.078-.93-12.784-1.171-1.847-3.648-.569-6.731 3.474l-2.682 3.516.715 13.487c.675 12.75.614 13.467-1.12 13.137-1.558-.297-1.915-1.636-2.358-8.84-.778-12.644-2.207-13.72-8.77-6.6-3.584 3.889-3.995 4.832-3.59 8.25 1.531 12.897 1.891 19.486 1.139 20.83-1.602 2.862-2.757 1.542-2.817-3.22-.08-6.473-1.414-14.124-2.682-15.392-.727-.727-2.337.122-5.282 2.783l-4.237 3.828.69 14.35c.649 13.509.583 14.33-1.12 14.007-1.516-.288-1.97-1.948-2.809-10.255-.646-6.398-1.452-10.06-2.276-10.333-1.732-.573-9.574 7.408-8.929 9.088.283.738.843 6.412 1.245 12.607.694 10.702.636 11.248-1.155 10.905-1.6-.305-1.977-1.588-2.488-8.457-.864-11.59-1.858-12.58-7.224-7.2l-3.173 3.182v14.068c0 19.566-2.08 19.697-4.066.257-.802-7.855-2.481-8.338-8.143-2.346-4.107 4.347-4.375 4.963-3.883 8.914.292 2.334.81 9.061 1.154 14.949.362 6.205 1.116 11.113 1.794 11.675 1.317 1.094 8.104 1.998 11.144 1.485 1.1-.186 6.658-.344 12.35-.351zm175.382-30.764c2.897-3.712 9.047-11.437 13.668-17.167 12.443-15.425 30.242-42.43 37.6-57.048 2.928-5.815 7.5-17.432 7.5-19.055 0-1.446-7.046-8.98-8.398-8.98-.64 0-3.698 2.587-6.793 5.75-5.491 5.61-7.512 9.576-9.297 18.25-.983 4.777-9.594 20.347-14.772 26.71-2.332 2.865-7.27 8.94-10.975 13.5-3.704 4.56-8.364 10.09-10.356 12.29-5.734 6.334-17.582 22.67-19.133 26.382-1.688 4.04-1.046 4.858 4.224 5.383 11.534 1.15 10.99 1.346 16.732-6.015zm-199.52-11.458c6.625-6.502 6.28-6.851-8.199-8.276-6.531-.643-8.943-1.973-6.505-3.586 1.387-.918 8.589-.673 20.15.685 4.31.507 4.961.272 8.75-3.15 3.729-3.37 5.242-6.334 3.342-6.55-16.927-1.932-19.746-2.51-20.051-4.108-.488-2.555 5.045-3.182 16.798-1.904 6.896.75 10.73.778 12.024.086 2.416-1.293 7.454-7.847 6.65-8.651-.334-.334-5.001-1.012-10.372-1.505-9.933-.914-12.117-1.7-10.77-3.88.569-.92 4.154-1.047 14.644-.514l13.89.705 2.969-3.178c1.632-1.748 2.968-3.749 2.968-4.447 0-1.605-4.51-2.519-12.434-2.519-3.502 0-6.956-.565-7.965-1.303-1.638-1.197-1.65-1.41-.155-2.652 1.278-1.06 4.441-1.207 14.784-.683l13.158.665 3.806-3.716c2.093-2.044 3.806-4.234 3.806-4.866 0-.739-3.84-1.47-10.75-2.047-8.49-.71-10.75-1.213-10.75-2.398 0-1.252 2.41-1.546 14.579-1.776l14.579-.276 3.369-3.476c2.29-2.362 3.042-3.803 2.35-4.496-.562-.56-7.629-1.305-15.706-1.654-8.888-.384-15.053-1.078-15.618-1.758-.512-.618-1.251-7.972-1.64-16.344-.816-17.5-1.392-18.306-7.924-11.076l-3.744 4.144.703 13.25c.454 8.57.346 13.471-.304 13.873-1.683 1.04-2.25-1.04-2.864-10.512-.708-10.93-1.734-11.796-7.445-6.283l-4.023 3.884.344 12.911c.237 8.898-.003 13.028-.773 13.289-1.383.468-2.383-4.251-2.383-11.243 0-10.03-1.438-10.627-8.445-3.513l-4.87 4.945.647 13.503c.436 9.077.302 13.716-.409 14.155-1.823 1.127-2.185-.225-2.702-10.104-.59-11.305-1.606-12.388-6.869-7.325-5.487 5.278-5.624 5.847-4.333 18.061.818 7.744.851 11.35.11 12.091-1.592 1.593-3.129-3.389-3.129-10.144 0-3.192-.589-6.55-1.326-7.557-1.25-1.709-1.54-1.625-5.038 1.446-5.573 4.893-5.746 5.59-4.105 16.524 1.81 12.055 1.81 12.461.03 12.461-.962 0-1.646-1.574-2.064-4.75-1.113-8.449-1.658-10.363-2.838-9.97-1.692.561-7.534 29.094-6.746 32.947.79 3.863 2.463 4.398 14.587 4.66 4.95.108 10.575.581 12.5 1.052 6.092 1.49 7.324 1.16 11.712-3.147zm433.251-9.042c3.262-2.337 8.502-5.825 11.644-7.75 13.137-8.048 17.4-11.026 17.505-12.228.604-6.843.387-276.68-.223-277.888-.449-.89-2.65-1.91-4.89-2.268-2.24-.358-5.737-1.543-7.77-2.634-2.035-1.09-4.441-1.982-5.348-1.982-1.852 0-7.396 5.797-11.595 12.124-5.68 8.558-10.286 16.1-10.286 16.842 0 .42-.835 1.837-1.856 3.15-2.997 3.851-13.528 23.752-16.872 31.884-8.737 21.248-17.449 52.172-20.284 72-.59 4.125-1.103 16.95-1.14 28.5-.074 22.54 1.09 33.552 5.755 54.5 2.411 10.828 12.751 44.323 14.354 46.5.405.55 2.438 5.255 4.518 10.455 5.8 14.506 12.406 28.29 14.755 30.79 2.99 3.182 4.979 2.844 11.733-1.995zm-458.027-46.184c4.197-4.33 3.673-7.138-1.152-6.173-3.65.73-4.747 2.038-4.769 5.69-.029 4.928 1.492 5.052 5.921.483zm334.064.32c0-1.044-1.325-7.183-2.944-13.642-1.619-6.46-3.502-14.669-4.186-18.244-.683-3.575-1.84-7.219-2.573-8.097-.903-1.084-4.584-1.992-11.45-2.824l-10.12-1.227-4.364 4.282c-2.4 2.356-4.363 4.803-4.363 5.44 0 .751 4.474 1.593 12.75 2.398 7.013.683 13.313 1.698 14 2.257.892.725 1.254 5.066 1.265 15.143.008 7.77.352 14.657.763 15.304.743 1.168 7.582 2.182 9.972 1.478.688-.202 1.25-1.223 1.25-2.267zm-320.478-14.013c3.651-3.366 5.583-6.54 4.228-6.948-.138-.041-3.813-.604-8.167-1.25-8-1.187-10.802-3.08-6.252-4.222 1.36-.341 6.21-.17 10.776.383 6.57.794 8.834.722 10.848-.347 2.603-1.381 8.045-7.66 8.045-9.284 0-.496-3.934-1.307-8.743-1.803-7.052-.728-8.806-1.236-9.069-2.629-.295-1.565.841-1.718 12.1-1.633 13.196.099 16.398-.817 18.845-5.389 1.522-2.843.216-3.572-7.633-4.26-9.776-.858-11.5-1.313-11.5-3.035 0-1.298 1.832-1.419 13.25-.87l13.25.638 3.293-3.454c2.63-2.76 3.028-3.673 1.978-4.545-.724-.6-7.457-1.41-14.963-1.8-7.506-.389-14.246-1.076-14.978-1.527-.97-.598-1.465-4.801-1.83-15.528-.338-9.954-.878-14.834-1.67-15.096-.644-.213-2.67.95-4.5 2.584l-3.33 2.971-.5 14.255c-.613 17.474-2.38 20.02-3.448 4.965-.39-5.516-1.197-10.33-1.792-10.697-.595-.368-2.595.983-4.446 3.002l-3.364 3.67.684 13.625c.57 11.362.455 13.547-.697 13.163-1.929-.643-2.721-4.135-2.837-12.503-.102-7.352-1.248-9.636-3.6-7.177-.998 1.042-1.392 8.041-1.655 29.368l-.345 28 3.5.618c8.168 1.443 9.842 1.07 14.522-3.245zm283.687-29.7c5.664-5.403 5.688-5.508 4.46-19.423-.642-7.258-.531-8.75.648-8.75 1.507 0 2.653 4.77 2.672 11.128.016 5.39 2.064 6.54 5.9 3.313l3.111-2.619v-12.91c0-7.102.402-12.912.893-12.912 1.493 0 2.106 2.84 2.122 9.832.016 6.779.983 9.905 2.73 8.826.778-.481 1.81-21.154 2.517-50.493.098-4.032-.956-4.771-8.072-5.66-3.027-.379-6.078-.909-6.78-1.178-1.483-.57-10.41 7.315-10.41 9.193 0 1.706 1.848 2.306 9.51 3.091 7.32.75 11.005 2.653 8.49 4.383-.825.568-2.4.794-3.5.503-1.1-.29-6.407-.816-11.794-1.166l-9.794-.638-3.456 3.35c-5.731 5.554-5.158 6.125 7.94 7.908 7.166.976 9.335 2.057 8.109 4.04-.745 1.206-4.2.987-17.785-1.127-5.762-.896-7.148-.813-9.236.555-3.408 2.232-6.036 6.429-4.8 7.665.54.54 5.106 1.488 10.148 2.11 6.933.853 9.168 1.49 9.168 2.612 0 1.274-1.911 1.386-13.457.787l-13.458-.698-3.708 3.399c-6.12 5.608-4.842 6.375 12.027 7.218 9.884.494 14.893 1.14 15.62 2.017.588.709 1.3 7.292 1.581 14.63.282 7.337.696 13.904.922 14.591.72 2.196 2.498 1.368 7.682-3.577zm25.671-3.078c1.033-.654 1.202-2.066.67-5.612-1.38-9.202-2.457-9.521-9.593-2.846-5.653 5.288-6.35 8.02-2.207 8.647 5.087.77 9.74.692 11.13-.189zM226.384 615.15c4.933-5.092 4.424-7.15-1.77-7.15-6.888 0-7.614.564-7.614 5.907 0 8.195 2.347 8.506 9.384 1.243zm255.632-2.88 4.22-4.77-.611-10c-.337-5.5-.215-10.62.27-11.378 1.802-2.817 3.105.106 3.105 6.968 0 8.85 1.5 9.781 7.041 4.37l3.9-3.809.28-11.994c.337-14.494 2.129-17.003 3.176-4.448.38 4.553 1.123 8.71 1.65 9.239.615.614 2.561-.61 5.395-3.391l4.434-4.352-.188-12.448c-.19-12.62.198-15.063 2.2-13.826.672.415 1.112 3.98 1.112 9.006 0 11.09 1.373 12.425 6.997 6.8l4.003-4.002v-13.2c0-10.116.292-13.105 1.25-12.788.79.262 1.546 3.701 2.054 9.334.442 4.905 1.257 9.369 1.811 9.919.674.669 2.313-.396 4.946-3.211l3.939-4.212v-12.122c0-9.252.296-12.024 1.25-11.707.77.255 1.525 3.412 1.964 8.214.393 4.29.963 8.048 1.267 8.352 1.15 1.15 3.013-2.055 4.123-7.09 4.842-21.95 4.732-20.828 2.525-25.724l-2.028-4.5-11.428-1.066c-15.94-1.487-21.874-.704-25.96 3.427-3.117 3.15-3.155 3.29-1.272 4.693 1.068.795 3.993 1.45 6.5 1.457 7.106.017 12.059 1.093 12.059 2.62 0 1.655.38 1.618-14.5 1.4l-12-.174-3.951 4.07c-4.914 5.061-3.949 6.69 3.753 6.33 7.703-.358 13.698.624 13.698 2.245 0 2.528-2.403 2.943-15.51 2.682l-13.011-.258-3.983 4.078c-5.086 5.208-4.09 5.955 8.004 5.996 9.719.033 12.908.99 10.695 3.208-.898.9-5.589 1.392-15.449 1.621-12.093.281-14.559.613-16.894 2.276-3.3 2.35-4.63 5.788-2.709 7.005.746.472 5.182.873 9.857.89 9.678.035 12.678 1.14 9.559 3.519-1.5 1.144-5.104 1.481-15.827 1.481h-13.886l-2.989 2.989c-1.644 1.644-2.748 3.379-2.453 3.855.294.476 5.161 1.183 10.815 1.57 11.077.758 13.543 1.771 10.281 4.225-1.612 1.212-3.939 1.383-12 .88-5.5-.343-11.146-.84-12.546-1.106-1.955-.37-3.545.44-6.853 3.494-2.369 2.187-4.112 4.565-3.873 5.284.316.953 4.46 1.512 15.245 2.055 8.384.422 15.4 1.234 16.17 1.872 1.026.852 1.357 4.588 1.357 15.338 0 7.816.284 14.495.631 14.842 1.06 1.06 3.955-1.022 8.385-6.029zm-179.95-25.02c12.879-13.063 45.92-46.257 73.425-73.765C458.774 430.193 501 387.145 501 385.532c0-.843-.529-1.532-1.174-1.532-1.102 0-20.488 7.914-29.326 11.973-4.248 1.95-19.074 5.922-31.5 8.437-12.89 2.61-24.884 3.736-42.929 4.03-20.034.326-20.466.518-21.676 9.642-.842 6.344-2.729 6.499-2.058.168.698-6.595 2.749-11.838 10.065-25.737 11.204-21.283 12.86-29.114 8.249-39.016-2.568-5.514-7.31-9.404-14.651-12.017-5.733-2.04-11.521-1.255-19.155 2.598-7.239 3.654-9.718 7.214-18.053 25.922-5.885 13.207-8.712 17.93-18.542 30.984-4.191 5.566-4.165 7.016.128 7.016 4.291 0 5.048 1.04 6.545 9 .673 3.575 1.424 7.513 1.67 8.75.74 3.741 3.856 2.61 8.824-3.204 5.078-5.945 4.898-5.334 9.633-32.546 3.659-21.028 6.563-27.945 13.971-33.27 4.381-3.149 7.482-3.411 12.43-1.052 2.594 1.237 3.957 2.825 5.183 6.033 1.57 4.114 1.56 4.698-.21 10.572-2.073 6.88-9.104 17.853-19.364 30.217-12.277 14.796-12.359 14.945-12.854 23.51-.587 10.124.695 10.725 8.434 3.953 3.12-2.73 6.139-4.963 6.71-4.963.573 0 2.286 1.194 3.81 2.652 2.16 2.071 3.07 2.402 4.146 1.51.758-.63 1.617-.906 1.908-.614.598.597-.239 18.692-.898 19.423-.8.888-2.285-2.47-2.3-5.2-.024-4.18-2.97-10.621-5.177-11.322-2.383-.756-7.486 2.578-13.814 9.025-6.365 6.486-7.18 6.112-7.018-3.224.074-4.262.102-8.312.064-9-.14-2.479-2.616-1.148-8.266 4.443-3.164 3.13-6.029 5.417-6.366 5.08-.337-.338-.97-3.462-1.404-6.943-.969-7.748-2.935-14.86-4.623-16.719-1.073-1.181-1.906-1.132-5.587.334-5.26 2.095-7.027 3.605-11.764 10.055-5.75 7.827-6.564 10.69-6.538 23 .021 9.939.279 11.482 2.666 16 3.56 6.737 10.05 12.81 17.311 16.2 5.277 2.463 7.144 2.796 15.5 2.763 7.934-.031 10.324-.434 14.5-2.444 5.433-2.615 16.5-12.476 16.5-14.703 0-1.704 3.85-13.266 5.1-15.316.58-.951.684.513.283 4-.347 3.025-1.026 5.928-1.507 6.45-.482.523-.876 1.554-.876 2.293 0 1.874-7.039 11.206-11.223 14.88-3.096 2.718-9.303 6.146-13.902 7.677-1.13.376-1.84 2.319-2.332 6.37-.389 3.207-1.795 7.8-3.125 10.206-1.33 2.407-2.418 5.025-2.418 5.82 0 1.703-6.972 10.418-19.664 24.58-5.04 5.623-10.89 12.622-13 15.552-2.11 2.93-5.411 7.016-7.336 9.08-4.553 4.88-14 20.385-14 22.978 0 6.634-2.25 12.044-7.061 16.984-2.717 2.789-4.939 5.625-4.939 6.302 0 2.077 6.261 7.828 8.522 7.828 1.455 0 9.54-7.517 25.544-23.75zm-61.51 13.695c1.894-1.835 3.444-3.874 3.444-4.53 0-1.56-5.267-2.497-16.393-2.916-7.213-.272-9.277-.694-10.312-2.11-.9-1.23-1.295-5.664-1.295-14.515 0-15.722-.663-17.874-5.507-17.874-2.16 0-3.771.561-4.104 1.43-.302.786.432 4.948 1.632 9.25 1.2 4.3 3.403 13.67 4.897 20.82l2.715 13 5.934.633c11.166 1.19 15.165.519 18.99-3.188zm29.796-6.665c3.557-3.557 5.094-6.084 6.235-10.25 4.255-15.535 13.497-29.609 35.383-53.88 14.654-16.25 23.955-30.732 24.008-37.38.026-3.24-2.129-4.053-9.5-3.582-4.502.287-5.152.67-8.177 4.812-5.997 8.21-14.68 19.187-24.854 31.416-8.686 10.442-24.404 32.156-28.16 38.904-2.122 3.812-7.205 18.315-7.865 22.44-.693 4.339.525 7.531 3.975 10.415 3.047 2.547 3.734 2.325 8.955-2.895zm-16.316-30.292c.295-12.918.88-24.207 1.299-25.086.42-.879 2.09-2.58 3.714-3.78 1.95-1.442 2.951-3.062 2.951-4.78 0-1.835 1.687-4.268 5.75-8.292 6.984-6.917 10.424-11.254 16.698-21.05 2.642-4.125 7.897-10.432 11.678-14.015 7.57-7.176 8.826-10.908 4.874-14.485-1.1-.995-2-2.352-2-3.015 0-.663-1.125-2.864-2.5-4.89-1.628-2.399-2.5-5.068-2.5-7.653 0-2.183-.539-4.832-1.197-5.886-.935-1.497-.91-3.36.111-8.5.934-4.701 1.002-6.952.238-7.872-.781-.942-.546-2.152.874-4.487 1.07-1.758 2.365-3.197 2.878-3.197.513 0 1.951-1.688 3.196-3.75 1.244-2.063 4.118-6.227 6.386-9.254 2.267-3.027 4.925-7.955 5.904-10.95 2.07-6.33 1.823-6.71-6.303-9.684-2.523-.924-8.786-3.633-13.918-6.02-5.132-2.388-9.567-4.342-9.855-4.342-.288 0-2.524-1.35-4.97-3-2.444-1.65-4.69-3-4.989-3-.3 0-3.54-1.962-7.2-4.36-3.66-2.397-8.098-5.21-9.863-6.25-1.764-1.04-6.398-4.546-10.297-7.792-4.76-3.962-7.421-5.572-8.097-4.896-.676.676-.668 18.891.023 55.402.566 29.918 1.275 73.971 1.575 97.896.3 23.925.812 49.543 1.137 56.928l.591 13.429 5.07 5.36c8.094 8.559 8.12 8.502 8.742-18.729zm185.81 11.669 5.276-5.343-.311-13.407c-.264-11.389-.085-13.407 1.189-13.407 1.214 0 1.555 1.905 1.79 9.99.158 5.493.722 10.422 1.253 10.953.62.62 2.563-.603 5.435-3.421l4.47-4.387.276-13.985c.183-9.275.656-14.112 1.405-14.36.767-.256 1.262 2.679 1.546 9.163.23 5.247.914 10.036 1.52 10.642 1.787 1.787 5.205.026 8.336-4.296 2.851-3.936 2.909-4.259 2.438-13.665-.512-10.244.304-16.225 2.307-16.893.912-.304 1.224 2.173 1.224 9.707 0 12.411 1.066 13.454 7.343 7.184l4.157-4.153.5-13.66c.354-9.669.865-13.779 1.75-14.072.945-.313 1.25 2.055 1.25 9.701 0 11.933 1.084 13.302 6.428 8.121l3.297-3.195.716-13.183c.395-7.25.877-13.342 1.072-13.537.194-.195.834-.058 1.42.305.627.387 1.067 4.346 1.067 9.6 0 8.136.172 8.941 1.911 8.941 1.051 0 3.076-1.385 4.5-3.077 2.268-2.695 2.585-3.967 2.558-10.25-.017-3.945-.462-10.548-.988-14.673-1.197-9.373-2.782-10.986-10.842-11.033-3.101-.018-8.74-.432-12.532-.92-7.783-1.003-10.68-.28-14.857 3.704-5.002 4.772-3.526 6.008 7.75 6.492 4.552.195 6 .619 6 1.757 0 1.235-2.133 1.55-12.082 1.78l-12.083.279-3.3 3.405c-4.932 5.088-3.77 6.536 5.242 6.536 4.633 0 8.031.505 9.212 1.368 1.805 1.32 1.792 1.411-.37 2.569-1.604.858-5.482 1-13.6.5l-11.358-.699-4.744 4.483c-3.448 3.257-4.561 4.961-4.073 6.234.593 1.545 1.584 1.672 8.414 1.072 8.128-.714 13.742.465 12.993 2.73-.293.884-4.631 1.387-15.027 1.743l-14.615.5-3.554 3.446c-4.704 4.56-4.648 6.708.195 7.463 2.062.321 6.034.51 8.826.421 6.167-.198 8.544.878 6.017 2.726-1.24.906-4.925 1.11-13.402.738l-11.691-.513-3.362 3.523c-1.85 1.938-3.097 3.953-2.772 4.479.325.526 4.676 1.275 9.67 1.666 7.73.605 9.031.959 8.754 2.38-.285 1.46-1.992 1.671-13.534 1.671h-13.209l-3.74 3.733c-5.413 5.403-4.074 6.159 11.991 6.767 7.261.275 13.764.864 14.452 1.309.758.49 1.252 3.05 1.255 6.5.011 11.893 1.294 25.191 2.43 25.191.623 0 3.508-2.404 6.41-5.343zm106.032-7.907c1.519-4.123 2.126-11.63.998-12.327-1.05-.648-12.876 10.216-12.876 11.828 0 1.212 4.056 2.614 7.775 2.686 2.516.048 3.467-.458 4.103-2.187zm-282.752-6.5c5.052-8.874 11.713-19.018 17.819-27.135 3.055-4.062 6.426-8.562 7.49-10 1.065-1.438 4.246-5.09 7.07-8.115 10.176-10.904 21.279-27.515 20.225-30.26-.788-2.054-7.452-4.997-9.142-4.038-1.19.675-9.513 11.473-14.615 18.96-.81 1.19-4.947 6.428-9.193 11.641-16.542 20.311-24.856 35.077-25.577 45.426-.762 10.954 1.072 12.044 5.923 3.521zm-45.442-11.869c.68-1.774-1.51-176.49-2.26-180.131-.254-1.238-.878-2.25-1.386-2.25-.509 0-3.691 4.612-7.073 10.25l-6.149 10.25.593 34c.327 18.7.857 51.775 1.178 73.5.342 23.079 1.024 40.932 1.64 42.944 1.173 3.827 9.26 13.056 11.441 13.056.767 0 1.674-.728 2.016-1.619zM198 511.678c0-18.457-2.033-92.881-2.816-103.097-.395-5.146-1.16-9.077-1.81-9.292-.619-.205-3.884 3.93-7.256 9.187-5.771 8.999-14.278 20.218-21.851 28.818-1.838 2.087-4.064 5.31-4.947 7.162l-1.607 3.368 6.112 10.456c6.76 11.566 16.824 31.677 20.878 41.72 2.507 6.213 9.01 20.117 10.641 22.75 1.988 3.21 2.656.425 2.656-11.072zm-135.95-34.47c2.998-2.636 8.825-7.543 12.95-10.905 16.079-13.105 40.662-39.666 59.978-64.803 14.904-19.396 42.075-61.676 52.519-81.725 5.718-10.978 4.852-11.78-6.874-6.363-8.091 3.737-9.556 5.29-17.065 18.088-9.99 17.024-10.415 17.697-25.96 41-21.594 32.372-41.176 55.131-70.525 81.968L53 467.338v7.33c0 9.114 1.194 9.449 9.05 2.54zm-2.435-21.451c6.398-4.974 37.384-36.874 43.057-44.326 3.336-4.383 6.805-8.582 7.71-9.332 4.553-3.78 33.056-44.62 43.61-62.49 6.833-11.567 8.541-15.609 6.6-15.609-2.665 0-34.074 15.72-36.203 18.12-1.162 1.31-3.672 5.08-5.58 8.38-14.96 25.884-35.03 51.28-55.94 70.784-11.403 10.636-10.318 7.659-10.012 27.466.128 8.31.333 9.25 2.008 9.25 1.026 0 3.163-1.01 4.75-2.243zm8.256-45.487c13.513-13.987 22.617-24.696 30.835-36.27 8.17-11.508 15.294-23.378 15.294-25.485 0-2.316-3.24-1.48-12.867 3.315-6.637 3.306-7.82 4.364-11.928 10.67-6.302 9.675-19.055 25.412-28.514 35.186l-7.922 8.187.01 6.313c.016 9.482.082 9.812 1.971 9.834.962.01 6.867-5.277 13.12-11.75zm292.442-14.52c4.635-5.638 10.36-13.948 12.725-18.467 4.107-7.851 4.245-8.395 3.1-12.214-2.848-9.51-11.11-9.346-17.532.348-4.42 6.672-6.246 12.316-8.525 26.35-2.914 17.948-1.652 18.44 10.232 3.983zm59.263 8.172c40.645-4.012 79.977-20.036 118.98-48.474 13.618-9.93 27.444-22.02 27.444-23.997 0-2.107-4.121-4.451-7.826-4.451-2.614 0-4.547 1.05-8.527 4.635-2.83 2.55-6.272 5.34-7.647 6.201-1.375.862-5.2 3.668-8.5 6.236-40.351 31.4-90.255 49.693-136.807 50.15-10.24.101-10.908.236-12.75 2.577-2.436 3.097-2.533 6.9-.193 7.512 3.456.903 25.117.668 35.826-.39zm-97.212-12.558c4.296-4.297 3.53-5.903-4.011-8.413-8.162-2.716-30.063-12.622-36.853-16.668-6.79-4.046-20.63-13.581-29.607-20.396-8.461-6.423-28.744-26.927-37.232-37.637-3.16-3.988-6.29-7.248-6.954-7.246-2.106.007-7.707 3.91-7.707 5.371 0 3.752 25.123 31.348 38.5 42.29 17.805 14.565 34.217 25.478 48.5 32.248 11.178 5.3 29.427 12.93 31.114 13.01.887.042 2.8-1.11 4.25-2.56zM423 371.509c28.697-5.865 58.01-16.627 75-27.534 12.078-7.753 26.118-17.448 27.532-19.01 1.658-1.833 1.622-1.956-.86-2.9-1.427-.542-4.749-1.269-7.383-1.615-4.386-.577-5.168-.34-9.289 2.814-10.675 8.169-35.174 21.345-47.5 25.546-21.504 7.33-36.046 10.88-50.493 12.326-5.779.579-11.034 1.486-11.679 2.016-1.47 1.208-2.74 8.373-1.763 9.953.92 1.488 15.717.595 26.435-1.596zm-85.343-8.23c.955-2.286 1.22-4.25.687-5.095-.477-.756-4.462-2.805-8.855-4.554-10.88-4.33-32.158-15.707-41.941-22.424-13.759-9.447-34.552-27.37-44.032-37.956-5.11-5.706-7.413-6.389-12.566-3.724-1.622.839-2.95 1.77-2.95 2.07 0 3.397 20.173 24.333 35.5 36.842 13.154 10.735 18.015 14.1 30 20.77 8.416 4.683 14.905 7.71 36 16.795 4.374 1.884 6.532 1.164 8.157-2.724zm9.02-32.793c.384-1.173-9.745-7.486-12.01-7.486-2.039 0-5.98 5.086-4.832 6.235 2.167 2.167 16.202 3.21 16.843 1.251zm252.004-3.875c-.279-.727-2.909-2.69-5.844-4.363-5.478-3.12-14.255-11.041-19.114-17.248a1874.84 1874.84 0 0 0-5.187-6.592C566.53 295.873 551 268.486 551 267.482c0-.163-1.956-4.501-4.346-9.64-9.819-21.11-27.992-76.783-34.075-104.391-.843-3.823-2.423-10.133-3.513-14.022-1.09-3.889-2.928-11.539-4.085-17-2.348-11.075-4.029-13.429-9.592-13.429-3.157 0-3.39.223-3.39 3.25-.002 4.132 6.432 32.073 12.377 53.75 4.329 15.785 19.24 61.204 24.131 73.5 10.845 27.265 21.202 49.102 27.984 59 4.733 6.907 15.117 19.322 19.009 22.728 3.494 3.057 12.779 7.024 17.978 7.68 5.045.638 6.143.153 5.203-2.297zm-273.034-2.178c4.405-3.61 5.338-6.048 3.153-8.233-2.098-2.098-4.15-1.244-10.179 4.233-6.376 5.792-6.59 7.567-.915 7.567 2.633 0 4.746-.95 7.941-3.567zm245.353-.81c0-.758-.701-1.96-1.559-2.672-2.787-2.313-14.715-18.284-18.635-24.951-3.472-5.906-10.295-19.527-16.28-32.5-7.571-16.416-14.443-35.124-22.04-60-2.015-6.6-4.28-13.8-5.034-16-4.796-14-17.862-64.294-19.024-73.232-.857-6.584-2.044-8.153-6.428-8.495-3.123-.244-3.533.012-3.806 2.372-.262 2.262 1.526 12.668 4.874 28.355 4.592 21.52 20.375 73.083 30.38 99.253 11.49 30.056 12.084 31.416 22.238 50.944 14.24 27.384 23.445 38.205 32.564 38.28 1.68.014 2.75-.513 2.75-1.355zm41.418.77c3.071-1.179 1.508-3.155-5.049-6.383-8.38-4.125-19.117-14.23-27.209-25.605-5.856-8.233-17.937-31.601-23.474-45.405-7.196-17.94-21.31-61.17-26.773-82a887.72 887.72 0 0 0-4.404-16c-1.34-4.675-3.797-14.125-5.46-21-3.19-13.191-4.303-15-9.24-15-2.437 0-2.809.386-2.809 2.92 0 5.924 9.32 44.266 18.13 74.58 8.243 28.363 25.407 72.372 33.737 86.5 16 27.137 20.585 32.8 33.849 41.807 7.29 4.95 14.638 7.146 18.702 5.586zm-299.709-4.53c3.492-2.274 7.278-5.44 8.413-7.034 1.933-2.714 1.96-3.054.447-5.363-.888-1.356-2.33-2.466-3.202-2.466-.873 0-4.025 2.228-7.004 4.951-2.98 2.724-7.206 5.957-9.39 7.185-4.162 2.338-5.257 5.382-2.223 6.175 4.333 1.132 7.033.414 12.96-3.447zm237.853.037c.374-.605-.27-2.292-1.431-3.75-10.917-13.706-23.755-39.272-36.482-72.65-6.134-16.086-23.473-69.65-27.031-83.5-5.84-22.732-9.19-37.56-11.296-50-.326-1.925-1.276-4.288-2.112-5.25-1.899-2.186-7.057-2.313-7.87-.195-1.465 3.819 6.794 39.53 15.136 65.445 2.39 7.425 7.339 22.95 10.998 34.5 3.66 11.55 8.167 25.275 10.016 30.5 3.148 8.898 4.747 13.058 12.295 32 6.043 15.164 19.119 40.489 24.326 47.113 4.207 5.352 11.722 8.585 13.45 5.787zm-251.322-7.15c8.083-4.306 14.76-10.379 14.76-13.424 0-1.876-2.786-5.326-4.301-5.326-.546 0-3.108 1.98-5.695 4.399-2.586 2.42-8.387 6.54-12.891 9.157s-8.466 5.206-8.804 5.753c-.92 1.488 2.668 3.691 6.013 3.691 1.618 0 6.53-1.913 10.918-4.25zm232.428 1.672c.333-.868-.287-2.774-1.378-4.236-1.615-2.162-3.325-2.882-9.177-3.862-11.354-1.9-20.198-6.52-27.3-14.26-3.313-3.61-7.406-9.264-9.094-12.564-6.852-13.39-3.84-34.519 6.584-46.21 1.522-1.707 1.834-3.06 1.368-5.931-.332-2.046-1.226-4.342-1.986-5.103-3.306-3.305-13.264 9.873-17.565 23.244-3.568 11.095-3.728 27.26-.352 35.605 3.45 8.527 7.917 14.59 15.136 20.546 11.451 9.445 23.448 14.086 36.877 14.265 4.853.065 6.42-.275 6.887-1.494zm95.008-.568c2.253-1.87 1.5-2.6-3.426-3.329-11.834-1.747-23.43-11.775-34.164-29.543-10.22-16.918-25.886-52.545-35.17-79.982a6720.224 6720.224 0 0 0-5.355-15.755c-2.5-7.318-10.54-37.69-14.623-55.245-1.216-5.225-2.893-10.287-3.729-11.25-1.662-1.915-6.706-2.373-7.738-.703-.611.989.44 7.116 2.566 14.953.522 1.925 2.556 10.25 4.52 18.5 1.964 8.25 3.946 16.125 4.404 17.5.459 1.375 1.615 5.2 2.57 8.5 4.478 15.478 18.375 55.615 23.198 67 7.173 16.931 11.623 27.073 12.289 28 .394.55 2.19 3.7 3.992 7 5.949 10.9 9.928 16.165 18.256 24.153 11.12 10.668 15.158 12.655 24.16 11.89 3.809-.325 7.521-1.084 8.25-1.689zM288.44 303.2c4.918-2.53 10.912-6.488 13.321-8.797 3.723-3.567 4.332-4.698 4.06-7.541-.483-5.024-3.18-4.9-8.69.4-7.767 7.472-17.409 12.9-30.382 17.108-2.76.895-2.062 2.292 1.943 3.89 4.688 1.869 7.856 1.057 19.748-5.06zm234.019-3.135c.317-.514-.43-3.007-1.66-5.54-1.908-3.928-2.844-4.76-6.354-5.643-2.264-.57-6.328-2.695-9.03-4.722-10.015-7.51-12.949-21.39-7.36-34.82 1.752-4.21-.15-11.34-3.024-11.34-5.064 0-9.46 11.514-9.355 24.5.065 7.98.432 9.737 3.233 15.5 3.58 7.364 10.668 15.16 16.59 18.246 7.61 3.964 15.739 5.795 16.96 3.82zm-248.717-4.15c7.675-2.549 20.08-10.505 23.625-15.153 2.77-3.632 3.334-7.784 1.657-12.197-1.341-3.528-3.462-3.212-5.999.893-3.095 5.007-15.358 16.034-20.83 18.728-3.63 1.788-6.794 2.392-13.946 2.66-10.42.39-11.317 1.237-6.031 5.685 2.966 2.496 3.691 2.66 9.25 2.082 3.317-.344 8.84-1.559 12.274-2.699zm-3.164-12.792c7.54-3.567 16.299-11.975 19.92-19.12 2.273-4.487 2.647-6.265 2.198-10.455-.667-6.222-2.865-13.048-4.201-13.048-.548 0-1.372 1.8-1.833 4-1.932 9.238-4.9 14.966-11.008 21.238-7.389 7.589-13.407 10.717-18.92 9.836-11.486-1.837-15.788-13.982-7.368-20.802 2.534-2.052 5.633-2.305 5.633-.46 0 .722-1.35 2.31-3 3.53-4.547 3.362-4.025 9.06 1.072 11.695 4.717 2.44 8.537 1.849 12.693-1.964 3.472-3.185 3.726-3.805 3.612-8.8-.2-8.731-6.166-13.798-16.192-13.751-14.195.066-22.511 12.86-17.644 27.143 2.149 6.307 7.091 10.793 13.638 12.377 8.959 2.168 14.609 1.793 21.4-1.42zM514 281.103c0-3.025-9.75-23.07-11.56-23.764-3.845-1.476-4.524 5.688-1.345 14.186 1.555 4.155 3.143 6.359 6.15 8.538 4.694 3.4 6.755 3.718 6.755 1.04zm96.31-8.688c.758-2.644.168-4.491-4.242-13.28-6.465-12.882-14.441-31.26-18.071-41.635-1.54-4.4-4.458-12.5-6.486-18-2.028-5.5-4.127-11.575-4.664-13.5-.536-1.925-1.805-5.75-2.819-8.5-1.536-4.165-6.24-19.23-9.994-32-.485-1.65-1.412-5.654-2.06-8.897-1.33-6.665-4.46-10.603-8.429-10.603-2.232 0-2.545.422-2.545 3.43 0 4.94 5.277 27.31 9.334 39.57 5.74 17.345 12.163 35.044 15.605 43 1.785 4.125 5.193 12.225 7.574 18 4.403 10.679 19.821 42.437 21.747 44.793 1.695 2.074 4.098.943 5.05-2.378zM0 1218.089c0-1.637 6.68-8.843 24.033-25.928l24.034-23.661-.1-30.816c-.093-29.06-.209-30.926-2.033-32.75-1.064-1.064-3.244-1.934-4.845-1.934-2.862 0-2.918.106-3.311 6.25-.22 3.438.045 15.25.588 26.25.544 11 .652 21.35.24 23-.51 2.04-6.801 9.077-19.67 22l-18.922 19-.007-54.259L0 1090.983l5.75.569c18.795 1.86 55.747 9.397 70.315 14.342 19.83 6.732 38.122 15.457 58.174 27.749 9.626 5.9 13.329 6.84 12.24 3.107-.362-1.238-3.35-7.773-6.64-14.523-16.615-34.09-39.269-58.446-67.021-72.056-17.58-8.622-32.98-13.466-54.177-17.043-9.823-1.657-18.04-3.193-18.258-3.412-.22-.22-.283-27.288-.14-60.154L.5 909.807l2.664 2.47c5.418 5.02 10.693 4.501 32.836-3.237 6.325-2.21 12.287-4.024 13.25-4.03 2.117-.012 1.908-6.522 2.249 70.245.28 62.954.198 61.89 4.841 63.343 1.188.372 5.985 2.466 10.66 4.653 4.675 2.188 9.523 4.369 10.773 4.847 3.773 1.444 13.347 7.879 19.721 13.255 22.271 18.783 37.99 40.066 49.226 66.647 9.047 21.405 8.143 23.208-6.776 13.513-9.376-6.092-9.523-6.173-29.934-16.503-14.638-7.407-48.707-20.01-54.094-20.01-1.541 0-2.963.68-3.309 1.582-.334.87-.607 15.661-.607 32.87v31.287l-9.683 8.88c-9.406 8.627-20.184 18.954-35.067 33.602-6.103 6.007-7.25 6.777-7.25 4.868zm19.902-43.594c4.5-4.209 4.9-4.996 6.09-11.953 1.651-9.647.706-20.542-3.125-36.042-2.258-9.136-2.894-13.79-2.666-19.5l.299-7.5-5.393-.914c-4.733-.803-5.56-.688-6.75.94-1.522 2.082-1.765 12.593-.438 18.974.457 2.2 1.787 8.46 2.956 13.91 2.412 11.247 2.821 27.08.961 37.175-.927 5.033-.902 6.63.123 7.865 1.891 2.28 2.647 1.998 7.943-2.955zm27.25-148.505c1.045-8.819.935-113.303-.122-114.975-.83-1.313-1.435-1.313-5.234 0L37.5 912.5l-.198 58.17c-.208 61.096-.32 59.483 4.198 60.617 4.232 1.062 4.98.361 5.651-5.297zM26 1025.386c0-3.782-3.26-21.698-5.074-27.886-1.504-5.133-2.202-11.144-2.615-22.533-.574-15.848.691-27.458 5.27-48.37.832-3.797 1.141-7.275.687-7.73-.9-.9-10.353-.05-12.209 1.097-.631.39-2.705 8.488-4.608 17.995-4.814 24.05-4.887 37.713-.312 58.041a3274.208 3274.208 0 0 1 3.983 18c1.139 5.225 2.75 10.263 3.58 11.196 1.43 1.605 7.336 2.756 10.048 1.958.688-.202 1.25-.998 1.25-1.768zm82 81.979c-11.543-5.395-28.793-12.03-36-13.846-3.575-.901-7.85-2.065-9.5-2.587C51.672 1087.51 13.556 1081 4.345 1081H0v-39.091l3.25.533c1.788.293 7.75 1.248 13.25 2.122 24.025 3.818 50.46 14.292 66.511 26.352 13.36 10.038 27.35 24.61 33.776 35.18 3.642 5.99 1.866 6.247-8.787 1.269zm-18.582-16.681c2.098-1.534 1.806-4.514-.59-6.023-2.585-1.628-6.828.693-6.828 3.734 0 3.523 4.03 4.766 7.418 2.289zm-16.45-10.992c1.47-2.693 1.417-2.909-1.274-5.25-3.218-2.801-6.846-3.147-9.123-.87-2.102 2.102-1.98 3.638.545 6.848 2.868 3.647 7.66 3.292 9.853-.728zm-25.797-4.347c2.89-2.614 2.467-8.88-.74-10.982-3.397-2.226-8.985-.88-11.738 2.83-1.906 2.568-1.92 2.813-.287 5.304 2.895 4.418 9.421 5.874 12.765 2.848zm-26.64-5.692c2.067-2.952 1.877-8.974-.347-10.986-4.528-4.098-13.037-2.787-15.731 2.424-1.88 3.636-1.808 4.89.45 7.826 1.255 1.633 3.275 2.62 6.227 3.043 5.564.797 7.571.305 9.4-2.307zm320.219 40.641c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zm135.779-15.89c-1.281-1.955-1.865-5.306-2.144-12.296-.21-5.284-.347-10.283-.303-11.108.043-.825.195-3.525.337-6 .142-2.475.33-6.21.42-8.301.121-2.87.973-4.585 3.473-7 1.822-1.76 5.012-5.35 7.09-7.978 6.186-7.823 17.154-12.035 24.57-9.437 4.047 1.417 7.986 7.474 8.012 12.318.022 4.157-3.622 9.28-8.328 11.708-3.196 1.65-4.554 1.821-8.052 1.02-2.315-.529-4.76-.778-5.437-.552-2.204.734-5.762 9.476-9.045 22.222-3.602 13.987-4.974 17.348-7.262 17.788-.864.167-2.363-.906-3.331-2.384zm5.272-9.654c.626-1.238 2.31-6.525 3.741-11.75 2.629-9.592 7.175-18.243 10.532-20.04 1.298-.694 2.819-.502 5.268.666 3.24 1.545 3.666 1.53 7.236-.242 2.086-1.036 4.646-3.052 5.688-4.48 2.742-3.757.985-10.143-3.278-11.909-4.673-1.935-13.156-.812-17.982 2.382-10.803 7.15-17.203 26.698-14.364 43.873.71 4.302 1.541 4.696 3.159 1.5zm-106.551-66.44c.963-.25 2.538-.25 3.5 0 .963.252.175.458-1.75.458s-2.712-.206-1.75-.457zm26-36c.963-.25 2.538-.25 3.5 0 .963.252.175.458-1.75.458s-2.712-.206-1.75-.457zM416 952.06c0-.582.45-1.059 1-1.059s1 .198 1 .441-.45.72-1 1.059c-.55.34-1 .141-1-.441zm-45.73-26.663c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525zm6-1c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525zM87.485 907.974c-.36-.584-.344-4.81.038-9.391.515-6.181.302-9.717-.826-13.706-.835-2.958-1.812-7.223-2.17-9.48-.606-3.815-.455-4.185 2.161-5.287 7.115-2.997 32.76-37.676 46.419-62.77 1.748-3.212 4.274-7.865 5.613-10.34 8.589-15.873 18.965-42.48 24.373-62.5 5.055-18.707 8.748-38.75 9.883-53.63 3.658-47.953-3.28-94.834-21.22-143.37-7.04-19.044-23.76-53.572-27.286-56.346-4.456-3.504-3.116-9.12 3.914-16.404 3.753-3.89 5.217-4.75 8.086-4.75 3.755 0 3.113-.679 11.936 12.616 5.234 7.887 13.991 24.524 18.237 34.648 2.97 7.081 6.65 17.107 14.771 40.236 2.177 6.2 9.012 33.728 10.553 42.5.628 3.575 1.77 9.2 2.538 12.5 1.768 7.597 2.332 15.522 3.487 48.999.559 16.21.57 29.597.026 33.5a480.754 480.754 0 0 0-1.5 12.001c-1.159 10.72-2.547 18.628-5.09 29-3.727 15.196-8.003 30.278-9.498 33.5-.51 1.1-1.774 4.475-2.807 7.5-4.674 13.682-7.147 19.988-10.39 26.5-1.917 3.85-4.533 9.475-5.812 12.5-2.804 6.631-12.474 23.754-19.1 33.823-2.651 4.028-4.82 7.588-4.82 7.911 0 .324-2.582 4.003-5.738 8.177-3.155 4.174-7.318 9.877-9.25 12.673-4.979 7.207-7.802 10.804-13.543 17.26a1189.12 1189.12 0 0 0-10.816 12.385c-6.613 7.692-11.178 11.348-12.169 9.745zm14.11-18.224c14.202-14.705 35.496-44.372 48.628-67.75 16.85-29.996 28.49-57.954 34.66-83.245 8.354-34.252 10.354-50.231 10.355-82.755.001-31.712-2.26-51.868-8.755-78-2.672-10.752-16.026-51.7-17.448-53.5-.434-.55-1.123-2.125-1.531-3.5-.729-2.456-2.742-7.076-8.714-20-3.872-8.378-15.36-29.248-17.67-32.1-1.363-1.684-2.402-2.046-4.422-1.539-3.097.777-7.697 7.052-7.697 10.499 0 1.317 2.342 6.95 5.205 12.517 12.025 23.39 16.56 33.739 24.366 55.623 7.585 21.264 11.89 39.139 16.614 69 1.978 12.5 2.279 17.948 2.182 39.5-.096 21.529-.475 27.397-2.73 42.265-5.854 38.615-11.443 56.91-28.879 94.535-4.82 10.404-15.552 29.898-21.028 38.2-7.121 10.795-13.216 19.427-16.594 23.5-2.053 2.475-4.805 6.075-6.116 8-1.311 1.925-4.134 5.437-6.273 7.805-5.802 6.422-6.646 9.078-5.238 16.5C92.107 893.73 92.921 896 94.346 896c.667 0 3.928-2.813 7.248-6.25zM0 895c0-4.748.352-6.9 1.057-6.465 1.182.73.919 12.362-.297 13.113-.418.259-.76-2.733-.76-6.648zm.11-22.75C.037 867.33.376 865 1.168 865c.641 0 .87.296.508.658-.362.362-.238 1.164.275 1.781.584.704.435 3.166-.398 6.592L.222 879.5l-.111-7.25zm-.047-23.2c-.043-2.368.26-3.127.967-2.42.683.683.704 1.848.064 3.45-.909 2.274-.971 2.212-1.03-1.03zM0 833.5c0-.825.436-1.5.969-1.5.532 0 .71.675.393 1.5-.317.825-.753 1.5-.969 1.5-.216 0-.393-.675-.393-1.5zm617.655-35.329c-.91-1.006-1.655-2.16-1.655-2.566 0-.406-1.238-2.354-2.75-4.33-3.008-3.927-4.704-7.058-13.91-25.668-5.427-10.974-7.4-15.279-12.877-28.107-3.654-8.558-6.645-16.376-7.46-19.5-3.583-13.731-9.81-35.879-10.325-36.722-.863-1.412-4.747-21.042-5.735-28.983-6.041-48.537-5.292-83.552 2.487-116.295 7.451-31.36 19.618-64.656 30.693-84 1.417-2.475 5.192-9.225 8.387-15 3.196-5.775 7.089-12.14 8.65-14.144 1.562-2.004 2.84-4.039 2.84-4.522 0-.483 1.28-2.443 2.847-4.356 1.565-1.913 3.369-4.467 4.007-5.677.639-1.209 3.97-5.865 7.404-10.346 3.433-4.48 6.896-9.116 7.694-10.3.8-1.186 3.937-5.08 6.974-8.655 3.036-3.575 6.433-7.603 7.547-8.952 1.115-1.349 6.592-7.128 12.171-12.842 9.347-9.573 10.318-10.297 12.35-9.21 1.731.927 2.072 1.753 1.586 3.843-1.472 6.329-1.795 19.096-.608 24.044 1.203 5.016 1.16 5.25-1.618 8.711-12.668 15.785-33.19 45.401-41.51 59.906-29.624 51.64-43.473 94.839-46.966 146.5-2.092 30.946 1.48 62.604 10.778 95.5 1.399 4.95 2.994 10.8 3.545 13 .55 2.2 1.66 5.48 2.466 7.29.805 1.808 2.15 5.633 2.988 8.5 3.372 11.526 21.782 51.546 26.779 58.21 3.63 4.841 3.897 7.754 1.069 11.622a298.125 298.125 0 0 0-4.237 5.953c-2.461 3.588-8.735 8.925-10.493 8.925-.805 0-2.208-.823-3.118-1.829zm9.538-9.108c1.354-1.065 3.53-3.949 4.834-6.408l2.372-4.471-2.562-3.842c-3.343-5.013-14.719-28.385-19.392-39.842-17.646-43.257-26.055-80.164-27.167-119.24-.68-23.885.39-36.712 5.362-64.26 3.482-19.294 6.94-31.308 15.544-54 3.717-9.805 26.772-56.144 30.8-61.905.997-1.427 3.919-5.887 6.492-9.91 5.413-8.464 19.548-28.398 25.304-35.685 5.895-7.464 6.288-8.632 6.125-18.221-.164-9.634-.51-11.279-2.374-11.279-2.204 0-10.797 8.576-18.531 18.493a5148.562 5148.562 0 0 1-12.38 15.813c-4.493 5.704-9.125 12.544-20.109 29.694-8.82 13.771-14.552 23.942-20.008 35.5-3.116 6.6-6.514 13.639-7.552 15.642-2.105 4.064-2.896 6.164-10.112 26.858-5.767 16.535-10.736 34.171-10.798 38.316-.022 1.548-.442 3.573-.932 4.5-.49.926-1.9 8.434-3.134 16.684-3.66 24.464-3.16 69.9 1.01 91.5 1.008 5.225 2.126 11.3 2.484 13.5.862 5.293 6.788 27.163 11.211 41.373 2.96 9.508 15.891 41.687 19.225 47.84.804 1.484 5.936 11.748 13.893 27.787 1.895 3.82 5.203 7.5 6.741 7.5.655 0 2.3-.872 3.654-1.937zM.194 542l-.013-44.5 1.828 6.5c1.006 3.575 3.262 11.225 5.013 17 2.706 8.922 3.197 12.153 3.269 21.5.076 9.99-.25 12.057-3.54 22.5-1.992 6.325-4.28 13.75-5.083 16.5C.335 586.067.207 582.644.194 542zM.147 411.5c.007-28.289.316-40.07.996-38 .541 1.65 3.093 7.275 5.67 12.5l4.687 9.5-.028 13c-.024 11.177-.354 13.841-2.354 19-1.279 3.3-3.44 9.375-4.803 13.5s-2.86 8.4-3.329 9.5c-.486 1.143-.846-15.567-.84-39zM146.5 429c1.1-.473 3.35-.838 5-.811l3 .048-3 .763c-1.65.42-3.9.785-5 .811-2 .048-2 .048 0-.811zm615.25-14.853c-2.17-4.716-2.16-5.066.25-8.147l1.956-2.5.022 7.25c.012 3.987-.09 7.238-.228 7.224-.138-.014-1.038-1.736-2-3.827zm-.12-23.397c-1.008-3.762-.707-6.441.87-7.75 1.303-1.081 1.5-.507 1.5 4.378 0 5.693-1.265 7.493-2.37 3.372zm-.043-26.384c-.762-1.985.296-8.176 1.526-8.936.488-.301.887 1.954.887 5.011 0 5.398-1.138 7.249-2.413 3.925zm-48.542-14.317c-1.823-1.153-3.118-13.836-1.934-18.93 1.04-4.472 1.01-14.8-.064-22.119-.443-3.025-.405-7.975.086-11 .49-3.025.881-21.895.868-41.933-.025-39.35.019-39.022-5.383-40.657-4.272-1.293-25.794-14.621-35.628-22.064-12.074-9.139-28.08-25.762-35.525-36.895-5.824-8.71-15.278-26.742-18.475-35.239-2.323-6.173-2.604-12.039-.613-12.803.757-.29 4.47 1.472 8.25 3.917 10.147 6.562 28.371 16.326 40.852 21.887C677.755 139.683 704.956 149 708.65 149c4.037 0 4.463-3.294 4.287-33.132l-.164-27.738 4.804-5.565c2.642-3.06 5.098-5.565 5.456-5.565.359 0 3.01-2.789 5.893-6.197 2.882-3.408 11.953-13.152 20.157-21.652C763.94 33.758 764 33.711 764 37.25c0 3.14-1.25 4.883-10.75 15.003-21.133 22.509-31.784 34.136-34 37.113-2.209 2.968-2.25 3.535-2.235 31.08.008 15.43.346 28.544.75 29.143 1.131 1.674 5.477 2.456 6.933 1.248 1.01-.839 1.304-7.156 1.31-28.208l.009-27.128 18.94-19.5 18.939-19.5.052 53.25L764 163h-4.833c-2.659 0-7.271-.428-10.25-.95-2.98-.524-11.042-1.93-17.917-3.124-15.417-2.679-38.73-9.543-54-15.9-6.325-2.633-13.525-5.552-16-6.487-4.808-1.816-25.383-12.804-33.253-17.759-5.069-3.191-7.747-3.12-7.747.204 0 3.076 10.981 24.367 17.82 34.55 15.922 23.708 42.891 45.411 73.505 59.152 13.794 6.191 22.469 8.773 34.675 10.318 4.675.592 10.637 1.346 13.25 1.675l4.75.6-.04 61.61c-.035 54.35-.21 61.297-1.488 58.945-3.224-5.936-16.712-7.326-23.883-2.46-1.81 1.23-5.947 2.827-9.19 3.55-3.245.724-7.317 1.937-9.05 2.696-3.667 1.606-5.293 1.701-7.304.429zm11.036-5.914 2.303-1.865.37-51.385c.204-28.262.005-54.744-.442-58.85-.798-7.337-.868-7.48-4.105-8.406-2.058-.59-3.646-.59-4.234-.002-1.153 1.152-1.78 119.32-.643 121.123 1.138 1.805 4.095 1.536 6.751-.615zm23.868-7.313 5.102-1.177 4.09-12.974c2.25-7.135 4.48-15.943 4.955-19.572 1.17-8.935.156-27.235-2.25-40.599-2.167-12.032-7.406-30.325-9.209-32.152-.625-.633-3.048-1.46-5.385-1.837-5.694-.92-6.083.453-2.891 10.204 4.763 14.551 6.803 25.33 7.342 38.785.683 17.084-.72 28.088-5.67 44.48-2.238 7.415-3.85 14.053-3.583 14.75.599 1.56 1.112 1.567 7.5.092zM761.434 151.5c-.036-2.2-1.47-8.725-3.187-14.5-6.359-21.391-7.193-29.018-5.057-46.265 1.051-8.494 1.01-9.963-.311-11.285-1.36-1.36-1.783-1.314-4.011.44-1.37 1.077-3.813 3.867-5.43 6.199-2.89 4.172-2.937 4.45-2.903 17.326.033 11.982.399 14.56 4.344 30.585 5.84 23.72 5.03 22.167 11.373 21.802l5.248-.302-.066-4zM358.27 285.396c.332-.332 1.195-.368 1.916-.08.798.32.561.557-.604.605-1.054.043-1.644-.193-1.312-.525zm-102.302-62.932c-2.491-.768-5.866-2.791-7.5-4.496-2.62-2.735-2.969-3.807-2.969-9.116 0-5.57.25-6.24 3.37-9.028 3.577-3.195 2.925-3.139 15.133-1.299 3.755.567 4.8.35 6.297-1.304 2.225-2.459 8.677-19.994 9.8-26.637.98-5.787 2.193-7.416 4.252-5.707 1.639 1.36 2.217 4.33 3.745 19.256.925 9.024.862 11.067-.417 13.5-1.478 2.813-1.502 2.753-1.239-3.133.284-6.356-.883-17.275-1.962-18.354-1.183-1.183-3.12 2.7-6.328 12.689-3.05 9.493-7.946 18.165-10.256 18.165-.6 0-2.354-1.35-3.895-3-3.936-4.213-10.097-3.803-13.718.913-1.815 2.364-1.547 8.562.468 10.864 3.373 3.851 14.697 5.632 19.566 3.077C274.67 216.568 282 209.77 282 208.018c0-2 3.914-7.229 3.967-5.299.13 4.75-9.607 16.306-16.299 19.345-4.892 2.22-7.541 2.298-13.699.4zm500.531-8.518c-10.025-1.12-20.047-3.433-28.052-6.476a3041.765 3041.765 0 0 0-10.879-4.113c-2.162-.81-5.762-2.3-8-3.31a429.665 429.665 0 0 0-7.569-3.324c-4.082-1.73-23.74-15.644-31.785-22.496-11.301-9.626-26.914-28.862-24.988-30.787.351-.351 5.638 1.656 11.749 4.46 6.11 2.805 11.353 5.1 11.65 5.1.296 0 3.764 1.417 7.706 3.148 8.11 3.562 35.851 11.4 45.668 12.904 12.582 1.927 23.595 2.913 32.75 2.93L764 172v21.5c0 11.825-.113 21.439-.25 21.364-.138-.074-3.4-.487-7.25-.918zm1.045-17.4c2.819-2.819 3.137-6.127.898-9.323-2.185-3.12-9.83-3.148-13.129-.049-3.086 2.9-2.917 5.377.61 8.903 3.729 3.73 8.18 3.909 11.621.468zm-28.619-4.957c.644-.776 1.436-3.043 1.76-5.04.473-2.916.135-4.11-1.723-6.088-3.222-3.43-7.346-3.232-11.11.532-3.33 3.33-3.221 5.76.436 9.757 2.388 2.61 8.751 3.111 10.637.84zm-26.035-8.225c1.967-1.378 2.253-2.253 1.812-5.54-.666-4.97-2.23-6.824-5.754-6.824-3.214 0-5.68 2.077-6.542 5.513-.74 2.952-.026 4.138 3.952 6.564 3.804 2.32 3.64 2.312 6.532.287zM683 172c3.493-3.493 2.004-8-2.643-8-2.217 0-5.357 3.313-5.357 5.651 0 1.656 2.83 4.349 4.571 4.349.786 0 2.329-.9 3.429-2zm-270.25-25.706c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zM233.731.344c.677-.274 2.027-.29 3-.037.973.254.419.478-1.231.498-1.65.02-2.446-.187-1.769-.46zm6 0c.677-.274 2.027-.29 3-.037.973.254.419.478-1.231.498-1.65.02-2.446-.187-1.769-.46zM269.75.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm8-.044c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zm10 .044c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm11.52.058c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525zm5 0c.333-.332 1.196-.368 1.918-.08.797.32.56.557-.605.605-1.054.043-1.644-.193-1.312-.525z\",\n    style: {\n      fill: \"#000\",\n      fillOpacity: 1\n    },\n    transform: \"matrix(.16018 0 0 .15833 22.527 22.739)\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      fill: \"none\",\n      stroke: \"#000\",\n      strokeWidth: 1.82777798,\n      strokeMiterlimit: 4,\n      strokeDasharray: \"none\"\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.837 235.548c0 3.777-3.087 6.869-6.871 6.869H7.11c-3.775 0-6.861-3.092-6.861-6.87V7.12C.25 3.343 3.336.25 7.11.25h152.856c3.784 0 6.87 3.093 6.87 6.87v228.428z\",\n    style: {\n      fill: \"none\",\n      strokeWidth: 1.82777798,\n      strokeMiterlimit: 4,\n      strokeDasharray: \"none\"\n    },\n    transform: \"matrix(.73316 0 0 .81584 22.325 22.466)\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.243-4.725C1.126-7.59 0-10.5 0-10.5s-1.126 2.91-3.243 5.775C-5.361-1.862-8 0-8 0s2.639 1.861 4.757 4.726C-1.126 7.59 0 10.5 0 10.5s1.126-2.91 3.243-5.774C5.361 1.861 8 0 8 0S5.361-1.862 3.243-4.725z\",\n    style: {\n      fill: \"#df0000\"\n    },\n    transform: \"matrix(1.12825 0 0 1.12825 11.157 42.827)\"\n  }), /*#__PURE__*/React.createElement(\"text\", {\n    xmlSpace: \"preserve\",\n    x: -163.695,\n    y: -216.5,\n    style: {\n      fontSize: 32,\n      fontStyle: \"normal\",\n      fontWeight: 400,\n      lineHeight: \"125%\",\n      letterSpacing: 0,\n      wordSpacing: 0,\n      fill: \"#df0000\",\n      fillOpacity: 1,\n      stroke: \"none\",\n      fontFamily: \"Bitstream Vera Sans\"\n    },\n    transform: \"scale(-1)\"\n  }, /*#__PURE__*/React.createElement(\"tspan\", {\n    x: -163.695,\n    y: -216.5,\n    style: {\n      fontStyle: \"normal\",\n      fontVariant: \"normal\",\n      fontWeight: 400,\n      fontStretch: \"normal\",\n      fill: \"#df0000\",\n      fillOpacity: 1,\n      fontFamily: \"Arial\",\n      InkscapeFontSpecification: \"Arial\"\n    }\n  }, \"J\")), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.243-4.725C1.126-7.59 0-10.5 0-10.5s-1.126 2.91-3.243 5.775C-5.361-1.862-8 0-8 0s2.639 1.861 4.757 4.726C-1.126 7.59 0 10.5 0 10.5s1.126-2.91 3.243-5.774C5.361 1.861 8 0 8 0S5.361-1.862 3.243-4.725z\",\n    style: {\n      fill: \"#df0000\"\n    },\n    transform: \"matrix(-2.04014 0 0 -2.29598 124.704 194.26)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.243-4.725C1.126-7.59 0-10.5 0-10.5s-1.126 2.91-3.243 5.775C-5.361-1.862-8 0-8 0s2.639 1.861 4.757 4.726C-1.126 7.59 0 10.5 0 10.5s1.126-2.91 3.243-5.774C5.361 1.861 8 0 8 0S5.361-1.862 3.243-4.725z\",\n    style: {\n      fill: \"#df0000\"\n    },\n    transform: \"matrix(-1.12825 0 0 -1.12825 155.94 201.48)\"\n  }));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJackOfDiamonds2);\nexport default __webpack_public_path__ + \"static/media/jack_of_diamonds2.9cf1ce536f9af1fcb6b86fb90a02b17c.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport cardCSS from './playing-card.css';\r\n\r\nexport const Suits = {\r\n    Clubs: { symbol: \"♣\" },\r\n    Diamonds: { symbol: \"♦\" },\r\n    Hearts: { symbol: \"♥\" },\r\n    Spades: { symbol: \"♠\" }\r\n}\r\n\r\nexport const Ranks = {\r\n    Ace: { symbol: \"A\", pips: { count: 1 } },\r\n    2: { symbol: \"2\", pips: { count: 2 } },\r\n    3: { symbol: \"3\", pips: { count: 3 } },\r\n    4: { symbol: \"4\", pips: { count: 4 } },\r\n    5: { symbol: \"5\", pips: { count: 5 } },\r\n    6: { symbol: \"6\", pips: { count: 6 } },\r\n    7: { symbol: \"7\", pips: { count: 7 } },\r\n    8: { symbol: \"8\", pips: { count: 8 } },\r\n    9: { symbol: \"9\", pips: { count: 9 } },\r\n    10: { symbol: \"10\", pips: { count: 10 } },\r\n    Jack: { symbol: \"J\", pips: { count: 2 } },\r\n    Queen: { symbol: \"Q\", pips: { count: 2 } },\r\n    King: { symbol: \"K\", pips: { count: 2 } }\r\n}\r\n\r\nexport default function PlayingCard({suit, rank}) {\r\n    const suitSymbol = Suits[suit].symbol;\r\n    const rankSymbol = Ranks[rank].symbol;\r\n    const pipCount = Ranks[rank].pips.count;\r\n    const pips = [];\r\n    for(var i = 0; i < pipCount; i++)\r\n        pips.push(<div className={\"center-pip-\" + (i + 1) + \" suit-\" + suit + \" rank-\" + rank}>{suitSymbol}</div>);\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-content\">\r\n                <div className=\"corners\">\r\n                    <div className=\"corner-1\">\r\n                        <div className={\"corner-1-rank suit-\" + suit + \" rank-\" + rank}>{rankSymbol}</div>\r\n                        <div className={\"corner-1-suit suit-\" + suit + \" rank-\" + rank}>{suitSymbol}</div>\r\n                    </div>\r\n                    <div className=\"corner-2\">\r\n                        <div className={\"corner-2-rank suit-\" + suit + \" rank-\" + rank}>{rankSymbol}</div>\r\n                        <div className={\"corner-2-suit suit-\" + suit + \" rank-\" + rank}>{suitSymbol}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"center suit-\" + suit + \" rank-\" + rank}>{pips}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, useRef, Children, createElement } from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { motion } from 'framer-motion';\r\nimport './pinochle-title.css';\r\nimport qos_svg from '../images/playing_cards/queen_of_spades2.svg';\r\nimport jod_svg from '../images/playing_cards/jack_of_diamonds2.svg';\r\nimport { unmountComponentAtNode } from 'react-dom';\r\nimport PlayingCard, {Suits, Ranks} from '../PlayingCard';\r\nimport PinochleGame, {createDeck} from './PinochleGame';\r\n\r\nvar si = 0;\r\nvar ri = -1;\r\n\r\nexport default function PinochleTitleScreen() {\r\n    const [cards, setCards] = useState([]);\r\n    const deck = createDeck();\r\n    const addCard = () => {\r\n        ri++;\r\n        if(ri === Ranks.length) {\r\n            ri = 0;\r\n            si++;\r\n            if(si === Suits.length)\r\n                si = 0;\r\n        }\r\n        let suit = Suits[si];\r\n        let rank = Ranks[ri];\r\n        // let suit = Suits[Math.floor(Math.random() * Suits.length)];\r\n        // let rank = Ranks[Math.floor(Math.random() * Ranks.length)];\r\n        let top = Math.random() * 65;\r\n        let left = Math.random() * 25 + (Math.random() < 0.5 ? 65 : 0);\r\n        let newCard = (\r\n            <div style={{ top: top + \"%\", left: left + \"%\" }}>\r\n                <motion.div\r\n                    // animate={{ rotate: [0, 360] }}\r\n                    // transition={{ duration: 10, repeat: Infinity }}\r\n                >\r\n                    {deck[Math.floor(Math.random() * deck.length)]}\r\n                    {/* <PlayingCard suit={suit} rank={rank} /> */}\r\n                </motion.div>\r\n            </div>\r\n        );\r\n        if(cards.length < 20)\r\n            setCards([...cards, newCard]);\r\n        else\r\n            setCards([...cards.slice(1), newCard]);\r\n    };\r\n    const keydown = (e) => {\r\n        addCard();\r\n    };\r\n    return (\r\n        <div className=\"title-page\" tabindex=\"0\" onKeyDown={keydown}>\r\n            {cards}\r\n            {createTitleText()}\r\n            {createTitleCards()}\r\n            {createTitleLoading()}\r\n            {createAddCardButton(addCard)}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction createTitleText() {\r\n    return (\r\n        <motion.div className=\"title-text\"\r\n            initial={{ top: \"20%\", left: \"50%\", translateX: \"-50%\", translateY: \"-50%\" }}\r\n            animate={{ scale: [1, 1.1, 1.1, 1, 1], rotate: [0, -3, 3, -3, 3, 0] }}\r\n            transition={{ duration: 1, ease: \"easeInOut\", repeat: Infinity, repeatDelay: 3 }}\r\n        >\r\n            Nickster Cards™\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nfunction createTitleCards() {\r\n    return (\r\n        <div className=\"title-cards\" id=\"card-container\" \r\n            style={{ top: \"50%\", left: \"50%\", transform: \"translateX(-50%) translateY(-50%)\" }}\r\n        >\r\n            <motion.img className=\"title-card-left\" src={qos_svg} alt=\"Queen of Spades\" \r\n                initial={{ scale: 1.2, boxShadow: \"2px 2px 2px 0px rgba(0, 0, 0, 0.75)\" }}\r\n                animate={{  x: [0, -150, 0], rotate: [-22.5, -360, -22.5], transition: { delay: 2, duration: 3, times: [0, 0.75, 1], ease: \"easeInOut\", repeat: Infinity, repeatDelay: 2 } }} \r\n                whileTap={{ scale: 1.5, boxShadow: \"5px 5px 5px 0px rgba(0, 0, 0, 0.25)\" }}\r\n            />\r\n            <motion.img className=\"title-card-right\" src={jod_svg} alt=\"Jack of Diamonds\" \r\n                initial={{ scale: 1.2, boxShadow: \"2px 2px 2px 0px rgba(0, 0, 0, 0.75)\" }}\r\n                animate={{ x: [0, 150, 0], rotate: [22.5, 360, 22.5], transition: { delay: 2, duration: 3, times: [0, 0.75, 1], ease: \"easeInOut\", repeat: Infinity, repeatDelay: 2 } }} \r\n                whileTap={{ scale: 1.5, boxShadow: \"5px 5px 5px 0px rgba(0, 0, 0, 0.25)\" }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction createTitleLoading() {\r\n    return (\r\n        <div style={{ top: \"80%\", left: \"50%\", transform: \"translateX(-50%) translateY(-50%)\" }}>\r\n            <div className=\"title-loading\">{ (\"Loading...\").split('').map(function (a) { return <span>{a}</span> }) }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nvar interval = 0;\r\n\r\nfunction createAddCardButton(addCard) {\r\n    return (\r\n        <div style={{ top: \"70%\", left: \"50%\", transform: \"translateX(-50%) translateY(-50%)\" }}>\r\n            <button style={{ height: '40px', width: '100px', fontSize: '20px' }} onClick={addCard}>\r\n                <div style={{display:\"inline-block\"}}>Add Card</div>\r\n            </button>\r\n        </div>\r\n    );\r\n}","import PinochleTitleScreen from './PinochleTitleScreen';\r\nimport PlayingCard, {Suits, Ranks, createCard} from '../PlayingCard';\r\n\r\nexport default function PinochleGame() {\r\n    return (\r\n        <div>\r\n            <PinochleTitleScreen />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function createDeck() {\r\n    const suits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"];\r\n    const ranks = [\"9\", \"Jack\", \"Queen\", \"King\", \"10\", \"Ace\"];\r\n    const deck = [];\r\n    for(var s = 0; s < suits.length; s++) {\r\n        for(var r = 0; r < ranks.length; r++) {\r\n            deck.push(<PlayingCard suit={suits[s]} rank={ranks[r]} />);\r\n        }\r\n    }\r\n    return deck;\r\n}\r\n\r\n// export const Suits = ['hearts', 'spades', 'diamonds', 'clubs'];\r\n// export const Ranks = ['9', 'J', 'Q', 'K', '10', 'A'];","import PinochleGame from './games/pinochle/PinochleGame';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PinochleGame />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"names":["aa","require","ca","p","a","b","c","arguments","length","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","Object","prototype","hasOwnProperty","ka","la","ma","v","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","ra","sa","toUpperCase","ta","slice","pa","isNaN","qa","call","test","oa","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","Error","stack","trim","match","Na","Oa","prepareStackTrace","defineProperty","set","Reflect","construct","l","h","k","displayName","includes","name","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","Array","isArray","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","indexOf","setProperty","keys","charAt","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","push","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","m","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","Math","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","key","String","fromCharCode","code","location","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","node","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","min","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","bind","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","context","memoizedValue","next","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","callback","dh","K","eh","fh","gh","q","r","y","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","L","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","state","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","props","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","join","uh","vh","index","wh","xh","yh","implementation","zh","Ah","done","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","M","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","N","O","P","Sh","Th","Uh","Vh","Q","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","R","ni","lastEffect","stores","oi","pi","qi","ri","create","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","message","digest","Li","Mi","console","error","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","compare","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Bj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","S","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","src","Wk","mk","ceil","nk","ok","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","version","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","exports","createPortal","dl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","module","__self","__source","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","count","toArray","only","Fragment","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","_arrayLikeToArray","arr","len","i","arr2","_unsupportedIterableToArray","o","minLen","from","iter","TypeError","_i","_s","_e","_x","_r","_arr","_n","_d","_typeof","obj","_toPropertyKey","arg","hint","prim","toPrimitive","res","Number","_defineProperty","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread2","getOwnPropertyDescriptors","defineProperties","MotionConfigContext","transformPagePoint","isStatic","reducedMotion","MotionContext","PresenceContext","isBrowser","useIsomorphicLayoutEffect","LazyContext","strict","isRefObject","isVariantLabel","isAnimationControls","variantPriorityOrder","variantProps","isControllingVariants","animate","some","isVariantNode","Boolean","variants","useCreateMotionContext","_getCurrentTreeVarian","initial","inherit","getCurrentTreeVariants","variantLabelsAsDependency","prop","featureProps","exit","drag","hover","tap","pan","inView","layout","featureDefinitions","_loop","isEnabled","useConstant","init","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","LayoutGroupContext","SwitchLayoutGroupContext","motionComponentSymbol","createMotionComponent","_ref","preloadedFeatures","createVisualElement","useRender","useVisualState","features","_objectSpread","loadFeatures","ForwardRefComponent","externalRef","MeasureLayout","configAndProps","layoutId","useLayoutId","projectionId","visualState","visualElement","parent","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","renderer","blockInitialAnimation","update","updateFeatures","HandoffAppearAnimations","animationState","animateChanges","useVisualElement","initialLayoutGroupConfig","isStrict","React","mount","useMotionRef","_ref2","layoutGroupId","createMotionProxy","createConfig","custom","Proxy","componentCache","_target","lowercaseSVGElements","isSVGComponent","scaleCorrectors","transformPropOrder","transformProps","isForcedMotionValue","startsWith","isMotionValue","getVelocity","translateAlias","transformPerspective","numTransforms","checkStringStartsWith","token","isCSSVariableName","isCSSVariableToken","getValueAsType","transform","clamp","max","parse","parseFloat","alpha","scale","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","unit","endsWith","degrees","percent","px","vw","progressPercentage","int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","maxWidth","maxHeight","right","bottom","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","originX","originY","originZ","numOctaves","buildHTMLStyles","latestValues","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","transformIsDefault","_ref$enableHardwareAc","enableHardwareAcceleration","_ref$allowTransformNo","allowTransformNone","transformString","transformName","buildTransform","_transformOrigin$orig","_transformOrigin$orig2","_transformOrigin$orig3","createHtmlRenderState","copyRawValuesOnly","useStyle","useInitialMotionValues","transformValues","useHTMLProps","htmlProps","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","isValidProp","shouldForward","_a","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","calcOrigin","origin","dashKeys","array","camelKeys","buildSVGAttrs","isSVGTag","attrX","attrY","pathLength","_ref$pathSpacing","pathSpacing","_ref$pathOffset","pathOffset","_excluded","viewBox","attrs","dimensions","pxOriginX","pxOriginY","calcSVGTransformOrigin","spacing","useDashCase","buildSVGPath","createSvgRenderState","useSVGProps","_isStatic","visualProps","rawStyles","createUseRender","forwardMotionProps","filteredProps","isDom","values","filterProps","elementProps","renderedChildren","camelToDash","str","renderHTML","styleProp","projection","getProjectionStyles","camelCaseAttributes","renderSVG","renderState","_styleProp","scrapeMotionValuesFromProps","prevProps","newValues","scrapeMotionValuesFromProps$1","resolveVariantFromProps","definition","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","makeUseVisualState","config","make","createRenderState","onMount","makeLatestValues","makeState","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","resolved","transitionEnd","valueTarget","svgMotionConfig","getBBox","getBoundingClientRect","htmlMotionConfig","_classCallCheck","Constructor","_defineProperties","descriptor","_createClass","protoProps","staticProps","_setPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","_getPrototypeOf","getPrototypeOf","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","sham","result","Super","NewTarget","addDomEvent","eventName","handler","isPrimaryPointer","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","combineFunctions","pipe","_len","transformers","_key","reduce","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","frameData","delta","timestamp","isProcessing","useDefaultElapsed","runNextFrame","stepsOrder","steps","acc","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","step","schedule","addToCurrentFrame","buffer","cancel","process","createRenderStep","sync","keepAlive","immediate","startLoop","cancelSync","processStep","stepId","processFrame","requestAnimationFrame","addHoverEvent","isActive","callbackName","info","getProps","whileHover","setActive","HoverGesture","_Feature","_super","FocusGesture","_this","isFocusVisible","matches","_this2","onFocus","onBlur","isNodeOrChild","parentElement","noop","any","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startEvent","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","_this$node$getProps","onTapCancel","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","_this$node$getProps3","removePointerListener","removeFocusListener","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","root","lookupRoot","rootObservers","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","all","InViewFeature","hasEnteredView","isInView","_this$node$getProps$v","viewport","rootMargin","_viewport$amount","amount","once","threshold","isIntersecting","_this2$node$getProps","onViewportEnter","onViewportLeave","startObserver","_this$node","hasOptionsChanged","_ref$viewport","_ref2$viewport","prevViewport","hasViewportOptionChanged","gestureAnimations","shallowCompare","prev","prevLength","resolveVariant","getCurrent","velocity","optimizedAppearDataAttribute","warning","invariant","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","instantAnimationState","isBezierDefinition","easing","isWaapiSupportedEasing","supportedWaapiEasing","every","cubicBezierAsString","_slicedToArray","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","mapEasingToNativeEasing","featureTests","waapi","Element","results","supports","calcBezier","a1","a2","subdivisionPrecision","subdivisionMaxIterations","cubicBezier","mX1","mY1","mX2","mY2","getTForX","aX","lowerBound","upperBound","currentX","currentT","abs","binarySubdivide","isColorString","testProp","splitColor","aName","bName","cName","_v$match2","rgbUnit","clampRgbUnit","rgba","red","green","blue","_ref$alpha","alpha$1","hex","parseInt","hsla","hue","saturation","lightness","to","progress","hueToRgb","mixLinearColor","fromExpo","sqrt","colorTypes","getColorType","find","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","colorToken","numberToken","analyseComplexValue","numColors","numNumbers","colors","_toConsumableArray","numbers","tokenised","createTransformer","_analyseComplexValue","numValues","output","convertNumbersToZero","complex","_b","getAnimatableNone","parsed","transformer","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","toFromDifference","mixNumber","createMixers","customMixer","mixers","mixerFactory","numMixers","mixer","easingFunction","interpolate","_ref$clamp","isClamp","inputLength","reverse","interpolator","progressInRange","defaultOffset","remaining","offsetProgress","fillOffset","mirrorEasing","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","_definition","isEasingArray","keyframes","_ref$duration","duration","keyframeValues","times","_ref$ease","easingFunctions","absoluteTimes","convertOffsetToTimes","mapTimeToKeyframe","calculatedDuration","velocityPerSecond","frameDuration","velocitySampleDuration","calcGeneratorVelocity","resolveValue","prevT","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","envelope","derivative","_ref$bounce","bounce","_ref$velocity","_ref$mass","mass","dampingRatio","undampedFreq","exponentialDecay","calcAngularFreq","exp","initialGuess","rootIterations","approximateRoot","stiffness","damping","durationKeys","physicsKeys","isSpringType","spring","resolveSpring","restDelta","restSpeed","_getSpringOptions","springOptions","isResolvedFromDuration","derived","getSpringOptions","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","_ref$power","power","_ref$timeConstant","timeConstant","_ref$bounceDamping","bounceDamping","_ref$bounceStiffness","bounceStiffness","modifyTarget","_ref$restDelta","nearestBoundary","amplitude","ideal","timeReachedBoundary","spring$1","calcDelta","calcLatest","applyFriction","latest","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","stop","types","decay","tween","animateValue","resolveFinishedPromise","currentFinishedPromise","animationDriver","_ref$autoplay","autoplay","_ref$delay","_ref$driver","driver","keyframes$1","_ref$type","_ref$repeat","_ref$repeatDelay","repeatDelay","_ref$repeatType","repeatType","onPlay","onStop","onComplete","onUpdate","speed","hasStopped","updateFinishedPromise","mapNumbersToKeyframes","generatorFactory","mirroredGenerator","generator","playState","holdTime","cancelTime","calculateDuration","resolvedDuration","totalDuration","tick","elapsed","frameGenerator","currentIteration","iterationProgress","iterationIsOdd","isAnimationFinished","finish","stopAnimationDriver","play","controls","reject","newTime","newSpeed","pause","complete","sample","acceleratedValues","sampleDelta","requiresPregeneratedKeyframes","valueName","createAcceleratedAnimation","_options$duration","sampleAnimation","pregeneratedKeyframes","keyframeOptions","fill","iterations","direction","animateStyle","owner","safeCancel","onfinish","getFinalKeyframe","currentTime","playbackRate","setWithVelocity","underDampedSpring","keyframesTransition","getDefaultTransition","valueKey","isAnimatable","maxDefaults","applyDefaultFilter","_v$slice$split2","functionRegex","functions","defaultValueTypes","backgroundColor","outlineColor","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isZero","getZeroUnit","potentialUnitType","getValueTransition","animateMotionValue","valueTransition","_transition$elapsed","isTargetAnimatable","getKeyframes","originKeyframe","targetKeyframe","isOriginAnimatable","delayBy","createInstantAnimation","when","delayChildren","staggerChildren","staggerDirection","isTransitionDefined","HTMLElement","acceleratedAnimation","isWillChangeMotionValue","isNumericalString","isZeroValueString","addUniqueItem","item","removeItem","SubscriptionManager","subscriptions","numSubscriptions","MotionValue","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","postRender","scheduleVelocityCheck","change","notify","velocityChange","renderRequest","velocityCheck","hasAnimated","subscription","on","unsubscribe","read","getSize","eventManagers","clear","passiveEffect","stopPassiveEffect","startAnimation","_this3","animationStart","animationComplete","clearAnimation","animationCancel","clearListeners","motionValue","testValueType","dimensionValueTypes","findDimensionValueType","valueTypes","findValueType","setMotionValue","hasValue","addValue","setTarget","makeTargetAnimatable","_ref$transitionEnd","getOriginFromTransition","animateTarget","_ref2$delay","transitionOverride","_visualElement$makeTa","_visualElement$makeTa2","willChange","animations","animationTypeState","getState","protectedKeys","needsAnimating","shouldBlock","shouldBlockAnimation","appearId","shouldReduceMotion","remove","animateVariant","variant","_ref$transition","getAnimation","getChildAnimations","variantChildren","forwardDelay","_transition","_transition$delayChil","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","animateChildren","_ref3","first","sortNodePosition","reversePriorityOrder","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createTypeState","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","_typeState$prevResolv","prevResolvedValues","allKeys","markToAnimate","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","AnimationFeature","subscribe","updateAnimationControlsSubscription","ExitAnimationFeature","_this$node$presenceCo","isPresent","onExitComplete","prevIsPresent","prevPresenceContext","exitAnimation","register","PanSession","handlers","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","distance2D","_this$handlers","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","_this$handlers2","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","removeListeners","subtractPoint","lastDevicePoint","startDevicePoint","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createDelta","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","topLeft","bottomRight","transformBoxPoints","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","_ref$snapToCursor","snapToCursor","panSession","stopAnimation","_this$getProps","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","_this$getProps2","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","getCurrentDirection","updateAxis","getTransformPagePoint","onDragEnd","_this$visualElement","_point","shouldDrag","axisValue","applyConstraints","_this$getProps6","dragConstraints","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","_this$getProps7","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","_this$getProps8","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","_this4","dragKey","externalMotionValue","_this5","_projection$layout$la","_this6","_this$getProps9","boxProgress","sourceLength","targetLength","updateScroll","updateLayout","_this6$constraints$ax","_this7","stopPointerListener","_this7$getProps","_this7$getProps$dragL","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","scalePositionWithinConstraints","stopLayoutUpdateListener","hasLayoutChanged","_props$drag","_props$dragDirectionL","_props$dragPropagatio","_props$dragConstraint","_props$dragElastic","_props$dragMomentum","DragGesture","removeGroupControls","dragControls","addListeners","asyncHandler","PanGesture","removePointerDownListener","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","onPointerDown","updateHandlers","pixelsToPercent","pixels","correctBorderRadius","correct","cssVariableRegex","maxDepth","getVariableValue","depth","_parseCSSVariable","exec","_match","parseCSSVariable","_parseCSSVariable2","getComputedStyle","getPropertyValue","resolveCSSVariables","_objectDestructuringEmpty","varToken","correctBoxShadow","treeScale","projectionDelta","original","containsCSSVariables","cssVariables","shadow","xScale","yScale","averageScale","cssVariable","MeasureLayoutWithContext","_React__default$Compo","correctors","_this$props","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","didUpdate","safeToRemove","setOptions","_this$props2","layoutDependency","willUpdate","promote","relegate","getStack","members","currentAnimation","isLead","_this$props3","promoteContext","scheduleCheckAfterUnmount","deregister","React__default","_usePresence","usePresence","_usePresence2","applyTo","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","resumingFrom","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","isDirty","transformAxes","animationTarget","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","elementId","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","subscriptionManager","args","SVGElement","_this$options","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","_visualElement$getPro","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","preRender","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","_this$options2","getTransformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","unblockUpdate","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","targetDelta","scheduleUpdateProjection","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","_this$options3","resolvedRelativeTargetAt","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","applyTransform","isProjecting","canSkip","_this$options4","pendingAnimation","treePath","isSharedTransition","treeLength","applyTreeDeltas","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","prevRelativeTarget","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","setTargetDelta","mixAxis","follow","opacityExit","borderLabel","followRadius","leadRadius","mixValues","motionValue$1","animateSingleValue","completeAnimation","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","hasRotate","resetValues","setStaticValue","styles","visibility","pointerEvents","emptyStyles","valuesToRender","applyTransformsToTarget","_this$projectionDelta","_scaleCorrectors$key","corrected","num","hasListeners","_node$layout","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","searchNode","querySelector","DocumentProjectionNode","HTMLProjectionNode","documentNode","position","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","_ref3$paddingLeft","_ref3$paddingRight","_ref4","_ref5","_ref5$paddingTop","_ref5$paddingBottom","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removedTransforms","removeNonTranslationalTransform","jump","scrollY","pageYOffset","convertedTarget","changedKeys","originBbox","elementComputedStyle","targetBbox","convertChangedValueTypes","_ref12","_ref13","scrollTo","parseDomVariant","unitConversion","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","_this$scrapeMotionVal","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","ProjectionNodeConstructor","renderedProps","_excluded2","_featureDefinitions$n","FeatureConstructor","MeasureLayoutComponent","feature","build","measureInstanceViewportBox","canMutate","makeTargetAnimatableFromInstance","nextValue","prevValue","existingValue","getStaticValue","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getClosestVariantNode","closestVariantNode","removeValueFromRenderState","readValueFromInstance","valueFromInitial","getBaseTargetFromProps","_this$events$eventNam","_key2","DOMVisualElement","_VisualElement","transitionOrigin","getOrigin","newValueKeys","numNewValues","targetValue","readValue","setBaseTarget","checkTargetForNewValues","HTMLVisualElement","_DOMVisualElement","defaultType","computedStyle","childSubscription","_get","property","receiver","desc","SVGVisualElement","getAttribute","createDomVisualElement","motion","_ref$forwardMotionPro","createDomMotionConfig","Suits","Clubs","symbol","Diamonds","Hearts","Spades","Ranks","Ace","pips","Jack","Queen","King","PlayingCard","suit","rank","suitSymbol","rankSymbol","pipCount","_jsx","className","_jsxs","PinochleTitleScreen","_useState2","cards","setCards","deck","suits","ranks","s","createDeck","addCard","newCard","div","tabindex","onKeyDown","qos_svg","alt","jod_svg","createAddCardButton","fontSize","PinochleGame","App","ReactDOM","getElementById"],"sourceRoot":""}